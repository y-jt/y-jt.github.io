<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>文件操作</title>
      <link href="/2023/11/06/demo/C++/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/11/06/demo/C++/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>常用文件读取写入等操作！</p><span id="more"></span><h2 id="1-文件读写"><a href="#1-文件读写" class="headerlink" title="1.文件读写"></a>1.文件读写</h2><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;打开失败&quot;</span>);<span class="comment">//相当于print，输出信息的同时，把编译器返回的错误信息输出出来。</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> errstr[<span class="number">100</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">strerror_s</span>(errstr, <span class="number">100</span>, errno);<span class="comment">//有错误码返回对应的str </span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将文件指针相对于SEEK_END位置，偏移0L(L表示long)个字节(为正往后移动)。</span></span><br><span class="line"><span class="comment">//SEEK_SET： 文件开头，SEEK_CUR： 当前位置，SEEK_END： 文件结尾</span></span><br><span class="line">fseek(pFile, <span class="number">0L</span>, SEEK_END);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftell  <span class="comment">//返回当前文件指针相对于开头的偏移量，错误-1，并返回errno错误信息</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(pBuf, <span class="number">0</span>, nFileSize);<span class="comment">//将pBuf的前nFileSize  **字节**   初始化为0。</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//缓冲区大于文件</span></span><br><span class="line"><span class="type">int</span> nDataSize = <span class="built_in">fread</span>(pBuf, <span class="built_in">sizeof</span>(<span class="type">unsigned</span> <span class="type">char</span>), nFileSize, pFile);<span class="comment">//pBuf缓存，基本单元字节，读取基本单元数，文件指针(会将文件指针移动到最后读取位置)。读取字节数=基本单元字节*读取单元数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//缓冲区小于文件</span></span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">feof</span>(p))&#123;<span class="comment">//feof判断文件是否读取完,true没有，false读取完</span></span><br><span class="line"><span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="built_in">sizeof</span>(buffer));</span><br><span class="line"><span class="type">int</span> nDataSize =<span class="built_in">fread</span>(buffer, <span class="built_in">sizeof</span>(<span class="type">char</span>), <span class="built_in">sizeof</span>(buffer)<span class="number">-1</span>, p);<span class="comment">//-1是为了存储字符串的&#x27;/0&#x27;,二进制视具体情况，fread会返回实际读取基本单元数(占满一个基本单元才算一个)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">二进制读取换行 \r\n，文本读取换行\n</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//fopen fclose 打开和关闭</span><br><span class="line">fwrite(pBuf, 1, nFileSize, nFile);//缓存，缓存单元大小，单元个数，写入文件的指针</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.打开文件</span></span><br><span class="line">FILE* pFile = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//fopen_s，成功返回0，其他返回错误码，可以用perror输出</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>!=<span class="built_in">fopen_s</span>(&amp;pFile,<span class="string">&quot;D:\\A_project\\Test\\Test\\Image.jpg&quot;</span>, <span class="string">&quot;rb&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">perror</span>(<span class="string">&quot;打开失败&quot;</span>);</span><br><span class="line">    <span class="comment">//打开失败</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取文件大小</span></span><br><span class="line"><span class="built_in">fseek</span>(pFile, <span class="number">0</span>, SEEK_END);<span class="comment">//将文件指针移动到末尾</span></span><br><span class="line"><span class="type">int</span> nFileSize = <span class="built_in">ftell</span>(pFile);</span><br><span class="line"><span class="built_in">fseek</span>(pFile, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"><span class="comment">//初始化存文件</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* pBuf = <span class="keyword">new</span> <span class="type">unsigned</span> <span class="type">char</span>[nFileSize];<span class="comment">//对于文本可以new unsigned char[nFileSize+1]存&#x27;/0&#x27;</span></span><br><span class="line"><span class="built_in">memset</span>(pBuf, <span class="number">0</span>, nFileSize);</span><br><span class="line"><span class="comment">//读取文件数据</span></span><br><span class="line"><span class="type">int</span> nDataSize = <span class="built_in">fread</span>(pBuf, <span class="built_in">sizeof</span>(<span class="type">unsigned</span> <span class="type">char</span>), nFileSize, pFile);</span><br><span class="line"><span class="comment">//写入</span></span><br><span class="line"><span class="built_in">fwrite</span>(pBuf, <span class="number">1</span>, nFileSize, nFile);</span><br><span class="line"><span class="comment">//关闭</span></span><br><span class="line"><span class="built_in">fclose</span>(nFile);</span><br><span class="line"><span class="keyword">delete</span>[] pBuf;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -文件读写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -file </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2023/10/27/c++/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2023/10/27/c++/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>1.vector</p><p>容器使用insert后，地址会发生变化，原来申请的指针或迭代器会失效。</p><p>begin返回迭代器第一个值的指针，end返回最后一个的后一个。</p><p>insert(iterator,value)在当前迭代器位置前插入value。</p><p>100</p><p>12</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>url_down</title>
      <link href="/2023/10/10/demo/C++/url_down/"/>
      <url>/2023/10/10/demo/C++/url_down/</url>
      
        <content type="html"><![CDATA[<p>C语言实现URL下载文件。</p><span id="more"></span><p><strong>涉及到的知识及函数。</strong></p><blockquote><p>写代码时注意输入输出类型。</p><p>指针就是指向一段内存地址。</p><p>size_t在格式化字符串时用%zu表示</p><p>结构体中的多个变量地址连续，但要考虑内存对齐问题，前一个变量越界会导致后一个变量异常。</p><p>服务端返回值换行都是\r\n为了适应mac和win linux。</p></blockquote><blockquote><p>解析url(协议 ip等)—》启用网络库—》创建套接字—》连接服务器(注意ip地址点分10进制，大端)—》初始化请求头—》通过套接字发送请求头—》recv接收返回的数据并解析响应头(前面一部分不是数据，而是响应头，响应头和数据之间通过空白行分开\r\n)—》以二进制存储数据</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//简单日志输出，\表示下面和上面是同一行</span><br><span class="line">#define LOG1(fmt,...)\</span><br><span class="line">do\</span><br><span class="line">&#123;\</span><br><span class="line">    printf(&quot;[Debug] [%s(%d)] : &quot;fmt,__FUNCTION__,__LINE__,##__VA_ARGS__);\</span><br><span class="line">&#125;while (0);</span><br></pre></td></tr></table></figure><h2 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;shttp.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">urlDownload(<span class="string">&quot;https://pm.myapp.com/invc/xfspeed/qqpcmgr/download/QQPCDownload_home_310053.exe&quot;</span>, <span class="string">&quot;电脑管家.exe&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="shttp-h"><a href="#shttp-h" class="headerlink" title="shttp.h"></a>shttp.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 下载url链接文件，保存文件名filename</span></span><br><span class="line"><span class="comment">* @param url 待下载文件的链接</span></span><br><span class="line"><span class="comment">* @param filename 保存文件名</span></span><br><span class="line"><span class="comment">* @return false 失败 true成功</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">urlDownload</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* url, <span class="type">const</span> <span class="type">char</span>* filename)</span>;</span><br></pre></td></tr></table></figure><h2 id="shttp-c"><a href="#shttp-c" class="headerlink" title="shttp.c"></a>shttp.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;shttp.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;WS2tcpip.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="comment">//简单实用的日志输出，LOG1(&quot;url: %s  filename:%s\n&quot;, url, filename);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG1(fmt,...)\</span></span><br><span class="line"><span class="meta">do\</span></span><br><span class="line"><span class="meta">&#123;\</span></span><br><span class="line"><span class="meta">    printf(<span class="string">&quot;[Debug] [%s(%d)] : &quot;</span>#fmt,__FUNCTION__,__LINE__,##__VA_ARGS__);\</span></span><br><span class="line"><span class="meta">&#125;while (0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HTTP_BUFSIZE 1024*1024</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">http_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> protocol[<span class="number">6</span>];<span class="comment">//协议名称</span></span><br><span class="line"><span class="type">char</span> host[<span class="number">32</span>];<span class="comment">//主机地址</span></span><br><span class="line"><span class="type">char</span> resource[<span class="number">128</span>];<span class="comment">//请求下载的资源</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> port;<span class="comment">//端口号</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> request_headers[<span class="number">1024</span>];<span class="comment">//请求头</span></span><br><span class="line"><span class="type">char</span> buffer[HTTP_BUFSIZE];<span class="comment">//接收数据的缓存区</span></span><br><span class="line">&#125;<span class="type">http_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">http_t</span> http = &#123; <span class="number">0</span> &#125;;<span class="comment">//初始化为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回头</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* <span class="title function_">http_header</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分割下载链接</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">http_init</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* url)</span>;</span><br><span class="line"><span class="comment">//初始化网络库，启用网络库</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">socket_init</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//清理网络库</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">socket_clean</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//连接服务器</span></span><br><span class="line">SOCKET <span class="title function_">connectToHost</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* ip, <span class="type">unsigned</span> <span class="type">short</span> port)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析主机</span></span><br><span class="line">ULONG <span class="title function_">parseHost</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* ip)</span>;</span><br><span class="line"><span class="comment">//读取一行</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">readline</span><span class="params">(SOCKET fd, <span class="type">char</span>* buf, <span class="type">size_t</span> len)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">urlDownload</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* url, <span class="type">const</span> <span class="type">char</span>* filename)</span></span><br><span class="line">&#123;</span><br><span class="line">LOG1(<span class="string">&quot;url: %s  filename:%s\n&quot;</span>, url, filename);</span><br><span class="line">http_init(url);</span><br><span class="line">socket_init();</span><br><span class="line">SOCKET fd = connectToHost(http.host,http.port);</span><br><span class="line"><span class="keyword">if</span> (fd == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line">LOG1(<span class="string">&quot;connectToHost failed:%d\n&quot;</span>,WSAGetLastError());</span><br><span class="line">socket_clean();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发送请求</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* header = http_header();</span><br><span class="line"><span class="type">int</span> ret=send(fd, header, <span class="built_in">strlen</span>(header),<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == ret)</span><br><span class="line">&#123;</span><br><span class="line">LOG1(<span class="string">&quot;服务器下线了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">LOG1(<span class="string">&quot;send error:%d&quot;</span>, WSAGetLastError());</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析响应头</span></span><br><span class="line"><span class="type">size_t</span>  totalSize = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> rspline[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">size_t</span> len=readline(fd, rspline, <span class="number">128</span>);</span><br><span class="line"><span class="comment">//头解析完毕</span></span><br><span class="line"><span class="keyword">if</span> (rspline[<span class="number">0</span>] == <span class="string">&#x27;\r&#x27;</span> &amp;&amp; rspline[<span class="number">1</span>] == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">rspline[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="built_in">puts</span>(rspline);</span><br><span class="line"><span class="comment">//解析返回头，Content-Length后面的值，就是要发送内容的长度</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strstr</span>(rspline, <span class="string">&quot;Content-Length&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* pstr = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (pstr = rspline; *pstr++ != <span class="string">&#x27; &#x27;</span> &amp;&amp; *pstr;);<span class="comment">//*pstr不等于：和不为空就++</span></span><br><span class="line"><span class="comment">//totalSize = sscanf_s(pstr, &quot;%llu&quot;);</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span>==<span class="built_in">sscanf</span>(pstr, <span class="string">&quot;%zu&quot;</span>, &amp;totalSize))</span><br><span class="line">&#123;</span><br><span class="line">LOG1(<span class="string">&quot;获取文件大小失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;totalSIze:%u\n&quot;</span>, totalSize);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">FILE* fp=fopen(filename, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收服务器发送的响应</span></span><br><span class="line"><span class="type">size_t</span> curSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> len=recv(fd, http.buffer, HTTP_BUFSIZE,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">LOG1(<span class="string">&quot;服务器下线了&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">LOG1(<span class="string">&quot;下载失败:%d&quot;</span>, WSAGetLastError());</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">curSize += len;</span><br><span class="line">fwrite(http.buffer, <span class="keyword">sizeof</span>(<span class="type">char</span>), len,fp);</span><br><span class="line">&#125; <span class="keyword">while</span> (curSize&lt;totalSize);</span><br><span class="line">fclose(fp);</span><br><span class="line">socket_clean();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">http_init</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* url)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//https://pm.myapp.com/invc/xfspeed/qqpcmgr/download/QQPCDownload_home_310053.exe</span></span><br><span class="line"><span class="comment">//协议:https 超文本传输协议</span></span><br><span class="line"><span class="comment">//主机：pm.myapp.com    标识服务器地址</span></span><br><span class="line"><span class="comment">//资源：invc/xfspeed/qqpcmgr/download/QQPCDownload_home_310053.exe要下载的资源</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将http前sizeof(http)个  字节  初始化成0；</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;http, <span class="number">0</span>, <span class="keyword">sizeof</span>(http));</span><br><span class="line">http.port = <span class="number">80</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* pstr = url;</span><br><span class="line"><span class="comment">//解析协议</span></span><br><span class="line"><span class="keyword">while</span> (*pstr !=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">pstr++;</span><br><span class="line">&#125;</span><br><span class="line">strncpy_s(http.protocol,<span class="number">6</span>,url, pstr - url);</span><br><span class="line"><span class="comment">//解析ip</span></span><br><span class="line">pstr += <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>;*pstr!=<span class="string">&#x27;/&#x27;</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">http.host[i] = *pstr++;</span><br><span class="line">&#125;</span><br><span class="line">pstr += <span class="number">1</span>;</span><br><span class="line"><span class="comment">//解析资源链接</span></span><br><span class="line">strcpy_s(http.resource, <span class="number">64</span>, pstr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* <span class="title function_">http_header</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> offset = <span class="number">0</span>;</span><br><span class="line">offset += sprintf_s(http.request_headers +offset,<span class="number">1024</span>-offset,<span class="string">&quot;GET /%s HTTP/1.1\r\n&quot;</span>, http.resource);</span><br><span class="line">offset += sprintf_s(http.request_headers +offset,<span class="number">1024</span>-offset, <span class="string">&quot;User-Agent:Mozilla/5.0\r\n&quot;</span>);</span><br><span class="line">offset += sprintf_s(http.request_headers +offset,<span class="number">1024</span>-offset, <span class="string">&quot;Accept:*/*\r\n&quot;</span>);</span><br><span class="line">offset += sprintf_s(http.request_headers +offset,<span class="number">1024</span>-offset, <span class="string">&quot;Accept-Encoding:gzip, deflate, br\r\n&quot;</span>);</span><br><span class="line">offset += sprintf_s(http.request_headers +offset,<span class="number">1024</span>-offset, <span class="string">&quot;Connection:keep-alive\r\n&quot;</span>);</span><br><span class="line">offset += sprintf_s(http.request_headers +offset,<span class="number">1024</span>-offset, <span class="string">&quot;Host:%s\r\n&quot;</span>, http.host);</span><br><span class="line">offset += sprintf_s(http.request_headers +offset,<span class="number">1024</span>-offset, <span class="string">&quot;Cache-Control:no-cache\r\n&quot;</span>);</span><br><span class="line">strcat_s(http.request_headers, <span class="number">1024</span> - offset, <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> http.request_headers;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">添加#include&lt;WinSock2.h&gt;</span></span><br><span class="line"><span class="comment">#pragma comment(lib,&quot;ws2_32.lib&quot;)链接库</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">socket_init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">WSADATA data;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> != WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;data))<span class="comment">//启用网络库，成功0，失败有返回码</span></span><br><span class="line">&#123;</span><br><span class="line">LOG1(<span class="string">&quot;WSAStartup failed:%d\n&quot;</span>, WSAGetLastError());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">socket_clean</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">WSACleanup();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SOCKET <span class="title function_">connectToHost</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* ip, <span class="type">unsigned</span> <span class="type">short</span> port)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//1.创建socket套接字</span></span><br><span class="line"><span class="comment">//AF_INET ipv4地址协议,SOCK_STREAM流式套接字</span></span><br><span class="line"><span class="comment">//协议  socket类型  数据报格式</span></span><br><span class="line">SOCKET fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="keyword">if</span> (fd == INVALID_SOCKET)</span><br><span class="line"><span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line"><span class="comment">//2.连接服务器</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span> =</span> &#123; <span class="number">0</span> &#125;;<span class="comment">//存储端口 ip</span></span><br><span class="line">addr.sin_family = AF_INET;</span><br><span class="line">addr.sin_port = htons(port);<span class="comment">//本地字节序-&gt;网络字节序(大小端转换)</span></span><br><span class="line"></span><br><span class="line">addr.sin_addr.S_un.S_addr = parseHost(ip);</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == connect(fd, (<span class="keyword">struct</span> sockaddr*)&amp;addr, <span class="keyword">sizeof</span>(addr)))</span><br><span class="line"><span class="keyword">return</span> SOCKET_ERROR;</span><br><span class="line"><span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ULONG <span class="title function_">parseHost</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* ip)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//检测host是不是点分十进制ip地址</span></span><br><span class="line"><span class="type">bool</span> isIp = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (*ip)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isalpha</span>(*ip))<span class="comment">//判断是否是字母，0不是</span></span><br><span class="line">&#123;</span><br><span class="line">isIp = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isIp)<span class="comment">//ip地址不是点分10进制</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">ent</span> =</span>gethostbyname(ip);<span class="comment">//根据域名获取对应的ip地址，返回的大端字节序的ip地址</span></span><br><span class="line"><span class="keyword">if</span> (ent)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *(ULONG*)ent-&gt;h_addr_list[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> inet_addr(ip);<span class="comment">//将点分10进制 ip地址的字符串转为uint32_t数字格式，小端机器上返回大端的字节序。</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">readline</span><span class="params">(SOCKET fd, <span class="type">char</span>* buf, <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">size_t</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> c=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> len = recv(fd, &amp;c, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">LOG1(<span class="string">&quot;服务器下线了&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">LOG1(<span class="string">&quot;下载失败:%d&quot;</span>, WSAGetLastError());</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//统计总共接收了多少个字节</span></span><br><span class="line">size += len;</span><br><span class="line"><span class="comment">//防止越界</span></span><br><span class="line"><span class="keyword">if</span> (size &gt;= len)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//*(buf++) = c;//这一句和下面两句作用一样</span></span><br><span class="line">*buf = c;</span><br><span class="line">buf++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否读取完成</span></span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">*(buf++) = c;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -C -计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C -计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>halcon</title>
      <link href="/2023/08/15/Halcon/halcon/"/>
      <url>/2023/08/15/Halcon/halcon/</url>
      
        <content type="html"><![CDATA[<p>halcon使用过程中，常用算子。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">rgb1_to_gray彩色图转灰度</span><br><span class="line">erosion腐蚀</span><br><span class="line">dilation膨胀</span><br><span class="line">gen_rectangle1生成掩膜</span><br><span class="line">closing闭操作</span><br><span class="line">connection将特征区域分割开</span><br><span class="line">reduce_domain 从原图上裁剪特征区域（图片实际大小不变，roi外区域黑色填充）</span><br><span class="line">crop_domain从原图上裁剪特征区域（只保留裁剪区域）</span><br><span class="line">fill_up填充区域</span><br><span class="line">union2将两个特征区域合并</span><br><span class="line">boundary区域边界</span><br><span class="line">gen_contour_region_xld将region转为xld</span><br><span class="line">get_contour_xld得到xld的所有点</span><br><span class="line">intensity得到区域内像素的均值以及方差</span><br><span class="line">min_max_gray得到区域内像素的最大最小值</span><br><span class="line">image_to_channels通道分离</span><br><span class="line">dev_get_window返回活动窗口的句柄</span><br><span class="line">draw_rectangle1在窗口上通过鼠标左键画roi，右键结束</span><br><span class="line">zoom_image_factor缩放图像</span><br></pre></td></tr></table></figure><p>halcon通过鼠标裁图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">read_image (Image4012, &#x27;D:/1工作/qtgd/标签/tesseract_opencv/tesseract_opencv/input/5/4042.jpg&#x27;)</span><br><span class="line">dev_get_window (WindowHandle)</span><br><span class="line">draw_rectangle1 (WindowHandle, Row1, Column1, Row2, Column2)</span><br><span class="line">gen_rectangle1 (Rectangle, Row1, Column1, Row2, Column2)</span><br><span class="line">reduce_domain (Image4012, Rectangle, ImageReduced)</span><br><span class="line">crop_domain (ImageReduced, ImagePart)</span><br><span class="line">zoom_image_factor (ImagePart, ImageZoomed, 5, 5, &#x27;constant&#x27;)</span><br><span class="line">rgb1_to_gray (ImageZoomed, GrayImage)</span><br><span class="line">write_image (GrayImage, &#x27;bmp&#x27;, 0, &#x27;D:/1工作/qtgd/标签/tesseract_opencv/tesseract_opencv/input/3/Temp1.bmp&#x27;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> -halcon -cv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/08/07/MFC/MFC_learn/"/>
      <url>/2023/08/07/MFC/MFC_learn/</url>
      
        <content type="html"><![CDATA[<p>B站黑马学习MFC！<a href="https://www.bilibili.com/video/BV1JW41147NX?p=4&spm_id_from=pageDriver&vd_source=aa67ec1c08f743d3564f0d6bd14952f0">学习链接</a></p><span id="more"></span><h2 id="MFC"><a href="#MFC" class="headerlink" title="MFC"></a>MFC</h2><h3 id="1-mfc初始化"><a href="#1-mfc初始化" class="headerlink" title="1.mfc初始化"></a>1.mfc初始化</h3><h4 id="1-初始化空项目"><a href="#1-初始化空项目" class="headerlink" title="1.初始化空项目"></a>1.初始化空项目</h4><p>新建项目-&gt;Windows桌面向导-&gt;创建-&gt;桌面应用程序exe，空项目!</p><h4 id="2-MFC帮助文档"><a href="#2-MFC帮助文档" class="headerlink" title="2.MFC帮助文档"></a>2.MFC帮助文档</h4><p>1.<a href="https://learn.microsoft.com/zh-cn/cpp/mfc/reference/mfc-classes?view=msvc-170&viewFallbackFrom=vs-2017">在线文档</a></p><p>2.<a href="https://www.microsoft.com/en-us/download/details.aspx?id=20955">下载离线文档</a>，解压，setup安装。</p><p>3.<a href="https://pan.baidu.com/s/1S1-DOKEsIRq-iBFDEO__yQ?pwd=ocg2">MFC中文手册</a></p><h4 id="3-winapi创建一个窗口"><a href="#3-winapi创建一个窗口" class="headerlink" title="3.winapi创建一个窗口"></a>3.winapi创建一个窗口</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//回调函数，窗口过程</span></span><br><span class="line"><span class="comment">// CALLBACK __stdcall 参数传递顺序，从右到左入栈，并在结束前清空</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WindowProc</span><span class="params">(HWND hwnd,<span class="comment">//消息所属的窗口句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">UINT uMsg,<span class="comment">//具体消息名称  WM_XXX消息名</span></span></span></span><br><span class="line"><span class="params"><span class="function">WPARAM wParam,<span class="comment">//键盘附加消息</span></span></span></span><br><span class="line"><span class="params"><span class="function">LPARAM lParam<span class="comment">//鼠标附加消息</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (uMsg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_CLOSE:</span><br><span class="line"><span class="comment">// 所有xxxxWindow函数不会走消息队列，而是直接执行，并向消息队列发送一个消息</span></span><br><span class="line"><span class="built_in">DestroyWindow</span>(hwnd);<span class="comment">//DestroyWindow 发送另一个消息 WM_DESTROY</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_DESTROY:</span><br><span class="line"><span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);<span class="comment">//使GetMessage(&amp;msg, NULL, 0, 0) = FALSE，结束循环取消息</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_LBUTTONDOWN:</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> xPos= <span class="built_in">LOWORD</span>(lParam);</span><br><span class="line"><span class="type">int</span> yPos = <span class="built_in">HIWORD</span>(lParam);</span><br><span class="line"><span class="type">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"><span class="built_in">wsprintf</span>(buf, <span class="built_in">TEXT</span>(<span class="string">&quot;鼠标左键X=%d,\ty=%d&quot;</span>), xPos, yPos);</span><br><span class="line"><span class="built_in">MessageBox</span>(hwnd, buf, <span class="built_in">TEXT</span>(<span class="string">&quot;tips&quot;</span>), MB_OK);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> WM_KEYDOWN:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(hwnd, <span class="built_in">TEXT</span>(<span class="string">&quot;键盘按下&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;tips&quot;</span>), MB_OK);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_RBUTTONDOWN:</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> xPos = <span class="built_in">LOWORD</span>(lParam);</span><br><span class="line"><span class="type">int</span> yPos = <span class="built_in">HIWORD</span>(lParam);</span><br><span class="line"><span class="built_in">MessageBox</span>(hwnd, <span class="built_in">TEXT</span>(<span class="string">&quot;右键按下&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;tips&quot;</span>), MB_OK);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_PAINT:</span><br><span class="line">&#123;</span><br><span class="line">PAINTSTRUCT ps;</span><br><span class="line">HDC hdc = <span class="built_in">BeginPaint</span>(hwnd, &amp;ps);</span><br><span class="line"><span class="built_in">TextOut</span>(hdc, <span class="number">100</span>, <span class="number">100</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;HELLO WORLD&quot;</span>), <span class="built_in">strlen</span>(<span class="string">&quot;HELLO WORLD&quot;</span>));</span><br><span class="line"><span class="built_in">EndPaint</span>(hwnd, &amp;ps);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值默认处理方式</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hwnd, uMsg, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WINAPI代表__stdcall，参数传递顺序，从右到左入栈，并在结束前清空</span></span><br><span class="line"><span class="comment">// 应用程序实例句柄，上一个应用程序实例句柄，char *argv[],显示方式 最大化 最小化</span></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span class="type">int</span> nShowCmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1.初始化窗口</span></span><br><span class="line">WNDCLASS wc;</span><br><span class="line">wc.cbClsExtra = <span class="number">0</span>;<span class="comment">//类的额外内存</span></span><br><span class="line">wc.cbWndExtra = <span class="number">0</span>;<span class="comment">//窗口的额外内存</span></span><br><span class="line">wc.hbrBackground = (HBRUSH)<span class="built_in">GetStockObject</span>(WHITE_BRUSH);<span class="comment">// 设置背景</span></span><br><span class="line">wc.hCursor = <span class="built_in">LoadCursor</span>(<span class="literal">NULL</span>, IDC_HAND);<span class="comment">//设置光标 如果第一个参数为null 代表使用系统光标(进游戏光标会变化)</span></span><br><span class="line">wc.hIcon = <span class="built_in">LoadIcon</span>(<span class="literal">NULL</span>, IDI_ERROR);<span class="comment">//图标 如果第一个参数为null 使用系统提供的图标</span></span><br><span class="line">wc.hInstance = hInstance;<span class="comment">//英勇程序实例句柄，传入winmain中的形参句柄</span></span><br><span class="line">wc.lpfnWndProc = WindowProc; <span class="comment">//回调函数，窗口过程</span></span><br><span class="line">wc.lpszClassName = <span class="built_in">TEXT</span>(<span class="string">&quot;WIN&quot;</span>);<span class="comment">//指定窗口类名称</span></span><br><span class="line">wc.lpszMenuName = <span class="literal">NULL</span>;<span class="comment">//菜单名称</span></span><br><span class="line">wc.style = <span class="number">0</span>;<span class="comment">//显示风格 0代表默认风格</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.注册窗口</span></span><br><span class="line"><span class="built_in">RegisterClass</span>(&amp;wc);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.创建窗口</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">_In_ DWORD dwExStyle,</span></span><br><span class="line"><span class="comment">_In_opt_ LPCSTR lpClassName,  类名</span></span><br><span class="line"><span class="comment">_In_opt_ LPCSTR lpWindowName, 标题名</span></span><br><span class="line"><span class="comment">_In_ DWORD dwStyle,风格 WS_OVERLAPPEDWINDOW</span></span><br><span class="line"><span class="comment">_In_ int X, 显示坐标，CW_USBDEFAULT</span></span><br><span class="line"><span class="comment">_In_ int Y,</span></span><br><span class="line"><span class="comment">_In_ int nWidth, 宽高</span></span><br><span class="line"><span class="comment">_In_ int nHeight,</span></span><br><span class="line"><span class="comment">_In_opt_ HWND hWndParent, 父窗口 null</span></span><br><span class="line"><span class="comment">_In_opt_ HMENU hMenu, 菜单 null</span></span><br><span class="line"><span class="comment">_In_opt_ HINSTANCE hInstance,实例句柄 hinstance</span></span><br><span class="line"><span class="comment">_In_opt_ LPVOID lpParam附加值 null</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">HWND hwnd = <span class="built_in">CreateWindow</span>(wc.lpszClassName, <span class="built_in">TEXT</span>(<span class="string">&quot;WINDOWS&quot;</span>), WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, <span class="literal">NULL</span>, <span class="literal">NULL</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//4.显示和更新</span></span><br><span class="line"><span class="built_in">ShowWindow</span>(hwnd, SW_SHOWNORMAL);</span><br><span class="line"><span class="built_in">UpdateWindow</span>(hwnd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.通过循环取消息</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">HWND        hwnd;主窗口句柄</span></span><br><span class="line"><span class="comment">UINT        message;具体消息名称</span></span><br><span class="line"><span class="comment">WPARAM      wParam;附加消息，键盘消息</span></span><br><span class="line"><span class="comment">LPARAM      lParam;附加消息，鼠标消息</span></span><br><span class="line"><span class="comment">DWORD       time;消息产生时间</span></span><br><span class="line"><span class="comment">POINT       pt;附加消息，鼠标点击坐标</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">MSG msg;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">_Out_ LPMSG lpMsg,消息</span></span><br><span class="line"><span class="comment">_In_opt_ HWND hWnd,捕获窗口，null捕获所有窗口</span></span><br><span class="line"><span class="comment">_In_ UINT wMsgFilterMin,过滤最大最小消息，一般0</span></span><br><span class="line"><span class="comment">_In_ UINT wMsgFilterMax);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">GetMessage</span>(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>) == FALSE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//翻译消息</span></span><br><span class="line"><span class="built_in">TranslateMessage</span>(&amp;msg);<span class="comment">// 对于组合键等 操作</span></span><br><span class="line"><span class="comment">//分发消息</span></span><br><span class="line"><span class="built_in">DispatchMessage</span>(&amp;msg);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-MFC创建窗口"><a href="#4-MFC创建窗口" class="headerlink" title="4.MFC创建窗口"></a>4.MFC创建窗口</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;afxwin.h&gt;</span><span class="comment">// mfc头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyApp</span>:<span class="keyword">public</span> CWinApp</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//程序入口</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> BOOL <span class="title">InitInstance</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 窗口框架</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFram</span>:<span class="keyword">public</span> CFrameWnd</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">MyFram</span>();</span><br><span class="line"><span class="comment">//声明宏，在这个类中使用消息映射</span></span><br><span class="line"><span class="built_in">DECLARE_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//相当于槽函数</span></span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnLButtonDown</span><span class="params">(UINT, CPoint)</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnChar</span><span class="params">(UINT, UINT, UINT)</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnPaint</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;mfc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">MyApp app;<span class="comment">// 全局应用程序对象，有且仅有一个</span></span><br><span class="line"><span class="function">BOOL <span class="title">MyApp::InitInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建窗口</span></span><br><span class="line">MyFram* frame = <span class="keyword">new</span> MyFram;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示和更新</span></span><br><span class="line">frame-&gt;<span class="built_in">ShowWindow</span>(SW_SHOWNORMAL);</span><br><span class="line">frame-&gt;<span class="built_in">UpdateWindow</span>();</span><br><span class="line"></span><br><span class="line">m_pMainWnd = frame;<span class="comment">//保存指向应用程序的主窗口的指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(MyFram,CFrameWnd)</span><br><span class="line"><span class="built_in">ON_WM_LBUTTONDOWN</span>()</span><br><span class="line"><span class="built_in">ON_WM_CHAR</span>()</span><br><span class="line"><span class="built_in">ON_WM_PAINT</span>()</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>(MyFram, CFrameWnd)</span><br><span class="line"><span class="comment">// 窗口框架</span></span><br><span class="line">MyFram::<span class="built_in">MyFram</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Create</span>(<span class="literal">NULL</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;MFC&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyFram::OnLButtonDown</span><span class="params">(UINT, CPoint point)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//TCHAR buf[1024];//  使用win str</span></span><br><span class="line"><span class="comment">//wsprintf(buf, TEXT(&quot;x=%d, y=%d&quot;), point.x, point.y);</span></span><br><span class="line"><span class="comment">//MessageBox(buf);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// mfc中的字符串，CString</span></span><br><span class="line">CString str;</span><br><span class="line">str.<span class="built_in">Format</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;x=%d , y=%d&quot;</span>), point.x, point.y);</span><br><span class="line"><span class="built_in">MessageBox</span>(str);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyFram::OnChar</span><span class="params">(UINT key, UINT, UINT)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CString str;</span><br><span class="line">str.<span class="built_in">Format</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;按下了%c 键&quot;</span>), key);</span><br><span class="line"><span class="built_in">MessageBox</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyFram::OnPaint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">CPaintDC <span class="title">dc</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">dc.<span class="built_in">TextOutW</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;helloworld&quot;</span>));</span><br><span class="line">dc.<span class="built_in">Ellipse</span>(<span class="number">150</span>, <span class="number">150</span>,  <span class="number">300</span>, <span class="number">200</span>);<span class="comment">// 通过矩形画内切椭圆</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-使用mfc向导"><a href="#5-使用mfc向导" class="headerlink" title="5.使用mfc向导"></a>5.使用mfc向导</h4><p><img src="1691477491432.png" alt="1691477491432"></p><p>对话类，窗体框架，应用程序类，文档类，显示类(所有显示在这里面添加)</p><h5 id="1-画图OnPaint"><a href="#1-画图OnPaint" class="headerlink" title="1.画图OnPaint"></a>1.画图OnPaint</h5><p>使用OnPaint，view自带画图函数OnDraw就不会显示了。</p><h5 id="2-窗口修改"><a href="#2-窗口修改" class="headerlink" title="2.窗口修改"></a>2.窗口修改</h5><p>cmainframe的precreatewindow函数。</p><p>afx为前缀的函数是全局函数。</p><p>调用Create产生 WM_CREATE消息，执行OnCreate：当应用程序通过调用成员函数Create或CreateEx请求创建Windows的窗口时，框架调用这个成员函数。CWnd对象在窗口被创建以后，但是在它变为可见之前接收到对这个函数的调用。OnCreate是在Create或CreateEx成员函数返回之前被调用的。</p><h5 id="3-修改标题和图标"><a href="#3-修改标题和图标" class="headerlink" title="3.修改标题和图标"></a>3.修改标题和图标</h5><p>在InitInstance()函数下，窗口显示的地方</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">m_pMainWnd-&gt;<span class="built_in">ShowWindow</span>(SW_SHOW);</span><br><span class="line">m_pMainWnd-&gt;<span class="built_in">UpdateWindow</span>();</span><br><span class="line">m_pMainWnd-&gt;<span class="built_in">SetWindowTextW</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;销售管理&quot;</span>));</span><br><span class="line">m_pMainWnd-&gt;<span class="built_in">SetIcon</span>(<span class="built_in">LoadIcon</span>(IDI_ICON1),TRUE);<span class="comment">// TURE32*32,FALSE 16*16</span></span><br></pre></td></tr></table></figure><h5 id="4-新建对话框"><a href="#4-新建对话框" class="headerlink" title="4.新建对话框"></a>4.新建对话框</h5><p>1.资源文件dialog下插入一个，然后添加控件，为显示控件添加变量，双击操作控件添加执行函数。</p><p>2.类clogdia-&gt;属性:消息WM_Close关闭函数，重写onok函数就是对话框按下回车执行的操作，oninitdialog重写控件初始化。</p><h5 id="5-拆分主窗口"><a href="#5-拆分主窗口" class="headerlink" title="5.拆分主窗口"></a>5.拆分主窗口</h5><p>1.生成需要显示的类，项目-&gt;添加新项-&gt;MFC类</p><p>2.主窗口框架中添加一个拆分类，CSplitterWnd m_spliter，然后重写OnCreateClient函数。</p><p>3.m_spliter.CreateStatic(this, 1, 2);<br>    m_spliter.CreateView(0, 0, RUNTIME_CLASS(CSelectView), CSize(200, 500), pContext);<br>    m_spliter.CreateView(0, 1, RUNTIME_CLASS(CDispalyView), CSize(600, 500), pContext);<br>    return TRUE;</p><p>将主界面拆分为一行两列，左边是CSelectView，右边CDispalyView</p><h5 id="6-树视图"><a href="#6-树视图" class="headerlink" title="6.树视图"></a>6.树视图</h5><p>1.视图头文件中声明CTreeCtrl* m_treeCtrl;&#x2F;&#x2F;树控件和CImageList m_imageList;&#x2F;&#x2F;图标列表</p><p>2.重写OnInitialUpdate函数，对图标列表和树控件初始化</p><p>3.编辑&#x3D;Tvn_Selchanged消息,及树控件  项点击函数。</p><h5 id="7-自定义消息，以及挂载"><a href="#7-自定义消息，以及挂载" class="headerlink" title="7.自定义消息，以及挂载"></a>7.自定义消息，以及挂载</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>定义消息宏</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NM_A (WM_USER+100)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NM_B (WM_USER+101)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NM_C (WM_USER+102)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NM_D (WM_USER+103)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NM_E (WM_USER+104)</span></span><br><span class="line"><span class="number">2.</span>添加到映射列表</span><br><span class="line"><span class="comment">//通过消息映射响应自定义消息，收到NM_A自定义消息时，执行后面的操作</span></span><br><span class="line"><span class="built_in">ON_MESSAGE</span>(NM_A, OnMyChange)</span><br><span class="line"><span class="built_in">ON_MESSAGE</span>(NM_B, OnMyChange)</span><br><span class="line"><span class="built_in">ON_MESSAGE</span>(NM_C, OnMyChange)</span><br><span class="line"><span class="built_in">ON_MESSAGE</span>(NM_D, OnMyChange)</span><br><span class="line"><span class="built_in">ON_MESSAGE</span>(NM_E, OnMyChange)</span><br><span class="line"><span class="number">3.</span>添加映射函数声明与实现</span><br><span class="line"><span class="function">afx_msg LRESULT <span class="title">OnMyChange</span><span class="params">(WPARAM Ipcs,LPARAM IParam)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT <span class="title">CMainFrame::OnMyChange</span><span class="params">(WPARAM Ipcs, LPARAM IParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CCreateContext Context;</span><br><span class="line"><span class="keyword">switch</span> (Ipcs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> NM_A:</span><br><span class="line"><span class="comment">//挂载界面</span></span><br><span class="line">&#123;</span><br><span class="line">Context.m_pNewViewClass = <span class="built_in">RUNTIME_CLASS</span>(CUserDlg);</span><br><span class="line">Context.m_pCurrentFrame = <span class="keyword">this</span>;</span><br><span class="line">Context.m_pLastView = (CFormView*)m_spliter.<span class="built_in">GetPane</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">m_spliter.<span class="built_in">DeleteView</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">m_spliter.<span class="built_in">CreateView</span>(<span class="number">0</span>, <span class="number">1</span>, Context.m_pNewViewClass, <span class="built_in">CSize</span>(<span class="number">600</span>, <span class="number">500</span>), &amp;Context);</span><br><span class="line">CUserDlg* pNewView = (CUserDlg*)m_spliter.<span class="built_in">GetPane</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">m_spliter.<span class="built_in">RecalcLayout</span>();</span><br><span class="line">pNewView-&gt;<span class="built_in">OnInitialUpdate</span>();</span><br><span class="line">m_spliter.<span class="built_in">SetActivePane</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">4.</span>发送消息</span><br><span class="line">::是使用winapi的postmessage，不使用mfc包装的postmessage</span><br><span class="line">::<span class="built_in">PostMessage</span>(<span class="built_in">AfxGetMainWnd</span>()-&gt;<span class="built_in">GetSafeHwnd</span>(), NM_A, (WPARAM)NM_A, (LPARAM)<span class="number">0</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-TEXT"><a href="#2-TEXT" class="headerlink" title="2.TEXT"></a>2.TEXT</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">多字节：ASCII码</span><br><span class="line">宽字节：Unicode GBK utf-8</span><br><span class="line">TEXT()// 将多字节转为宽字节 TEXT(&quot;aaa&quot;)=L&quot;aaa&quot;</span><br><span class="line">TEXT() // 转成程序所使用的字符集，自适应</span><br><span class="line">TCHAR 也有同样功能</span><br><span class="line"></span><br><span class="line">strlen统计多字节字符串长度</span><br><span class="line">wcslen统计宽字节字符串长度</span><br><span class="line"></span><br><span class="line">char* 转 MFC CString</span><br><span class="line">CString()</span><br><span class="line">CString 转 char*</span><br><span class="line">char*p=cstr.GetBuffer();</span><br><span class="line"></span><br><span class="line">LPWSTR https://blog.csdn.net/xwh012510/article/details/86235698</span><br></pre></td></tr></table></figure><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="1-创建多级目录"><a href="#1-创建多级目录" class="headerlink" title="1.创建多级目录"></a>1.创建多级目录</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建多级目录</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">PathIsDirectory</span>(path))<span class="comment">//路径是否存在</span></span><br><span class="line">&#123; </span><br><span class="line">CString str = _T(<span class="string">&quot;\\&quot;</span>);</span><br><span class="line"><span class="type">int</span> pos = path.<span class="built_in">Find</span>(str, <span class="number">4</span>);<span class="comment">//视情况而定</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">CString path1 = path.<span class="built_in">Left</span>(pos);</span><br><span class="line"><span class="built_in">CreateDirectory</span>(path1, <span class="literal">NULL</span>); <span class="comment">//只能创建一级目录</span></span><br><span class="line">pos = path.<span class="built_in">Find</span>(str, pos + <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (pos == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除旧文件，新建新文件</span></span><br><span class="line"><span class="type">bool</span> bFind = <span class="built_in">FileExist</span>(txtPath);</span><br><span class="line"><span class="keyword">if</span> (bFind)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">DeleteFile</span>(txtPath);</span><br><span class="line">&#125;</span><br><span class="line">CFile SNFile;</span><br><span class="line">SNFile.<span class="built_in">Open</span>(txtPath, CFile::modeCreate, <span class="literal">NULL</span>);</span><br><span class="line">SNFile.<span class="built_in">Close</span>();</span><br></pre></td></tr></table></figure><h3 id="2-写入txt"><a href="#2-写入txt" class="headerlink" title="2.写入txt"></a>2.写入txt</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CString txt;</span><br><span class="line">txt.format(_T(<span class="string">&quot;aaa%.2f&quot;</span>),<span class="number">0.555</span>);</span><br><span class="line">CFile SNFile;</span><br><span class="line">SNFile.Open(txtPath, CFile::modeCreate | CFile::modeWrite, <span class="literal">NULL</span>);<span class="comment">//新建 写入</span></span><br><span class="line">CStringA txtA = W2A(txt);</span><br><span class="line">SNFile.Write(txtA, txtA.GetLength());</span><br><span class="line">SNFile.Close();</span><br></pre></td></tr></table></figure><h3 id="3-删除非空文件夹"><a href="#3-删除非空文件夹" class="headerlink" title="3.删除非空文件夹"></a>3.删除非空文件夹</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CDlgMainParCamSet::myDeleteDirectory</span><span class="params">(CString directory_path)</span>   <span class="comment">//删除一个文件夹下的所有内容</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BOOL ret = TRUE;</span><br><span class="line">CFileFind finder;</span><br><span class="line">CString path;</span><br><span class="line">path.<span class="built_in">Format</span>(_T(<span class="string">&quot;%s/*.*&quot;</span>), directory_path);</span><br><span class="line">BOOL bWorking = finder.<span class="built_in">FindFile</span>(path);</span><br><span class="line"><span class="keyword">while</span> (bWorking)</span><br><span class="line">&#123;</span><br><span class="line">bWorking = finder.<span class="built_in">FindNextFile</span>();</span><br><span class="line"><span class="keyword">if</span> (finder.<span class="built_in">IsDirectory</span>() &amp;&amp; !finder.<span class="built_in">IsDots</span>())</span><br><span class="line">&#123;<span class="comment">//处理文件夹</span></span><br><span class="line"><span class="built_in">myDeleteDirectory</span>(finder.<span class="built_in">GetFilePath</span>()); <span class="comment">//递归删除文件夹</span></span><br><span class="line"><span class="built_in">RemoveDirectory</span>(finder.<span class="built_in">GetFilePath</span>());<span class="comment">//只能删除空的文件夹</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="comment">//处理文件</span></span><br><span class="line"><span class="built_in">DeleteFile</span>(finder.<span class="built_in">GetFilePath</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ret = <span class="built_in">RemoveDirectoryW</span>(directory_path);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h2><h3 id="1-控件大小"><a href="#1-控件大小" class="headerlink" title="1.控件大小"></a>1.控件大小</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x,y实际像素值，计算</span><br><span class="line">265 = x * (2/3)</span><br><span class="line">199 = y * (8/13)</span><br></pre></td></tr></table></figure><h3 id="2-Picture-Control"><a href="#2-Picture-Control" class="headerlink" title="2.Picture Control"></a>2.Picture Control</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.界面添加Picture Control控件</span></span><br><span class="line"><span class="comment">2.在界面类函数添加Picture Control显示函数</span></span><br><span class="line"><span class="comment">3.完善显示和调用显示函数即可(界面放大缩小后需要刷新才显示)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CDlgInspectInfoShow::ShowCode</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* buf, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//内存数据转换成流</span></span><br><span class="line">HGLOBAL hMem = <span class="built_in">GlobalAlloc</span>(GMEM_FIXED, len);</span><br><span class="line">BYTE* pMem = (BYTE*)<span class="built_in">GlobalLock</span>(hMem);</span><br><span class="line"><span class="built_in">memcpy</span>(pMem, buf, len);</span><br><span class="line">IStream* pStream;</span><br><span class="line">HRESULT hr = <span class="built_in">CreateStreamOnHGlobal</span>(pMem, FALSE, &amp;pStream);</span><br><span class="line"><span class="comment">//画图</span></span><br><span class="line">CImage img;</span><br><span class="line">img.<span class="built_in">Load</span>(pStream);</span><br><span class="line"></span><br><span class="line">CWnd* SW_code = <span class="keyword">this</span>-&gt;<span class="built_in">GetDlgItem</span>(IDC_SHOW_CODE);</span><br><span class="line">CDC* pDC = SW_code-&gt;<span class="built_in">GetDC</span>();</span><br><span class="line"></span><br><span class="line">img.<span class="built_in">Draw</span>(pDC-&gt;<span class="built_in">GetSafeHdc</span>(), <span class="number">0</span>, <span class="number">0</span>, <span class="number">286</span>, <span class="number">342</span>);<span class="comment">//设置显示大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//清理</span></span><br><span class="line">img.<span class="built_in">Destroy</span>();</span><br><span class="line">pStream-&gt;<span class="built_in">Release</span>();</span><br><span class="line"><span class="built_in">GlobalFree</span>(hMem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="错误记录"><a href="#错误记录" class="headerlink" title="错误记录"></a>错误记录</h2><h3 id="1-creatWindow函数"><a href="#1-creatWindow函数" class="headerlink" title="1.creatWindow函数"></a>1.creatWindow函数</h3><p>creatWindow函数处出现异常0xC0000005: 执行位置 0xCCCCCCCC 时发生访问冲突 。</p><p>WNDCLASS类的lpfnWndProc必须定义。</p><h3 id="2-出现CTreeView不是基类"><a href="#2-出现CTreeView不是基类" class="headerlink" title="2.出现CTreeView不是基类"></a>2.出现CTreeView不是基类</h3><p>加上头文件#include”afxcview.h”</p><h3 id="3-报错信息dlgdata-cpp-line-40"><a href="#3-报错信息dlgdata-cpp-line-40" class="headerlink" title="3.报错信息dlgdata.cpp line 40"></a>3.报错信息dlgdata.cpp line 40</h3><p>界面控件删了，相应代码没有删除。</p>]]></content>
      
      
      <categories>
          
          <category> -教程 -C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -MFC -C++ -WINDOWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>opencvtest</title>
      <link href="/2023/08/04/opencv/opencvtest/"/>
      <url>/2023/08/04/opencv/opencvtest/</url>
      
        <content type="html"><![CDATA[<p>opencv使用过程中，一些轮子。</p><span id="more"></span><h2 id="1-筛选最大特征区域"><a href="#1-筛选最大特征区域" class="headerlink" title="1.筛选最大特征区域"></a>1.筛选最大特征区域</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 连通性分析</span></span><br><span class="line">Mat label_matrix;</span><br><span class="line">   <span class="type">int</span> num_labels = <span class="built_in">connectedComponents</span>(src_d1, label_matrix);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 统计各个标签的像素数</span></span><br><span class="line">   <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">label_counts</span><span class="params">(num_labels, <span class="number">0</span>)</span></span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; label_matrix.rows; i++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; label_matrix.cols; j++)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="type">int</span> label = label_matrix.<span class="built_in">at</span>&lt;<span class="type">int</span>&gt;(i, j);</span><br><span class="line">           label_counts[label]++;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 找到最大像素数的标签</span></span><br><span class="line">   <span class="type">int</span> max_label = std::<span class="built_in">max_element</span>(label_counts.<span class="built_in">begin</span>() + <span class="number">1</span>, label_counts.<span class="built_in">end</span>()) - label_counts.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 创建最大区域的遮罩</span></span><br><span class="line">   Mat mask = (label_matrix == max_label);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 将遮罩与原始图像进行按位与操作</span></span><br><span class="line">   Mat result;</span><br><span class="line">   src_d1.<span class="built_in">copyTo</span>(result, mask);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pBuf1存的已经编码的图像二进制，nDataSize1对应pBuf1元素的字节大小</span></span><br><span class="line">vector&lt;<span class="type">unsigned</span> <span class="type">char</span>&gt;<span class="built_in">buffer</span>(pBuf1, pBuf1 + nDataSize1);</span><br><span class="line">cv::Mat src;</span><br><span class="line">src = cv::<span class="built_in">imdecode</span>(buffer, cv::IMREAD_ANYCOLOR);<span class="comment">//按照原编码方式读入到mat中</span></span><br><span class="line">cv::<span class="built_in">imwrite</span>(<span class="string">&quot;D:\\A_project\\Test\\Test\\Image2.jpg&quot;</span>, src);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -opencv -test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提问技巧</title>
      <link href="/2023/07/31/demo/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/07/31/demo/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>工作学习中像别人提问的小技巧！</p><span id="more"></span><h2 id="提问的艺术"><a href="#提问的艺术" class="headerlink" title="提问的艺术"></a>提问的艺术</h2><p>提问是一门艺术，高明的提问既能尊重他人的时间，又能让你获得需要的答案。</p><h3 id="步骤一：事先研究"><a href="#步骤一：事先研究" class="headerlink" title="步骤一：事先研究"></a>步骤一：事先研究</h3><p>在寻求他人帮助之前，你可以先自己尝试寻找解决方案。虽然不应该害怕向他人提问，但也应该尊重他人时间，确认自己实在无法解决之后，再去问别人。如果你养成了自己不研究，就去问别人的习惯，最终很可能会导致自己过度依赖他人，从而丧失培养自身搜索能力的机会。</p><p>当然，这里所说的先自己尝试解决，不是要你花数小时或者数天时间去研究问题，而是要给自己一个限定的研究时间，比如 30 分钟左右。具体的研究时间还要依据问题而定，太短或太长都不合适。</p><h3 id="步骤二：提供背景信息"><a href="#步骤二：提供背景信息" class="headerlink" title="步骤二：提供背景信息"></a>步骤二：提供背景信息</h3><p>当你决定要向他人提问后，你要尽可能多地向请教的人提供背景信息。</p><p>你可以对比一下同一问题的两种提问方式。第一种是：“我的遇到问题了，你能帮忙吗？”第二种是：“我在用什么模块什么功能的时候，报错显示 xxx误消息，我的代码如下：xxxxxxxxx，我做了这些尝试，都没能成功，你能帮我看看吗？你可以先看下我的代码和报错信息，也可以查看下我做的尝试。”</p><p>如果你采用的是第一种提问方式的话，你需要和对方进行长时间的反复交谈，以便于他把问题弄清楚，了解背景信息。如果你采用第二种提问方式，对方能迅速了解背景信息，快速给予帮助。</p><h3 id="步骤三：列出目前所做的尝试"><a href="#步骤三：列出目前所做的尝试" class="headerlink" title="步骤三：列出目前所做的尝试"></a>步骤三：列出目前所做的尝试</h3><p>除了提供背景信息外，你还需要告诉对方自己已经做了哪些尝试，帮对方省去一些重复尝试。这样可以让对方知道某些方法是行不通的，从而迅速排除掉该方法，把时间和精力投入到寻找其他有效方法上。</p><h3 id="步骤四：写下答案"><a href="#步骤四：写下答案" class="headerlink" title="步骤四：写下答案"></a>步骤四：写下答案</h3><p>当你得到答案后，一定要迅速把答案记下来，形成方法论。以后再遇到同一个问题的时候，也可以从中做下参考。</p><p>此外，你也可以把答案添加到公共文档里，因为很可能你并不是唯一一个遇到此问题的人，通过公开解决方案，你也可以在将来帮助团队中的其他人节省时间。</p><p>以上就是有效提问的四个步骤，希望你能在提问的时候做到既尊重他人的时间，又能获得自己需要的答案。</p><h2 id="专机软件"><a href="#专机软件" class="headerlink" title="专机软件"></a>专机软件</h2><p>1.异常判断(使用必要变量前，进行异常判断)</p><p>2.日志，每一步流程输出日志，必要是统计执行时间。</p><p>3.功能独立(少嵌套 耦合)，流程逻辑简单清晰。函数不要过多封装，注释明了。</p><p>4.各种情况考虑到位。</p><p>5.条件变量，定义 初始状态 使用 复位。</p><ol start="6"><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> -工作学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -技巧 -提问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>py_opencv</title>
      <link href="/2023/07/27/python/py_opencv/"/>
      <url>/2023/07/27/python/py_opencv/</url>
      
        <content type="html"><![CDATA[<p>py_optncv测试示例。</p><span id="more"></span><h2 id="1-图像处理"><a href="#1-图像处理" class="headerlink" title="1.图像处理"></a>1.图像处理</h2><h3 id="1-线性变换"><a href="#1-线性变换" class="headerlink" title="1.线性变换"></a>1.线性变换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Linear</span>(<span class="params">img, a, b</span>):</span><br><span class="line">    img = <span class="built_in">float</span>(a)*img + b</span><br><span class="line">    img[img&gt;<span class="number">255</span>] = <span class="number">255</span> <span class="comment"># 0-255，取整</span></span><br><span class="line">    img[img &lt; <span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    img = np.<span class="built_in">round</span>(img)</span><br><span class="line">    img=img.astype(np.uint8)<span class="comment"># 使用uint8</span></span><br><span class="line">    <span class="keyword">return</span> img</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -py_opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yolov5_6.1训练工具</title>
      <link href="/2023/07/20/python/yolo%E8%AE%AD%E7%BB%83%E5%B7%A5%E5%85%B7/"/>
      <url>/2023/07/20/python/yolo%E8%AE%AD%E7%BB%83%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>使用python3.7，pyqt。yolov5-6.1,写的训练工具！</p><span id="more"></span><h2 id="conda导出的虚拟环境"><a href="#conda导出的虚拟环境" class="headerlink" title="conda导出的虚拟环境"></a>conda导出的虚拟环境</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">name: yolo</span><br><span class="line">channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">  - defaults</span><br><span class="line">dependencies:</span><br><span class="line">  - blas=1.0=mkl</span><br><span class="line">  - brotli=1.0.9=h2bbff1b_7</span><br><span class="line">  - brotli-bin=1.0.9=h2bbff1b_7</span><br><span class="line">  - ca-certificates=2023.01.10=haa95532_0</span><br><span class="line">  - certifi=2022.12.7=py37haa95532_0</span><br><span class="line">  - cycler=0.11.0=pyhd3eb1b0_0</span><br><span class="line">  - flit-core=3.6.0=pyhd3eb1b0_0</span><br><span class="line">  - fonttools=4.25.0=pyhd3eb1b0_0</span><br><span class="line">  - freetype=2.12.1=ha860e81_0</span><br><span class="line">  - giflib=5.2.1=h8cc25b3_3</span><br><span class="line">  - glib=2.69.1=h5dc1a3c_2</span><br><span class="line">  - gst-plugins-base=1.18.5=h9e645db_0</span><br><span class="line">  - gstreamer=1.18.5=hd78058f_0</span><br><span class="line">  - icu=58.2=ha925a31_3</span><br><span class="line">  - intel-openmp=2021.4.0=haa95532_3556</span><br><span class="line">  - jpeg=9e=h2bbff1b_1</span><br><span class="line">  - kiwisolver=1.4.4=py37hd77b12b_0</span><br><span class="line">  - krb5=1.19.4=h5b6d351_0</span><br><span class="line">  - lerc=3.0=hd77b12b_0</span><br><span class="line">  - libbrotlicommon=1.0.9=h2bbff1b_7</span><br><span class="line">  - libbrotlidec=1.0.9=h2bbff1b_7</span><br><span class="line">  - libbrotlienc=1.0.9=h2bbff1b_7</span><br><span class="line">  - libclang=14.0.6=default_hb5a9fac_1</span><br><span class="line">  - libclang13=14.0.6=default_h8e68704_1</span><br><span class="line">  - libdeflate=1.17=h2bbff1b_0</span><br><span class="line">  - libffi=3.4.4=hd77b12b_0</span><br><span class="line">  - libiconv=1.16=h2bbff1b_2</span><br><span class="line">  - libogg=1.3.5=h2bbff1b_1</span><br><span class="line">  - libpng=1.6.39=h8cc25b3_0</span><br><span class="line">  - libtiff=4.5.0=h6c2663c_2</span><br><span class="line">  - libvorbis=1.3.7=he774522_0</span><br><span class="line">  - libwebp=1.2.4=hbc33d0d_1</span><br><span class="line">  - libwebp-base=1.2.4=h2bbff1b_1</span><br><span class="line">  - libxml2=2.10.3=h0ad7f3c_0</span><br><span class="line">  - libxslt=1.1.37=h2bbff1b_0</span><br><span class="line">  - lz4-c=1.9.4=h2bbff1b_0</span><br><span class="line">  - matplotlib=3.5.3=py37haa95532_0</span><br><span class="line">  - matplotlib-base=3.5.3=py37hd77b12b_0</span><br><span class="line">  - mkl=2021.4.0=haa95532_640</span><br><span class="line">  - mkl-service=2.4.0=py37h2bbff1b_0</span><br><span class="line">  - mkl_fft=1.3.1=py37h277e83a_0</span><br><span class="line">  - mkl_random=1.2.2=py37hf11a4ad_0</span><br><span class="line">  - munkres=1.1.4=py_0</span><br><span class="line">  - numpy=1.21.5=py37h7a0a035_3</span><br><span class="line">  - numpy-base=1.21.5=py37hca35cd5_3</span><br><span class="line">  - openssl=1.1.1t=h2bbff1b_0</span><br><span class="line">  - packaging=22.0=py37haa95532_0</span><br><span class="line">  - pcre=8.45=hd77b12b_0</span><br><span class="line">  - pillow=9.4.0=py37hd77b12b_0</span><br><span class="line">  - pip=22.3.1=py37haa95532_0</span><br><span class="line">  - ply=3.11=py37_0</span><br><span class="line">  - pyparsing=3.0.9=py37haa95532_0</span><br><span class="line">  - pyqt5-sip=12.11.0=py37hd77b12b_0</span><br><span class="line">  - python=3.7.16=h6244533_0</span><br><span class="line">  - python-dateutil=2.8.2=pyhd3eb1b0_0</span><br><span class="line">  - qt-main=5.15.2=he8e5bd7_8</span><br><span class="line">  - qt-webengine=5.15.9=hb9a9bb5_5</span><br><span class="line">  - qtwebkit=5.212=h2bbfb41_5</span><br><span class="line">  - setuptools=65.6.3=py37haa95532_0</span><br><span class="line">  - sip=6.6.2=py37hd77b12b_0</span><br><span class="line">  - six=1.16.0=pyhd3eb1b0_1</span><br><span class="line">  - sqlite=3.41.2=h2bbff1b_0</span><br><span class="line">  - tk=8.6.12=h2bbff1b_0</span><br><span class="line">  - toml=0.10.2=pyhd3eb1b0_0</span><br><span class="line">  - tornado=6.2=py37h2bbff1b_0</span><br><span class="line">  - typing_extensions=4.4.0=py37haa95532_0</span><br><span class="line">  - vc=14.2=h21ff451_1</span><br><span class="line">  - vs2015_runtime=14.27.29016=h5e58377_2</span><br><span class="line">  - wheel=0.38.4=py37haa95532_0</span><br><span class="line">  - wincertstore=0.2=py37haa95532_2</span><br><span class="line">  - xz=5.4.2=h8cc25b3_0</span><br><span class="line">  - zlib=1.2.13=h8cc25b3_0</span><br><span class="line">  - zstd=1.5.5=hd43e919_0</span><br><span class="line">  - pip:</span><br><span class="line">    - absl-py==1.4.0</span><br><span class="line">    - altgraph==0.17.3</span><br><span class="line">    - appdirs==1.4.4</span><br><span class="line">    - cachetools==5.3.0</span><br><span class="line">    - charset-normalizer==3.1.0</span><br><span class="line">    - click==8.1.3</span><br><span class="line">    - colorama==0.4.6</span><br><span class="line">    - docker-pycreds==0.4.0</span><br><span class="line">    - docopt==0.6.2</span><br><span class="line">    - gitdb==4.0.10</span><br><span class="line">    - gitpython==3.1.31</span><br><span class="line">    - google-auth==2.18.0</span><br><span class="line">    - google-auth-oauthlib==0.4.6</span><br><span class="line">    - grpcio==1.54.0</span><br><span class="line">    - idna==3.4</span><br><span class="line">    - importlib-metadata==6.6.0</span><br><span class="line">    - markdown==3.4.3</span><br><span class="line">    - markupsafe==2.1.2</span><br><span class="line">    - oauthlib==3.2.2</span><br><span class="line">    - onnx==1.14.0</span><br><span class="line">    - opencv-python==4.7.0.72</span><br><span class="line">    - pandas==1.3.5</span><br><span class="line">    - pathtools==0.1.2</span><br><span class="line">    - pefile==2023.2.7</span><br><span class="line">    - pipreqs==0.4.13</span><br><span class="line">    - protobuf==3.20.3</span><br><span class="line">    - psutil==5.9.5</span><br><span class="line">    - pyasn1==0.5.0</span><br><span class="line">    - pyasn1-modules==0.3.0</span><br><span class="line">    - pyinstaller==5.10.1</span><br><span class="line">    - pyinstaller-hooks-contrib==2023.3</span><br><span class="line">    - pyqt5==5.15.9</span><br><span class="line">    - pyqt5-plugins==5.15.9.2.3</span><br><span class="line">    - pyqt5-qt5==5.15.2</span><br><span class="line">    - pyqt5-tools==5.15.9.3.3</span><br><span class="line">    - pyqtchart==5.15.6</span><br><span class="line">    - pyqtchart-qt5==5.15.2</span><br><span class="line">    - python-dotenv==0.21.1</span><br><span class="line">    - pytz==2023.3</span><br><span class="line">    - pywin32-ctypes==0.2.0</span><br><span class="line">    - pyyaml==6.0</span><br><span class="line">    - qt5-applications==5.15.2.2.3</span><br><span class="line">    - qt5-tools==5.15.2.1.3</span><br><span class="line">    - requests==2.30.0</span><br><span class="line">    - requests-oauthlib==1.3.1</span><br><span class="line">    - rsa==4.9</span><br><span class="line">    - ruamel-yaml==0.17.26</span><br><span class="line">    - ruamel-yaml-clib==0.2.7</span><br><span class="line">    - scipy==1.7.3</span><br><span class="line">    - seaborn==0.12.2</span><br><span class="line">    - sentry-sdk==1.22.2</span><br><span class="line">    - setproctitle==1.3.2</span><br><span class="line">    - smmap==5.0.0</span><br><span class="line">    - tensorboard==2.11.2</span><br><span class="line">    - tensorboard-data-server==0.6.1</span><br><span class="line">    - tensorboard-plugin-wit==1.8.1</span><br><span class="line">    - torch==1.9.0+cu111</span><br><span class="line">    - torchaudio==0.9.0</span><br><span class="line">    - torchvision==0.10.0+cu111</span><br><span class="line">    - tqdm==4.65.0</span><br><span class="line">    - urllib3==1.26.15</span><br><span class="line">    - wandb==0.15.2</span><br><span class="line">    - werkzeug==2.2.3</span><br><span class="line">    - yarg==0.1.9</span><br><span class="line">    - you-get==0.4.1650</span><br><span class="line">    - zipp==3.15.0</span><br><span class="line">prefix: D:\anaconda\envs\yolo</span><br></pre></td></tr></table></figure><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><p>首先生成对应的exe，然后将本代码生成exe放到train.exe同级目录下。</p><p>train.exe等是通过pyinstaller打包后生成的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ruamel.yaml</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt, QMargins, pyqtSignal</span><br><span class="line"><span class="keyword">from</span> ruamel.yaml.scalarstring <span class="keyword">import</span> SingleQuotedScalarString <span class="keyword">as</span> dq</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QFont, QPainter, QIcon</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QLabel, QLineEdit, QPushButton, QComboBox, QFileDialog, QMessageBox, QApplication, \</span><br><span class="line">    QDoubleSpinBox, QGridLayout</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtChart <span class="keyword">import</span> QSplineSeries, QChart, QChartView, QValueAxis</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">main_widget</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line"><span class="comment"># 信号的初始化必须在__init__前，self.signal_finish.connect(self.train_finish)才不会报错</span></span><br><span class="line">    signal_finish=pyqtSignal(<span class="built_in">bool</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.p = <span class="literal">None</span></span><br><span class="line">        self.font = QFont()</span><br><span class="line">        self.font.setPointSize(<span class="number">18</span>)</span><br><span class="line">        self.font.setFamily(<span class="string">&#x27;KaiTi&#x27;</span>)</span><br><span class="line">        self.font.setBold(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        self.initUI_Qchart()</span><br><span class="line">        self.initUI_label()</span><br><span class="line">        self.initUI_train()</span><br><span class="line">        self.initUI_test()</span><br><span class="line">        self.initUI_change()</span><br><span class="line">        self.train_state = <span class="literal">False</span></span><br><span class="line">        self.show_state = <span class="literal">False</span></span><br><span class="line">        self.lastmtime = <span class="number">0.0</span></span><br><span class="line">        self.signal_finish.connect(self.train_finish)<span class="comment"># 链接信号槽函数</span></span><br><span class="line"></span><br><span class="line">        self.resize(<span class="number">800</span>, <span class="number">500</span>)</span><br><span class="line">        self.setWindowIcon(QIcon(<span class="string">&#x27;style/icon/main_config.png&#x27;</span>))</span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;YOLOv5-6.1训练工具&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 样式表</span></span><br><span class="line">        style_file = <span class="string">&quot;./style/flatgray.css&quot;</span></span><br><span class="line">        <span class="comment"># 2、读取样式文件内容</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(style_file, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            <span class="comment"># 3、加载读取的样式内容</span></span><br><span class="line">            self.style_sheet = file.read()</span><br><span class="line">            <span class="comment"># 4、完成设置</span></span><br><span class="line">            self.setStyleSheet(self.style_sheet)</span><br><span class="line">            self.style = self.style_sheet</span><br><span class="line"><span class="comment"># 采用网格布局</span></span><br><span class="line">        self.main_layout = QGridLayout(self)</span><br><span class="line">        self.main_layout.setSpacing(<span class="number">2</span>)<span class="comment"># 控件间距2</span></span><br><span class="line">        <span class="comment"># 标注布局       行 列 占多少行 占多少列</span></span><br><span class="line">        self.main_layout.addWidget(self.label_img, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)</span><br><span class="line">        self.main_layout.addWidget(self.labelimg, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        self.main_layout.addWidget(self.line_edit, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        self.main_layout.addWidget(self.btn_label, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        self.main_layout.addWidget(self.classname, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">        self.main_layout.addWidget(self.combobox_label, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">        self.main_layout.addWidget(self.btn_edit_label, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        self.main_layout.addWidget(self.btn_create_txt, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 训练布局</span></span><br><span class="line">        self.main_layout.addWidget(self.train_label, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)</span><br><span class="line">        self.main_layout.addWidget(self.trainimg_label, <span class="number">5</span>, <span class="number">0</span>)</span><br><span class="line">        self.main_layout.addWidget(self.train_img_path, <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">        self.main_layout.addWidget(self.trainimg_select, <span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line">        self.main_layout.addWidget(self.valimg_label, <span class="number">6</span>, <span class="number">0</span>)</span><br><span class="line">        self.main_layout.addWidget(self.val_img_path, <span class="number">6</span>, <span class="number">1</span>)</span><br><span class="line">        self.main_layout.addWidget(self.valimg_select, <span class="number">6</span>, <span class="number">2</span>)</span><br><span class="line">        self.main_layout.addWidget(self.traincfg_btn, <span class="number">7</span>, <span class="number">1</span>)</span><br><span class="line">        self.main_layout.addWidget(self.train_btn, <span class="number">7</span>, <span class="number">2</span>)</span><br><span class="line">        self.main_layout.addWidget(self.trainshow_btn, <span class="number">8</span>, <span class="number">1</span>)</span><br><span class="line">        self.main_layout.addWidget(self.shutdown_train_btn, <span class="number">8</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 测试</span></span><br><span class="line">        self.main_layout.addWidget(self.test_label, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)</span><br><span class="line">        self.main_layout.addWidget(self.testpt_label, <span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line">        self.main_layout.addWidget(self.test_pt_p, <span class="number">10</span>, <span class="number">1</span>)</span><br><span class="line">        self.main_layout.addWidget(self.test_pt_p_btn, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">        self.main_layout.addWidget(self.test_img_p, <span class="number">11</span>, <span class="number">1</span>)</span><br><span class="line">        self.main_layout.addWidget(self.many_img_tese, <span class="number">11</span>, <span class="number">0</span>)</span><br><span class="line">        self.main_layout.addWidget(self.test_img_p_btn, <span class="number">11</span>, <span class="number">2</span>)</span><br><span class="line">        self.main_layout.addWidget(self.test_label_spc, <span class="number">12</span>, <span class="number">0</span>)</span><br><span class="line">        self.main_layout.addWidget(self.test_spinbox, <span class="number">12</span>, <span class="number">1</span>)</span><br><span class="line">        self.main_layout.addWidget(self.test_btn, <span class="number">12</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        self.main_layout.addWidget(self.change_label, <span class="number">13</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)</span><br><span class="line">        self.main_layout.addWidget(self.changept_label, <span class="number">14</span>, <span class="number">0</span>)</span><br><span class="line">        self.main_layout.addWidget(self.change_pt_path, <span class="number">14</span>, <span class="number">1</span>)</span><br><span class="line">        self.main_layout.addWidget(self.change_pt_btn, <span class="number">14</span>, <span class="number">2</span>)</span><br><span class="line">        self.main_layout.addWidget(self.change_result_label, <span class="number">15</span>, <span class="number">0</span>)</span><br><span class="line">        self.main_layout.addWidget(self.change_format_select, <span class="number">15</span>, <span class="number">1</span>)</span><br><span class="line">        self.main_layout.addWidget(self.strat_change, <span class="number">15</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        self.main_layout.addWidget(self.chartView, <span class="number">0</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">10</span>)</span><br><span class="line">        self.main_layout.addWidget(self.epoch_label, <span class="number">15</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        self.main_layout.addWidget(self.loss_label, <span class="number">15</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># loss图</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI_Qchart</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># Qchart使用流程 初始化-&gt;添加数据点-&gt;添加轴-&gt;添加显示</span></span><br><span class="line">        self.chart = QChart()</span><br><span class="line">        <span class="comment"># 设置外围位置，具体百度</span></span><br><span class="line">        self.chart.setMargins(QMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="comment"># 隐藏图例</span></span><br><span class="line">        self.chart.legend().hide()</span><br><span class="line">        <span class="comment"># 数据点</span></span><br><span class="line">        self.spline = QSplineSeries()</span><br><span class="line">        <span class="comment"># 添加到图中，后续只需往spline中写入点就可以直接动态显示 spline.append(x,y)</span></span><br><span class="line">        self.chart.addSeries(self.spline)</span><br><span class="line">        <span class="comment"># 坐标轴</span></span><br><span class="line">        self.axis_x = QValueAxis()</span><br><span class="line">        self.axis_x.setLabelFormat(<span class="string">&quot;%d&quot;</span>)</span><br><span class="line">        self.chart.addAxis(self.axis_x, Qt.AlignBottom)</span><br><span class="line">        self.axis_x.setRange(<span class="number">0</span>, <span class="number">300</span>)</span><br><span class="line">        self.axis_x.setGridLineVisible(<span class="literal">True</span>)</span><br><span class="line">        self.axis_x.setMinorTickCount(<span class="number">5</span>)</span><br><span class="line">        axis_y = QValueAxis()</span><br><span class="line">        axis_y.setLabelFormat(<span class="string">&quot;%.5f&quot;</span>)</span><br><span class="line">        self.chart.addAxis(axis_y, Qt.AlignLeft)</span><br><span class="line">        axis_y.setRange(<span class="number">0</span>, <span class="number">0.12</span>)</span><br><span class="line">        axis_y.setGridLineVisible(<span class="literal">True</span>)</span><br><span class="line">        axis_y.setMinorTickCount(<span class="number">5</span>)</span><br><span class="line">        <span class="comment"># 添加坐标轴</span></span><br><span class="line">        self.spline.attachAxis(axis_y)</span><br><span class="line">        self.spline.attachAxis(self.axis_x)</span><br><span class="line">        <span class="comment"># 显示</span></span><br><span class="line">        self.chartView = QChartView()</span><br><span class="line">        self.chartView.setChart(self.chart)</span><br><span class="line">        self.chartView.setRenderHint(QPainter.Antialiasing)  <span class="comment"># 设置反走样，平滑</span></span><br><span class="line"></span><br><span class="line">        self.epoch_label = QLabel(<span class="string">&#x27;epoch:0&#x27;</span>, self)</span><br><span class="line">        self.loss_label = QLabel(<span class="string">&#x27;loss:0.0000&#x27;</span>, self)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 标注</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI_label</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 标注标签</span></span><br><span class="line">        self.label_img = QLabel(<span class="string">&#x27;标注&#x27;</span>, self)</span><br><span class="line">        self.label_img.setFont(self.font)</span><br><span class="line">        <span class="comment"># 路径显示</span></span><br><span class="line">        self.line_edit = QLineEdit(self)</span><br><span class="line">        <span class="comment"># 路径选择</span></span><br><span class="line">        self.labelimg = QLabel(<span class="string">&#x27;标注文件：&#x27;</span>, self)</span><br><span class="line">        self.btn_label = QPushButton(<span class="string">&#x27;选择图像文件&#x27;</span>, self)</span><br><span class="line">        self.btn_label.clicked.connect(self.label_img_path_select)</span><br><span class="line">        <span class="comment"># 类别选择</span></span><br><span class="line">        <span class="comment"># 设置下拉列表与classes.txt对应</span></span><br><span class="line">        self.classname = QLabel(<span class="string">&#x27;类别信息：&#x27;</span>, self)</span><br><span class="line">        self.combobox_label = QComboBox(self)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(os.path.join(os.getcwd(), <span class="string">&#x27;config\\classes.txt&#x27;</span>)):</span><br><span class="line">            QMessageBox.information(self, <span class="string">&quot;error&quot;</span>, <span class="string">&#x27;config/classes.txt文件不存在！&#x27;</span>)</span><br><span class="line">            exit()</span><br><span class="line">        classes_txt = read_classes()</span><br><span class="line">        <span class="keyword">for</span> class_label <span class="keyword">in</span> classes_txt:</span><br><span class="line">            self.combobox_label.addItem(class_label, classes_txt.index(class_label))</span><br><span class="line">        <span class="comment"># self.combobox_label.currentIndex() 获取当前label的index</span></span><br><span class="line"></span><br><span class="line">        self.btn_create_txt = QPushButton(<span class="string">&#x27;生成标注文件&#x27;</span>, self)</span><br><span class="line">        self.btn_create_txt.clicked.connect(self.create_txt_label)</span><br><span class="line"></span><br><span class="line">        self.btn_edit_label = QPushButton(<span class="string">&#x27;修改类别信息&#x27;</span>, self)</span><br><span class="line">        self.btn_edit_label.clicked.connect(self.edit_label)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI_train</span>(<span class="params">self</span>):</span><br><span class="line">        self.train_label = QLabel(<span class="string">&#x27;训练&#x27;</span>, self)</span><br><span class="line">        self.train_label.setFont(self.font)</span><br><span class="line"></span><br><span class="line">        self.train_img_path = QLineEdit(self)</span><br><span class="line"></span><br><span class="line">        self.trainimg_label = QLabel(<span class="string">&#x27;训练图像：&#x27;</span>, self)</span><br><span class="line">        self.trainimg_select = QPushButton(<span class="string">&#x27;选择训练图像&#x27;</span>, self)</span><br><span class="line">        self.trainimg_select.clicked.connect(self.trainimg_path_select)</span><br><span class="line"></span><br><span class="line">        self.val_img_path = QLineEdit(self)</span><br><span class="line"></span><br><span class="line">        self.valimg_label = QLabel(<span class="string">&#x27;验证图像：&#x27;</span>, self)</span><br><span class="line">        self.valimg_select = QPushButton(<span class="string">&#x27;选择验证图像&#x27;</span>, self)</span><br><span class="line">        self.valimg_select.clicked.connect(self.valimg_path_select)</span><br><span class="line"></span><br><span class="line">        self.traincfg_btn = QPushButton(<span class="string">&#x27;训练配置信息&#x27;</span>, self)</span><br><span class="line">        self.traincfg_btn.clicked.connect(self.edit_config)</span><br><span class="line"></span><br><span class="line">        self.train_btn = QPushButton(<span class="string">&#x27;训练&#x27;</span>, self)</span><br><span class="line">        self.train_btn.clicked.connect(self.edit_data_yaml)</span><br><span class="line"></span><br><span class="line">        self.trainshow_btn = QPushButton(<span class="string">&#x27;可视化&#x27;</span>, self)</span><br><span class="line">        self.trainshow_btn.clicked.connect(self.showtrain)</span><br><span class="line"></span><br><span class="line">        self.shutdown_train_btn = QPushButton(<span class="string">&#x27;结束训练&#x27;</span>, self)</span><br><span class="line">        self.shutdown_train_btn.clicked.connect(self.shutdown_train)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI_test</span>(<span class="params">self</span>):</span><br><span class="line">        self.test_label = QLabel(<span class="string">&#x27;测试&#x27;</span>, self)</span><br><span class="line">        self.test_label.setFont(self.font)</span><br><span class="line"></span><br><span class="line">        self.test_pt_p = QLineEdit(self)</span><br><span class="line"></span><br><span class="line">        self.testpt_label = QLabel(<span class="string">&#x27;模型路径：&#x27;</span>, self)</span><br><span class="line">        self.test_pt_p_btn = QPushButton(<span class="string">&#x27;选择模型路径&#x27;</span>, self)</span><br><span class="line">        self.test_pt_p_btn.clicked.connect(self.weight_path_select)</span><br><span class="line"></span><br><span class="line">        self.test_img_p = QLineEdit(self)</span><br><span class="line">        self.many_img_tese = QLabel(<span class="string">&#x27;测试路径：&#x27;</span>, self)</span><br><span class="line">        self.test_img_p_btn = QPushButton(<span class="string">&#x27;选择图像路径&#x27;</span>, self)</span><br><span class="line">        self.test_img_p_btn.clicked.connect(self.test_manyimg_path_select)</span><br><span class="line"></span><br><span class="line">        self.test_label_spc = QLabel(<span class="string">&#x27;置信度：&#x27;</span>, self)</span><br><span class="line"></span><br><span class="line">        self.test_spinbox = QDoubleSpinBox(self)</span><br><span class="line">        self.test_spinbox.setValue(<span class="number">0.80</span>)</span><br><span class="line">        self.test_spinbox.setSingleStep(<span class="number">0.05</span>)</span><br><span class="line">        self.test_spinbox.setMinimum(<span class="number">0.05</span>)</span><br><span class="line">        self.test_spinbox.setMaximum(<span class="number">0.95</span>)</span><br><span class="line"></span><br><span class="line">        self.test_btn = QPushButton(<span class="string">&#x27;测试&#x27;</span>, self)</span><br><span class="line">        self.test_btn.clicked.connect(self.test_start)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模型转换</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI_change</span>(<span class="params">self</span>):</span><br><span class="line">        self.change_label = QLabel(<span class="string">&#x27;转换&#x27;</span>, self)</span><br><span class="line">        self.change_label.setFont(self.font)</span><br><span class="line"></span><br><span class="line">        self.change_pt_path = QLineEdit(self)</span><br><span class="line"></span><br><span class="line">        self.changept_label = QLabel(<span class="string">&#x27;模型路径：&#x27;</span>, self)</span><br><span class="line">        self.change_pt_btn = QPushButton(<span class="string">&#x27;选择模型&#x27;</span>, self)</span><br><span class="line">        self.change_pt_btn.clicked.connect(self.change_pt_select)</span><br><span class="line"></span><br><span class="line">        self.change_result_label = QLabel(<span class="string">&#x27;目标格式：&#x27;</span>, self)</span><br><span class="line"></span><br><span class="line">        self.change_format_select = QComboBox(self)</span><br><span class="line">        self.change_format_select.addItem(<span class="string">&#x27;onnx&#x27;</span>)</span><br><span class="line">        self.change_format_select.addItem(<span class="string">&#x27;torchscript&#x27;</span>)</span><br><span class="line">        self.change_format_select.addItem(<span class="string">&#x27;openvino&#x27;</span>)</span><br><span class="line">        self.change_format_select.addItem(<span class="string">&#x27;engine&#x27;</span>)</span><br><span class="line">        self.change_format_select.addItem(<span class="string">&#x27;coreml&#x27;</span>)</span><br><span class="line">        self.change_format_select.addItem(<span class="string">&#x27;saved_model&#x27;</span>)</span><br><span class="line">        self.change_format_select.addItem(<span class="string">&#x27;pb&#x27;</span>)</span><br><span class="line">        self.change_format_select.addItem(<span class="string">&#x27;tflite&#x27;</span>)</span><br><span class="line">        self.change_format_select.addItem(<span class="string">&#x27;edgetpu&#x27;</span>)</span><br><span class="line">        self.change_format_select.addItem(<span class="string">&#x27;tfjs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.strat_change = QPushButton(<span class="string">&#x27;转换&#x27;</span>, self)</span><br><span class="line">        self.strat_change.clicked.connect(self.start_Change)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择代标注文件夹</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">label_img_path_select</span>(<span class="params">self</span>):</span><br><span class="line">        label_img_path = QFileDialog.getExistingDirectory(self, <span class="string">&quot;选择文件夹&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> label_img_path == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.line_edit.setText(label_img_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成标注文件txt</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_txt_label</span>(<span class="params">self</span>):</span><br><span class="line">        label_img_path = self.line_edit.text()</span><br><span class="line">        label_index = self.combobox_label.currentIndex()</span><br><span class="line">        <span class="keyword">if</span> label_img_path == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            QMessageBox.information(self, <span class="string">&quot;error&quot;</span>, <span class="string">&#x27;请选择待标注文件路径！&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> label_index == -<span class="number">1</span>:</span><br><span class="line">            QMessageBox.information(self, <span class="string">&quot;error&quot;</span>, <span class="string">&#x27;请选择待标注文件的类别！&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(label_img_path):</span><br><span class="line">            QMessageBox.information(self, <span class="string">&quot;error&quot;</span>, <span class="string">&#x27;请选择正确文件夹路径！&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(label_img_path):</span><br><span class="line">            <span class="keyword">if</span> file.endswith(<span class="string">&quot;.bmp&quot;</span>) <span class="keyword">or</span> file.endswith(<span class="string">&quot;.jpg&quot;</span>) <span class="keyword">or</span> file.endswith(<span class="string">&quot;.png&quot;</span>):</span><br><span class="line">                dst = os.path.join(label_img_path, file)</span><br><span class="line">                res = dst.rsplit(<span class="string">&quot;.&quot;</span>, <span class="number">1</span>)</span><br><span class="line">                dst = res[<span class="number">0</span>] + <span class="string">&quot;.txt&quot;</span></span><br><span class="line">                f1 = <span class="built_in">open</span>(dst, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">                f1.write(<span class="string">&quot;&#123;&#125; 0.5 0.5 0.9 0.9&quot;</span>.<span class="built_in">format</span>(label_index))</span><br><span class="line">                f1.close()</span><br><span class="line">        QMessageBox.information(self, <span class="string">&#x27;tips&#x27;</span>, <span class="string">&#x27;标注文件生成完成！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改classes类别</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">edit_label</span>(<span class="params">self</span>):</span><br><span class="line">        label_txt_path = os.path.join(os.getcwd(), <span class="string">&#x27;config\\classes.txt&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(label_txt_path):</span><br><span class="line">            QMessageBox.information(self, <span class="string">&quot;error&quot;</span>, <span class="string">&#x27;config/classes.txt文件不存在！&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        subprocess.run([<span class="string">&#x27;notepad&#x27;</span>, label_txt_path])</span><br><span class="line">        classes_txt = read_classes()</span><br><span class="line">        self.combobox_label.clear()</span><br><span class="line">        <span class="keyword">for</span> class_label <span class="keyword">in</span> classes_txt:</span><br><span class="line">            self.combobox_label.addItem(class_label, classes_txt.index(class_label))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练图像路径</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">trainimg_path_select</span>(<span class="params">self</span>):</span><br><span class="line">        train_img_path = QFileDialog.getExistingDirectory(self, <span class="string">&quot;选择文件夹&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> train_img_path == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.train_img_path.setText(train_img_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">valimg_path_select</span>(<span class="params">self</span>):</span><br><span class="line">        val_img_path = QFileDialog.getExistingDirectory(self, <span class="string">&quot;选择文件夹&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> val_img_path == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.val_img_path.setText(val_img_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改config.txt</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">edit_config</span>(<span class="params">self</span>):</span><br><span class="line">        config_txt_path = os.path.join(os.getcwd(), <span class="string">&#x27;config\\config.txt&#x27;</span>)</span><br><span class="line">        subprocess.run([<span class="string">&#x27;notepad&#x27;</span>, config_txt_path])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改data.yaml和yolov5*.yaml文件</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">edit_data_yaml</span>(<span class="params">self</span>):</span><br><span class="line">        copy_ttf()</span><br><span class="line">        <span class="keyword">if</span> self.train_state == <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        self.fileCreateTime = time.time()</span><br><span class="line">        <span class="comment"># 修改data.yaml</span></span><br><span class="line">        <span class="keyword">if</span> self.train_img_path.text() == <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> self.val_img_path.text() == <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> (</span><br><span class="line">                <span class="keyword">not</span> os.path.exists(self.train_img_path.text())) <span class="keyword">or</span> (<span class="keyword">not</span> os.path.exists(self.val_img_path.text())):</span><br><span class="line">            QMessageBox.information(self, <span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;请选择正确的训练或验证图像路径！&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(os.path.join(os.getcwd(), <span class="string">&#x27;config\\data.yaml&#x27;</span>)):</span><br><span class="line">            QMessageBox.information(self, <span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;config/data.yaml文件不存在！&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(os.path.join(os.getcwd(), <span class="string">&#x27;config\\classes.txt&#x27;</span>)):</span><br><span class="line">            QMessageBox.information(self, <span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;config/classes.txt文件不存在！&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        data_yaml_path = os.path.join(os.getcwd(), <span class="string">&#x27;config\\data.yaml&#x27;</span>)</span><br><span class="line">        label_file_txt = <span class="built_in">open</span>(os.path.join(os.getcwd(), <span class="string">&#x27;config\\classes.txt&#x27;</span>))</span><br><span class="line">        yaml = ruamel.yaml.YAML()</span><br><span class="line">        <span class="comment"># 读取classnames 里面的类别名</span></span><br><span class="line">        classes_txt = []</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> label_file_txt.readlines():</span><br><span class="line">            line = line.rstrip()</span><br><span class="line">            classes_txt.append(line)</span><br><span class="line">        label_file_txt.close()</span><br><span class="line">        <span class="comment"># 读取data数据 修改</span></span><br><span class="line">        yaml.preserve_quotes = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(data_yaml_path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            data = yaml.load(file)</span><br><span class="line">        data[<span class="string">&quot;nc&quot;</span>] = <span class="built_in">len</span>(classes_txt)</span><br><span class="line">        data_path = self.train_img_path.text()</span><br><span class="line">        data_path = os.path.relpath(data_path)</span><br><span class="line">        data_path = data_path.rsplit(<span class="string">&#x27;\\&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(data_path) == <span class="number">1</span>:</span><br><span class="line">            data[<span class="string">&#x27;path&#x27;</span>] = <span class="string">&#x27;../&#x27;</span></span><br><span class="line">            data[<span class="string">&#x27;train&#x27;</span>] = data_path[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(data_path) == <span class="number">2</span>:</span><br><span class="line">            data[<span class="string">&#x27;path&#x27;</span>] = <span class="string">&#x27;./&#x27;</span> + data_path[<span class="number">0</span>]</span><br><span class="line">            data[<span class="string">&#x27;train&#x27;</span>] = data_path[<span class="number">0</span>] + data_path[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data[<span class="string">&#x27;path&#x27;</span>] = data_path[<span class="number">0</span>]</span><br><span class="line">            data[<span class="string">&#x27;train&#x27;</span>] = data_path[<span class="number">1</span>] + <span class="string">&#x27;\\&#x27;</span> + data_path[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        val_path = self.val_img_path.text()</span><br><span class="line">        val_path = val_path.rsplit(<span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(data_path) == <span class="number">1</span>:</span><br><span class="line">            data[<span class="string">&#x27;val&#x27;</span>] = val_path[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data[<span class="string">&#x27;val&#x27;</span>] = data_path[<span class="number">1</span>] + <span class="string">&#x27;\\&#x27;</span> + val_path[<span class="number">1</span>]</span><br><span class="line">            </span><br><span class="line"><span class="comment"># 格式化写入yaml[&#x27;class1&#x27;,&#x27;class2&#x27;,...]</span></span><br><span class="line">        classes_names = ruamel.yaml.CommentedSeq()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(classes_txt)):</span><br><span class="line">            classes_names.append(dq(classes_txt[i]))</span><br><span class="line">        data[<span class="string">&#x27;names&#x27;</span>] = classes_names</span><br><span class="line">        yaml.default_flow_style = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(data_yaml_path, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            yaml.dump(data, f)</span><br><span class="line">        config_dict = read_config()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(os.path.join(os.getcwd(), config_dict[<span class="string">&#x27;cfg&#x27;</span>])):</span><br><span class="line">            QMessageBox.information(self, <span class="string">&#x27;error&#x27;</span>, <span class="string">f&#x27;<span class="subst">&#123;config_dict[<span class="string">&quot;cfg&quot;</span>]&#125;</span>文件不存在！&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(os.path.join(os.getcwd(), config_dict[<span class="string">&#x27;hyp&#x27;</span>])):</span><br><span class="line">            QMessageBox.information(self, <span class="string">&#x27;error&#x27;</span>, <span class="string">f&#x27;<span class="subst">&#123;config_dict[<span class="string">&quot;hyp&quot;</span>]&#125;</span>文件不存在！&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># yolov5*.yaml文件中的nc数</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> config_dict[<span class="string">&#x27;cfg&#x27;</span>] == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            file = <span class="built_in">open</span>(os.path.join(os.getcwd(), config_dict[<span class="string">&#x27;cfg&#x27;</span>]), <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">            data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> file.readlines():</span><br><span class="line">                data += line</span><br><span class="line">            file.close()</span><br><span class="line">            temp_str = data.split(<span class="string">&#x27;\n&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">            temp_str[<span class="number">0</span>] = <span class="string">&#x27;nc: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(classes_txt))</span><br><span class="line">            data = <span class="string">&#x27;\n&#x27;</span>.join(temp_str)</span><br><span class="line">            file = <span class="built_in">open</span>(os.path.join(os.getcwd(), config_dict[<span class="string">&#x27;cfg&#x27;</span>]), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">            file.write(data)</span><br><span class="line">            file.close()</span><br><span class="line">        self.train_state = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 格式化cmd命令，通过subprocess.Popen执行</span></span><br><span class="line">        <span class="keyword">if</span> config_dict[<span class="string">&#x27;weights&#x27;</span>] == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(os.path.join(os.getcwd(), config_dict[<span class="string">&#x27;cfg&#x27;</span>])):</span><br><span class="line">                QMessageBox.information(self, <span class="string">&#x27;error&#x27;</span>, <span class="string">f&#x27;<span class="subst">&#123;config_dict[<span class="string">&quot;cfg&quot;</span>]&#125;</span>文件不存在！&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            cmd = <span class="string">&#x27;train.exe --cfg &#123;&#125; --data &#123;&#125; --hyp &#123;&#125; --epochs &#123;&#125; --batch-size &#123;&#125; --imgsz &#123;&#125; --workers &#123;&#125; --device &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                config_dict[<span class="string">&#x27;cfg&#x27;</span>], <span class="string">&#x27;config\\data.yaml&#x27;</span>, config_dict[<span class="string">&#x27;hyp&#x27;</span>], config_dict[<span class="string">&#x27;epochs&#x27;</span>],</span><br><span class="line">                config_dict[<span class="string">&#x27;batch_size&#x27;</span>], config_dict[<span class="string">&#x27;imgsz&#x27;</span>], config_dict[<span class="string">&#x27;workers&#x27;</span>], config_dict[<span class="string">&#x27;device&#x27;</span>])</span><br><span class="line">            self.p = subprocess.Popen(cmd)</span><br><span class="line">            <span class="built_in">print</span>(cmd)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(os.path.join(os.getcwd(), config_dict[<span class="string">&#x27;weights&#x27;</span>])):</span><br><span class="line">                QMessageBox.information(self, <span class="string">&#x27;error&#x27;</span>, <span class="string">f&#x27;<span class="subst">&#123;config_dict[<span class="string">&quot;weights&quot;</span>]&#125;</span>文件不存在！&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            cmd = <span class="string">&#x27;train.exe --weights &#123;&#125; --data &#123;&#125; --hyp &#123;&#125; --epochs &#123;&#125; --batch-size &#123;&#125; --imgsz &#123;&#125; --workers &#123;&#125; --device &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                config_dict[<span class="string">&#x27;weights&#x27;</span>], <span class="string">&#x27;config\\data.yaml&#x27;</span>, config_dict[<span class="string">&#x27;hyp&#x27;</span>], config_dict[<span class="string">&#x27;epochs&#x27;</span>],</span><br><span class="line">                config_dict[<span class="string">&#x27;batch_size&#x27;</span>], config_dict[<span class="string">&#x27;imgsz&#x27;</span>], config_dict[<span class="string">&#x27;workers&#x27;</span>], config_dict[<span class="string">&#x27;device&#x27;</span>])</span><br><span class="line">            self.p = subprocess.Popen(cmd)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(cmd)</span><br><span class="line">        self.axis_x.setRange(<span class="number">0</span>, <span class="built_in">int</span>(config_dict[<span class="string">&#x27;epochs&#x27;</span>]))</span><br><span class="line">        self.showtrain()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动线程 显示loss曲线</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showtrain</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.show_state == <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> self.train_state == <span class="literal">True</span> <span class="keyword">and</span> subprocess.Popen.poll(self.p) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            t = threading.Thread(target=self.read_csv)</span><br><span class="line">            t.setDaemon(<span class="literal">True</span>)</span><br><span class="line">            t.start()</span><br><span class="line">            self.show_state = <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 通过线程停止判断是否训练完成，并弹窗提示</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">train_finish</span>(<span class="params">self,a</span>):</span><br><span class="line">        self.train_state = a</span><br><span class="line">        QMessageBox.information(self, <span class="string">&#x27;tips&#x27;</span>, <span class="string">&#x27;训练已完成！！&#x27;</span>)</span><br><span class="line">    <span class="comment"># 读取csv文件，指定列，并显示到qchart上</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_csv</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> self.train_state==<span class="literal">False</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="comment"># subprocess.Popen.poll(self.p) is None，判断 subprocess.Popen的进程是否执行完，返回None正在执行</span></span><br><span class="line">            <span class="keyword">if</span> self.train_state == <span class="literal">True</span> <span class="keyword">and</span> <span class="keyword">not</span> subprocess.Popen.poll(self.p) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                self.train_state = <span class="literal">False</span></span><br><span class="line">                self.show_state = <span class="literal">False</span></span><br><span class="line">                self.signal_finish.emit(<span class="literal">False</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(os.getcwd() + <span class="string">&#x27;\\runs\\train&#x27;</span>):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            rlpath = new_report(os.getcwd() + <span class="string">&#x27;\\runs\\train&#x27;</span>)</span><br><span class="line">            path = rlpath + <span class="string">&#x27;\\results.csv&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> os.path.getmtime(path) &lt;= self.fileCreateTime:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 通过文件的创建时间和修改时间判断文件是否被更新</span></span><br><span class="line">            statinfo = os.stat(path)</span><br><span class="line">            <span class="keyword">if</span> self.lastmtime == <span class="number">0.0</span>:</span><br><span class="line">                self.lastmtime = statinfo.st_ctime</span><br><span class="line">            ctime = statinfo.st_ctime</span><br><span class="line">            mtime = statinfo.st_mtime</span><br><span class="line">            <span class="keyword">if</span> ctime &lt; mtime <span class="keyword">and</span> mtime &gt; self.lastmtime:</span><br><span class="line">                time.sleep(<span class="number">3</span>)</span><br><span class="line">                self.lastmtime=mtime</span><br><span class="line">                <span class="comment"># 读取csv文件的指定列</span></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(path, encoding=<span class="string">&#x27;utf-8&#x27;</span>, mode=<span class="string">&#x27;r+&#x27;</span>) <span class="keyword">as</span> file_read:</span><br><span class="line">                    epoch = []</span><br><span class="line">                    loss = []</span><br><span class="line">                    csvread = csv.reader(file_read)</span><br><span class="line">                    headers = <span class="built_in">next</span>(csvread)  <span class="comment"># 获取csv文件中的列名</span></span><br><span class="line">                    content = headers.index(<span class="string">&#x27;               epoch&#x27;</span>)  <span class="comment"># 提取csv文件中的指定列名</span></span><br><span class="line">                    content1 = headers.index(<span class="string">&#x27;      train/box_loss&#x27;</span>)</span><br><span class="line">                    <span class="keyword">for</span> row <span class="keyword">in</span> csvread:  </span><br><span class="line">                        epoch.append(<span class="built_in">int</span>(row[content].strip()))</span><br><span class="line">                        loss.append(<span class="built_in">float</span>(row[content1].strip()))</span><br><span class="line">                file_read.close()</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(self.spline) &gt; <span class="built_in">len</span>(epoch):</span><br><span class="line">                    self.spline.clear()</span><br><span class="line">                    ep = <span class="string">&#x27;epoch:0&#x27;</span></span><br><span class="line">                    el = <span class="string">&#x27;loss:0.000&#x27;</span></span><br><span class="line">                    self.epoch_label.setText(ep)</span><br><span class="line">                    self.loss_label.setText(el)</span><br><span class="line">                ep = <span class="string">&#x27;epoch:&#x27;</span> + <span class="built_in">str</span>(epoch[-<span class="number">1</span>])</span><br><span class="line">                el = <span class="string">&#x27;loss:&#x27;</span> + <span class="built_in">str</span>(loss[-<span class="number">1</span>])</span><br><span class="line">                self.epoch_label.setText(ep)</span><br><span class="line">                self.loss_label.setText(el)</span><br><span class="line">                <span class="comment"># 将新的数据点写入</span></span><br><span class="line">                <span class="keyword">while</span> self.spline.__len__() &lt; epoch.__len__():</span><br><span class="line">                    self.spline.append(epoch[<span class="built_in">len</span>(self.spline)], loss[<span class="built_in">len</span>(self.spline)])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shutdown_train</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.train_state == <span class="literal">True</span> <span class="keyword">and</span> subprocess.Popen.poll(self.p) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.p.kill()</span><br><span class="line">            self.train_state = <span class="literal">False</span></span><br><span class="line">            self.show_state = <span class="literal">False</span></span><br><span class="line">            self.spline.clear()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\n\n----------------------------训练已结束----------------------------\n&#x27;</span>)</span><br><span class="line">            QMessageBox.information(self, <span class="string">&#x27;tips&#x27;</span>, <span class="string">&#x27;训练已结束！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">weight_path_select</span>(<span class="params">self</span>):</span><br><span class="line">        weight_path, file_type = QFileDialog.getOpenFileName(self, <span class="string">&quot;选取文件&quot;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&quot;模型文件(*.pt)&quot;</span>)</span><br><span class="line">        self.test_pt_p.setText(weight_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_manyimg_path_select</span>(<span class="params">self</span>):</span><br><span class="line">        test_img_path = QFileDialog.getExistingDirectory(self, <span class="string">&quot;选择文件夹&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> test_img_path == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.test_img_p.setText(test_img_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_oneimg_path_select</span>(<span class="params">self</span>):</span><br><span class="line">        test_img_path, file_type = QFileDialog.getOpenFileName(self, <span class="string">&quot;选择图像&quot;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&quot;图像文件(*.bmp *.jpg *.png)&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> test_img_path == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.test_img_p.setText(test_img_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.test_pt_p.text() == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            QMessageBox.information(self, <span class="string">&quot;error&quot;</span>, <span class="string">&#x27;请选择模型文件！&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> self.test_img_p.text() == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            QMessageBox.information(self, <span class="string">&quot;error&quot;</span>, <span class="string">&#x27;请选择测试文件夹！&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        config_dict = read_config()</span><br><span class="line">        cmd = <span class="string">&#x27;detect.exe --weights &#123;&#125; --source &#123;&#125; --data &#123;&#125; --imgsz &#123;&#125; --conf-thres &#123;&#125; --device &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            self.test_pt_p.text(), self.test_img_p.text(), <span class="string">&#x27;config\\data.yaml&#x27;</span>, config_dict[<span class="string">&#x27;imgsz&#x27;</span>],</span><br><span class="line">            self.test_spinbox.text(), config_dict[<span class="string">&#x27;device&#x27;</span>])</span><br><span class="line">        subprocess.Popen(cmd)</span><br><span class="line">        <span class="built_in">print</span>(cmd)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">change_pt_select</span>(<span class="params">self</span>):</span><br><span class="line">        weight_path, file_type = QFileDialog.getOpenFileName(self, <span class="string">&quot;选取文件&quot;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&quot;模型文件(*.pt)&quot;</span>)</span><br><span class="line">        self.change_pt_path.setText(weight_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_Change</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.change_pt_path.text() == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            QMessageBox.information(self, <span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;请选择模型文件&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        config_dict = read_config()</span><br><span class="line">        cmd = <span class="string">&#x27;export.exe --include &#123;&#125; --data &#123;&#125; --weights &#123;&#125; --imgsz &#123;&#125; --device &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            self.change_format_select.currentText(), <span class="string">&#x27;config\\data.yaml&#x27;</span>, self.change_pt_path.text(),</span><br><span class="line">            config_dict[<span class="string">&#x27;imgsz&#x27;</span>], config_dict[<span class="string">&#x27;device&#x27;</span>])</span><br><span class="line">        <span class="built_in">print</span>(cmd)</span><br><span class="line">        subprocess.Popen(cmd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取classes.txt</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_classes</span>():</span><br><span class="line">    txt_file = <span class="built_in">open</span>(os.path.join(os.getcwd(), <span class="string">&#x27;config\\classes.txt&#x27;</span>))</span><br><span class="line">    classes_txt = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> txt_file.readlines():</span><br><span class="line">        line = line.rstrip()</span><br><span class="line">        classes_txt.append(line)</span><br><span class="line">    txt_file.close()</span><br><span class="line">    <span class="keyword">return</span> classes_txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取配置参数，格式如下</span></span><br><span class="line"><span class="comment"># weights:yolov5s.pt</span></span><br><span class="line"><span class="comment"># cfg:models\\yolov5s.yaml</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_config</span>():</span><br><span class="line">    config_dict = &#123;<span class="string">&#x27;weights&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;cfg&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;hyp&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;epochs&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;batch_size&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;imgsz&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;workers&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">                   <span class="string">&#x27;device&#x27;</span>: <span class="string">&#x27;0&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(os.getcwd(), <span class="string">&#x27;config\\config.txt&#x27;</span>), <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            line = line.rstrip()</span><br><span class="line">            <span class="keyword">if</span> line.startswith(<span class="string">&#x27;#&#x27;</span>):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> line == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;:&#x27;</span> <span class="keyword">in</span> line:</span><br><span class="line">                temp_str = line.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&#x27;：&#x27;</span> <span class="keyword">in</span> line:</span><br><span class="line">                temp_str = line.split(<span class="string">&#x27;：&#x27;</span>)</span><br><span class="line">            config_dict[temp_str[<span class="number">0</span>]] = temp_str[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> config_dict</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文件夹下最新的文件或文件夹</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new_report</span>(<span class="params">test_report</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(test_report):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    lists = os.listdir(test_report)  <span class="comment"># 列出目录的下所有文件和文件夹保存到lists</span></span><br><span class="line">    lists.sort(key=<span class="keyword">lambda</span> fn: os.path.getmtime(test_report + <span class="string">&quot;/&quot;</span> + fn))  <span class="comment"># 按时间排序</span></span><br><span class="line">    file_new = os.path.join(test_report, lists[-<span class="number">1</span>])  <span class="comment"># 获取最新的文件保存到file_new</span></span><br><span class="line">    <span class="keyword">return</span> file_new</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将指定文件拷贝到指定位置</span></span><br><span class="line"><span class="comment"># os.path.expanduser(&quot;~&quot;) 返回 C:\Users\*     *是计算机的用户名</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">copy_ttf</span>():</span><br><span class="line">    tff_path = os.path.join(os.path.expanduser(<span class="string">&quot;~&quot;</span>), <span class="string">r&#x27;AppData\Roaming\Ultralytics&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(tff_path):</span><br><span class="line">        os.makedirs(tff_path)</span><br><span class="line">    file_path = os.path.join(tff_path, <span class="string">&#x27;Arial.ttf&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file_path):</span><br><span class="line">        old_path = os.path.join(os.getcwd(), <span class="string">r&#x27;style\Arial.ttf&#x27;</span>)</span><br><span class="line">        os.popen(<span class="string">f&#x27;copy <span class="subst">&#123;old_path&#125;</span> <span class="subst">&#123;file_path&#125;</span> &#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = main_widget()</span><br><span class="line">    w.show()</span><br><span class="line">    app.exec_()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -python -pyqt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -python -pyqt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++test</title>
      <link href="/2023/07/06/c++/C++test/"/>
      <url>/2023/07/06/c++/C++test/</url>
      
        <content type="html"><![CDATA[<p>C++常用的小demo！！！</p><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 下载url链接文件，保存文件名filename</span></span><br><span class="line"><span class="comment">* @param url 待下载文件的链接</span></span><br><span class="line"><span class="comment">* @param filename 保存文件名</span></span><br><span class="line"><span class="comment">* @return false 失败 true成功</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">urlDownload</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* url, <span class="type">const</span> <span class="type">char</span>* filename)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="dll"><a href="#dll" class="headerlink" title="dll"></a>dll</h2><h3 id="1-函数、类、结构体生成dll，并使用"><a href="#1-函数、类、结构体生成dll，并使用" class="headerlink" title="1.函数、类、结构体生成dll，并使用"></a>1.函数、类、结构体生成dll，并使用</h3><p>1.新建dll项目</p><img src="1688636994495.png" alt="1688636994495" style="zoom:67%;"><p>2.新建一个头文件和cpp文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.h文件</span><br><span class="line"></span><br><span class="line">#pragma once</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line"># 函数</span><br><span class="line">extern &quot;C&quot; __declspec(dllexport) void SayHello();//导出dll，函数名SayHello</span><br><span class="line"># 类</span><br><span class="line">class __declspec(dllexport)  YOLO</span><br><span class="line">&#123;</span><br><span class="line">#函数变量声明</span><br><span class="line">&#125;</span><br><span class="line"># 结构体</span><br><span class="line">struct __declspec(dllexport)  Net_config</span><br><span class="line">&#123;</span><br><span class="line">结构体变量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.cpp</span><br><span class="line">//函数功能</span><br><span class="line">#include &quot;pch.h&quot;</span><br><span class="line">#include &quot;test.h&quot;</span><br><span class="line"></span><br><span class="line">void SayHello()</span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; &quot;Hello！你成功了！&quot; &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.运行生成dll lib，注意x86和64</p><p>4.将dll和lib添加到需要使用dll的项目目录下</p><p>5.添加头文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#pragma comment(lib,&quot;Dll1.lib&quot;)//链接对应dll</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot; __declspec(dllimport) void SayHello();//导入dll</span><br><span class="line">struct __declspec(dllimport)  Net_config</span><br><span class="line">&#123;</span><br><span class="line">结构体申明</span><br><span class="line">&#125;</span><br><span class="line">class __declspec(dllimport)  YOLO</span><br><span class="line">&#123;</span><br><span class="line">类申明</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.需要使用的地方添加5步骤的头文件，调用SayHello函数就可以。</p><h2 id="C-递归"><a href="#C-递归" class="headerlink" title="C+递归"></a>C+递归</h2><h3 id="1-尾递归优化"><a href="#1-尾递归优化" class="headerlink" title="1.尾递归优化"></a>1.尾递归优化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过尾递归，只保留一份函数的内存空间，递归20次后自动结束</span></span><br><span class="line"><span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pri</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">20</span>==a) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pri</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">result：</span></span><br><span class="line"><span class="comment">11111111111111111112</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="2-第一层递归使用后序递归的局部变量"><a href="#2-第一层递归使用后序递归的局部变量" class="headerlink" title="2.第一层递归使用后序递归的局部变量"></a>2.第一层递归使用后序递归的局部变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 将第一层递归的局部变量作为参数传入</span></span><br><span class="line"><span class="comment"># 2. 将后序递归的局部变量作为返回值</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">path_size</span>(<span class="params">path</span>):</span><br><span class="line">    size=<span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;文件或文件夹不存在！&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    dir_list=os.listdir(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(dir_list)==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> dir_list:</span><br><span class="line">        pa=os.path.join(path,p)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(pa):</span><br><span class="line">            size+=path_size(pa)   <span class="comment"># 将后序递归的返回值加上</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(pa):</span><br><span class="line">            <span class="built_in">print</span>(pa)</span><br><span class="line">            size+=os.path.getsize(pa)</span><br><span class="line">    <span class="keyword">return</span> size</span><br></pre></td></tr></table></figure><h3 id="1-溢出-amp-类型提升"><a href="#1-溢出-amp-类型提升" class="headerlink" title="1.溢出&amp;类型提升"></a>1.溢出&amp;类型提升</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> a = <span class="number">0x100000000</span>;<span class="comment">// 0x表示16进制，0x100000000=4294967296，而uint最大值为4294967295</span></span><br><span class="line">    <span class="type">int</span> b = <span class="number">0xffffffff</span>;<span class="comment">// 0xffffffff二进制1111 1111 1111 1111，uint就是4294967295，int就是-1(最高位1负数，补码)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%u, b=%d&quot;</span>, a, b);<span class="comment">//溢出a=0，</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">a=<span class="number">0</span>, b=<span class="number">-1</span></span><br><span class="line">    <span class="type">char</span> c = <span class="number">128</span>;   <span class="comment">//  1000 0000，-》  1111 1111 1111 1111 1111 1111 1000 0000</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, c);</span><br><span class="line"><span class="number">4294967168</span></span><br><span class="line">    <span class="type">char</span> d = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 类型提升为 int，占用 4 个字节</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%zu\n&quot;</span>, <span class="built_in">sizeof</span>(+d));  <span class="comment">// 4</span></span><br><span class="line">    std::cout&lt;&lt;+d&lt;&lt;std::endl;<span class="comment">//10</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%zu\n&quot;</span>, <span class="built_in">sizeof</span>(d));<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">    <span class="type">short</span> e=<span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%zu\n&quot;</span>, <span class="built_in">sizeof</span>(e));<span class="comment">//2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%zu\n&quot;</span>, <span class="built_in">sizeof</span>(+e)); <span class="comment">//4</span></span><br></pre></td></tr></table></figure><h2 id="win-api"><a href="#win-api" class="headerlink" title="win api"></a>win api</h2><h3 id="1-GetTickCount"><a href="#1-GetTickCount" class="headerlink" title="1.GetTickCount"></a>1.GetTickCount</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sleep</span><span class="params">(DWORD milliseconds)</span></span>;<span class="comment">// DWORD unsigned long的别名，32位整型，当前进程挂起多少毫秒</span></span><br><span class="line"><span class="function">DWORD <span class="title">GetTickCount</span><span class="params">()</span></span>;<span class="comment">// 操作系统启动到当前的毫秒数，最大4294967295约49.71天，精度18ms左右</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="函数补丁"><a href="#函数补丁" class="headerlink" title="函数补丁"></a>函数补丁</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;111&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;222&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">void</span> (*func)()=&amp;func1;<span class="comment">//通过函数指针将func的调用替换为func1的调用，实现修改功能，若添加功能使用装饰器</span></span><br><span class="line">    <span class="built_in">func</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="C-17-文件"><a href="#C-17-文件" class="headerlink" title="C++17 文件"></a>C++17 文件</h2><h3 id="1-返回目录下所有指定格式的文件-c-17"><a href="#1-返回目录下所有指定格式的文件-c-17" class="headerlink" title="1.返回目录下所有指定格式的文件(c+17)"></a>1.返回目录下所有指定格式的文件(c+17)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++17 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;filesystem&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::filesystem;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkIsDir</span><span class="params">(<span class="type">const</span> string&amp; dir)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!std::filesystem::<span class="built_in">exists</span>(dir)) &#123;</span><br><span class="line">        cout &lt;&lt; dir &lt;&lt; <span class="string">&quot; not exists. Please check.&quot;</span> &lt;&lt; endl;<span class="comment">// 不存在返回false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">directory_entry <span class="title">entry</span><span class="params">(dir)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (entry.<span class="built_in">is_directory</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">// 目录返回true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 不是目录返回false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索一个目录下所有的图像文件，以 指定后缀 结尾的文件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getAllFileNames</span><span class="params">(<span class="type">const</span> string dir, <span class="type">const</span> vector&lt;string&gt; suffixs, vector&lt;string&gt;&amp; files)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 首先检查目录是否存在，是否是目录</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">checkIsDir</span>(dir)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 递归遍历所有的文件或目录</span></span><br><span class="line">    <span class="function">directory_iterator <span class="title">iters</span><span class="params">(dir)</span></span>;<span class="comment">// 如果当前目录是空目录不会进入for循环</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; iter : iters) &#123;</span><br><span class="line">        <span class="comment">// 查看是否是目录，如果是目录则循环递归</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">checkIsDir</span>(iter.<span class="built_in">path</span>().<span class="built_in">string</span>())) &#123;</span><br><span class="line">            <span class="built_in">getAllFileNames</span>(iter.<span class="built_in">path</span>().<span class="built_in">string</span>(), suffixs, files);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">//不是目录则检查后缀是否是图像</span></span><br><span class="line">            string extension = iter.<span class="built_in">path</span>().<span class="built_in">extension</span>().<span class="built_in">string</span>(); <span class="comment">// 获取文件的后缀名</span></span><br><span class="line">            <span class="comment">// 可以扩展成你自己想要的文件类型来进行筛选, 比如加上.gif .bmp之类的</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> s : suffixs) &#123;</span><br><span class="line">                <span class="keyword">if</span> (extension == s) &#123;</span><br><span class="line">                    files.<span class="built_in">push_back</span>(iter.<span class="built_in">path</span>().<span class="built_in">string</span>());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;string&gt;suffixs;</span><br><span class="line">    suffixs.<span class="built_in">push_back</span>(<span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">    suffixs.<span class="built_in">push_back</span>(<span class="string">&quot;.bmp&quot;</span>);</span><br><span class="line">    vector&lt;string&gt;files;</span><br><span class="line">    <span class="built_in">getAllFileNames</span>(<span class="string">&quot;D:/A_project/Test/Test&quot;</span>, suffixs, files);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断文件类型</span></span><br><span class="line">    <span class="function">path <span class="title">fp</span><span class="params">(<span class="string">&quot;D:/A_project/Test/Test/fileNames.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;.txt&quot;</span> == fp.<span class="built_in">extension</span>().<span class="built_in">string</span>())</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;是txt&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;bushi&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//判断是否是目录</span></span><br><span class="line">    <span class="function">directory_entry <span class="title">entry</span><span class="params">(<span class="string">&quot;D:/A_project/Test/Test/fileNames.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (entry.<span class="built_in">is_directory</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">// 目录返回true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 不是目录返回false</span></span><br></pre></td></tr></table></figure><h2 id="C-知识"><a href="#C-知识" class="headerlink" title="C++知识"></a>C++知识</h2><h3 id="1-main的参数"><a href="#1-main的参数" class="headerlink" title="1.main的参数"></a>1.main的参数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char** argv)</span><br><span class="line"></span><br><span class="line">//外部调用生成的exe时</span><br><span class="line">./Test.exe</span><br><span class="line">argc为参数个数，不传参时为1，就是执行文件本身</span><br><span class="line"> D:/A_project/Test/Test .cpp .txt</span><br><span class="line"> argc为4</span><br><span class="line">argv参数列表argv[0]  ./Test.exe</span><br><span class="line">argv[1]  D:/A_project/Test/Test</span><br><span class="line">argv[2]  .cpp</span><br><span class="line">argv[3]  .txt</span><br></pre></td></tr></table></figure><h3 id="2-main结束"><a href="#2-main结束" class="headerlink" title="2.main结束"></a>2.main结束</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">结束main函数相当于结束整个进程</span><br><span class="line">表示进程正常结束，return 0；exit(0)；return EXIT_SUCCESS </span><br><span class="line">返回其他表示未正常结束 return -1；exit(-1); return EXIT_FAILURE </span><br><span class="line">main函数中exit() 和 return()作用类似，都表示结束进程，exit()结束进程，return结束main（结束进程）</span><br><span class="line">在其他地方return表示结束当前函数,不执行语句块中return后面的语句。</span><br><span class="line">在其他地方exit()表示结束当前进程。</span><br></pre></td></tr></table></figure><h3 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3.数据类型"></a>3.数据类型</h3><h4 id="1-DWORD-UCHAR互转"><a href="#1-DWORD-UCHAR互转" class="headerlink" title="1.DWORD UCHAR互转"></a>1.DWORD UCHAR互转</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DWORD red =<span class="built_in">RGB</span>(<span class="number">255</span>,<span class="number">25</span>,<span class="number">30</span>);<span class="comment">//4字节,实际以BGR存储</span></span><br><span class="line"><span class="type">int</span> r=(UCHAR)red;</span><br><span class="line"><span class="type">int</span> g=(UCHAR)(red&gt;&gt;<span class="number">8</span>);</span><br><span class="line"><span class="type">int</span> b=(UCHAR)(red&gt;&gt;<span class="number">16</span>);</span><br><span class="line"><span class="type">int</span> a=(UCHAR)(red&gt;&gt;<span class="number">24</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 125 63 77 </span></span><br><span class="line">DWORD rgb=(<span class="number">77</span>&lt;&lt;<span class="number">16</span>) | (<span class="number">63</span>&lt;&lt;<span class="number">8</span>) | (<span class="number">125</span>);</span><br></pre></td></tr></table></figure><h4 id="2-进制表示"><a href="#2-进制表示" class="headerlink" title="2.进制表示"></a>2.进制表示</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">0b00000001000000100000010000001000</span>;</span><br><span class="line">UCHAR b=(UCHAR)a;</span><br><span class="line">UCHAR b1=(UCHAR)(a&gt;&gt;<span class="number">8</span>);</span><br><span class="line">UCHAR b2=(UCHAR)(a&gt;&gt;<span class="number">16</span>);</span><br><span class="line">UCHAR b3=(UCHAR)(a&gt;&gt;<span class="number">24</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\t%u\t%u\t%u&quot;</span>,b,b1,b2,b3);</span><br><span class="line"><span class="type">int</span> c=<span class="number">052</span>;</span><br><span class="line"><span class="keyword">if</span>(a==c)cout&lt;&lt;<span class="string">&quot;正确&quot;</span>&lt;&lt;<span class="string">&quot;\t&quot;</span>&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;c&lt;&lt;endl;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0b二进制 0o八进制 0d十进制 0x十六进制前缀表示 H十六进制后缀表示</span></span><br><span class="line"><span class="comment">052会被认为是8进制，但069会报错，8进制出现9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="3-操作符"><a href="#3-操作符" class="headerlink" title="3.操作符"></a>3.操作符</h4><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>%</td><td>取模</td><td>返回x&#x2F;y的余数</td></tr><tr><td>&amp;&amp;</td><td>逻辑与</td><td></td></tr><tr><td>||</td><td>逻辑或</td><td></td></tr><tr><td>！</td><td>逻辑非</td><td></td></tr><tr><td>&amp;</td><td>按位与</td><td>x y二进制位与操作</td></tr><tr><td>|</td><td>按位或</td><td></td></tr><tr><td>^</td><td>按位异或</td><td></td></tr><tr><td>~</td><td>按位</td><td>一元操作符</td></tr><tr><td>&lt;&lt;   &gt;&gt;</td><td>按位左移 →移</td><td></td></tr></tbody></table><h3 id="4-结构体"><a href="#4-结构体" class="headerlink" title="4.结构体"></a>4.结构体</h3><blockquote><p>结构体中多个类型变量的地址连续，但要考虑内存对齐问题。前一个变量越界会导致后一个变量异常。</p></blockquote><h3 id="5-指针"><a href="#5-指针" class="headerlink" title="5.指针"></a>5.指针</h3><p>1.指针数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*url[0]就是指向&quot;a1aaaa&quot;的内存地址，可以通过移动指针指向&quot;bbbbbb&quot;</span></span><br><span class="line"><span class="comment">*url[0]和url[3]共用同一块地址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* url[] =</span><br><span class="line">&#123;</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;a1aaaa&quot;</span>,</span><br><span class="line"><span class="string">&quot;bbbbbb&quot;</span>,</span><br><span class="line"><span class="string">&quot;c2ccccc&quot;</span>,</span><br><span class="line"><span class="string">&quot;bbbbbb&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="函数包装function"><a href="#函数包装function" class="headerlink" title="函数包装function"></a>函数包装function</h2><h3 id="1-包装普通函数"><a href="#1-包装普通函数" class="headerlink" title="1.包装普通函数"></a>1.包装普通函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">g_Minus</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i - j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    function&lt;<span class="type">int</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; f = g_Minus;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">f</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;                                            <span class="comment">// -1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++Mixins</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Label</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  std::string label;</span><br><span class="line">  <span class="built_in">Label</span>() : <span class="built_in">label</span>() &#123;&#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setLabel</span><span class="params">(<span class="type">const</span> std::string&amp; text)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    label=text;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Mixins&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> : <span class="keyword">public</span> Mixins... &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="type">double</span> x, y;</span><br><span class="line">  <span class="built_in">Point</span>() : <span class="built_in">Mixins</span>()..., <span class="built_in">x</span>(<span class="number">0.0</span>), <span class="built_in">y</span>(<span class="number">0.0</span>) &#123;&#125;</span><br><span class="line">  <span class="built_in">Point</span>(<span class="type">double</span> x, <span class="type">double</span> y) : <span class="built_in">Mixins</span>()..., <span class="built_in">x</span>(x), <span class="built_in">y</span>(y) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Color</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> red = <span class="number">0</span>, green = <span class="number">0</span>, blue = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> MyPoint = Point&lt;Label, Color&gt;;</span><br><span class="line"># 类的主要部分Point 附加功能 <span class="function">label color</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MyPoint point=<span class="built_in">MyPoint</span>(<span class="number">1.1</span>,<span class="number">1.2</span>);</span><br><span class="line">    point.<span class="built_in">setLabel</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    std::cout&lt;&lt;point.label&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C函数"><a href="#C函数" class="headerlink" title="C函数"></a>C函数</h2><h3 id="C知识"><a href="#C知识" class="headerlink" title="C知识"></a>C知识</h3><blockquote><p>size_t在格式化字符串时用%zu表示。</p></blockquote><h3 id="1-memcpy内存拷贝"><a href="#1-memcpy内存拷贝" class="headerlink" title="1. memcpy内存拷贝"></a>1. memcpy内存拷贝</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">40</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;person,person_copy;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> myname[]=<span class="string">&quot;My Name Is Memcpy&quot;</span>;</span><br><span class="line">    <span class="built_in">memcpy</span>(person.name,myname,<span class="built_in">strlen</span>(myname)+<span class="number">1</span>);</span><br><span class="line">    person.age=<span class="number">46</span>;</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;person_copy,&amp;person,<span class="built_in">sizeof</span>(person));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;person_copy:%s,%d\n&quot;</span>,person_copy.name,person_copy.age);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="title">my_memcpy</span><span class="params">(<span class="type">void</span>*dest,<span class="type">const</span> <span class="type">void</span>*src,<span class="type">size_t</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(dest &amp;&amp; src);</span><br><span class="line">    <span class="type">void</span>*ret=dest;</span><br><span class="line">    <span class="keyword">while</span> (num--)</span><br><span class="line">    &#123;</span><br><span class="line">        *(<span class="type">char</span>*)dest=*(<span class="type">char</span>*)src;</span><br><span class="line">        dest=(<span class="type">char</span>*)dest+<span class="number">1</span>;</span><br><span class="line">        src=(<span class="type">char</span>*)src+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-assert-断言"><a href="#2-assert-断言" class="headerlink" title="2.assert()断言"></a>2.assert()断言</h3><blockquote><p> assert(),如果其值为假（即为0），那么它先向stderr打印一条出错信息，然后通过调用 abort 来终止程序运行。 </p><p> 可以在包含#include &lt;assert.h&gt;的语句之前插入 #define NDEBUG 来禁用assert调用。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;assert.h&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, char const *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    int i = 0;</span><br><span class="line">    while (1)</span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">        printf(&quot;Before assert is %d.\n&quot;, i);</span><br><span class="line">        assert(i &lt;= 5);  </span><br><span class="line">        printf(&quot;After assert is %d.\n&quot;, i);//当i&gt;5时，不会执行到这一句</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-拷贝字符串strncpy-s"><a href="#3-拷贝字符串strncpy-s" class="headerlink" title="3.拷贝字符串strncpy_s"></a>3.拷贝字符串strncpy_s</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将src前len2个字符，拷贝到det前len2个字符，det前len1个字符会被清空。</span></span><br><span class="line"><span class="built_in">strncpy_s</span>(det,len1,src,len2);</span><br><span class="line"><span class="built_in">strcpy_s</span>(det,len1,src);<span class="comment">//清空det前len1，并将src全部复制到det</span></span><br></pre></td></tr></table></figure><h3 id="4-memset内存初始化"><a href="#4-memset内存初始化" class="headerlink" title="4.memset内存初始化"></a>4.memset内存初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//memset会将变量的每个 字节 初始化为指定值</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="built_in">memset</span>(&amp;a, <span class="number">1</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a);<span class="comment">//输出16843009 -&gt; 0000 0001 0000 0001 0000 0001 0000 0001</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C++ -demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++面试</title>
      <link href="/2023/07/04/%E9%9D%A2%E8%AF%95/C++%E9%9D%A2%E8%AF%95/"/>
      <url>/2023/07/04/%E9%9D%A2%E8%AF%95/C++%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Qt</title>
      <link href="/2023/07/04/Qt/qt%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/07/04/Qt/qt%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>Qt使用过程中问题记录</p><span id="more"></span><blockquote><p>Qt项目的相对路径不是项目位置，在pro文件中DESTDIR &#x3D; $$PWD解决。</p></blockquote><h2 id="1-判断某个进程是否启动"><a href="#1-判断某个进程是否启动" class="headerlink" title="1.判断某个进程是否启动"></a>1.判断某个进程是否启动</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkOnly</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//  创建互斥量  L&quot;进程名(软件名)&quot;</span></span><br><span class="line">HANDLE m_hMutex = <span class="built_in">CreateMutexW</span>(<span class="literal">NULL</span>, FALSE, <span class="string">L&quot;MotionControl&quot;</span>);</span><br><span class="line"><span class="comment">//  检查错误代码  </span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">GetLastError</span>() == ERROR_ALREADY_EXISTS) &#123;</span><br><span class="line"><span class="comment">//  如果已有互斥量存在则释放句柄并复位互斥量  </span></span><br><span class="line"><span class="built_in">CloseHandle</span>(m_hMutex);</span><br><span class="line">m_hMutex = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//  程序退出  </span></span><br><span class="line"><span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//某个进程是否启动</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">checkOnly</span>() == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">QMessageBox::<span class="built_in">warning</span>(<span class="literal">nullptr</span>, <span class="string">&quot;提示&quot;</span>, <span class="string">&quot;软件已经启动&quot;</span>, QMessageBox::Ok, QMessageBox::No);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-美化"><a href="#2-美化" class="headerlink" title="2.美化"></a>2.美化</h2><h3 id="1-样式表qss使用"><a href="#1-样式表qss使用" class="headerlink" title="1.样式表qss使用"></a>1.样式表qss使用</h3><p>1.Qt编辑器里面使用</p><p> “右键项目”—“添加新文件”，选择“Qt类”—再选择“Qt Resource File” </p><p> 右键“qss.qrc”—“add prefix”—<strong>prefix名</strong>就是后面读文件用到的名。</p><p><strong>prefix名</strong>是123—qssFile(“:&#x2F;123&#x2F;1.qss”);</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">QString qss;</span><br><span class="line"><span class="function">QFile <span class="title">qssFile</span><span class="params">(<span class="string">&quot;:/1.qss&quot;</span>)</span></span>;</span><br><span class="line">qssFile.<span class="built_in">open</span>(QFile::ReadOnly);</span><br><span class="line"><span class="keyword">if</span>(qssFile.<span class="built_in">isOpen</span>())</span><br><span class="line">&#123;</span><br><span class="line">    qss = <span class="built_in">QLatin1String</span>(qssFile.<span class="built_in">readAll</span>());</span><br><span class="line">    qApp-&gt;<span class="built_in">setStyleSheet</span>(qss);</span><br><span class="line">    qssFile.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.vs里面使用</p><p>直接使用，注意qss文件路径。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">QString qss;</span><br><span class="line">QFile qssFile(&quot;1.qss&quot;);</span><br><span class="line">qssFile.open(QFile::ReadOnly);</span><br><span class="line">if(qssFile.isOpen())</span><br><span class="line">&#123;</span><br><span class="line">qss = QLatin1String(qssFile.readAll());</span><br><span class="line">qApp-&gt;setStyleSheet(qss);</span><br><span class="line">qssFile.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-控件"><a href="#3-控件" class="headerlink" title="3.控件"></a>3.控件</h2><h3 id="1-combobox下拉选择"><a href="#1-combobox下拉选择" class="headerlink" title="1.combobox下拉选择"></a>1.combobox下拉选择</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">comboBox-&gt;addItem(&quot;Option&quot;);//添加选项</span><br><span class="line">QString currentText = comboBox-&gt;currentText();//获取当前选中的文本</span><br><span class="line">int currentIndex = comboBox-&gt;currentIndex();//获取当前选中index</span><br><span class="line">connect(LComboBox,SIGNAL( QComboBox::currentIndexChanged), this, SLOT(boxTxt()));//选中框发生变化后，执行对应槽函数</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -教程 -Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++test</title>
      <link href="/2023/06/01/demo/C++/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
      <url>/2023/06/01/demo/C++/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c++test</title>
      <link href="/2023/06/01/demo/C++/%E6%B6%88%E6%81%AF%E8%BF%9E%E5%8F%91/"/>
      <url>/2023/06/01/demo/C++/%E6%B6%88%E6%81%AF%E8%BF%9E%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>使用C++实现消息连发和群发！</p><span id="more"></span><p>工具–》spy++–》查找窗口</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="comment">/*句柄：就是文件的id，linux一切皆文件（窗口、鼠标、光标、画笔、画刷、进程、程序····）</span></span><br><span class="line"><span class="comment">* HPEN画笔句柄，HBRUSH画刷，HWND窗口句柄</span></span><br><span class="line"><span class="comment">* 顶层窗口  FindWindow  子窗口FindwindowEx</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">one_button</span><span class="params">(BYTE vkey)</span> </span>&#123;</span><br><span class="line"><span class="built_in">keybd_event</span>(vkey, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">keybd_event</span>(vkey, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">two_button</span><span class="params">(BYTE vkey1, BYTE vkey2)</span> </span>&#123;</span><br><span class="line"><span class="built_in">keybd_event</span>(vkey1, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">keybd_event</span>(vkey2, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">keybd_event</span>(vkey2, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">keybd_event</span>(vkey1, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mainQ111</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//句柄在一个窗口关闭后重置</span></span><br><span class="line"><span class="comment">//可以通过类名和标题获取句柄</span></span><br><span class="line">HWND qqhwnd = <span class="built_in">FindWindow</span>(<span class="string">L&quot;TXGuiFoundation&quot;</span>,<span class="string">L&quot;QQ&quot;</span>);</span><br><span class="line"><span class="comment">/*keybd_event();按键 物理值默认0 （按下0 弹起2）第四个参数默认0</span></span><br><span class="line"><span class="comment">keybd_event控制本程序输入可以不加延时，但是控制本程序外部程序需要延时</span></span><br><span class="line"><span class="comment">爱你呦 小凌</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">SetForegroundWindow</span>(qqhwnd);<span class="comment">//将QQ设置为当前操作窗口，有Set 就有 Get  后面通过这个判断是否打开了聊天窗口</span></span><br><span class="line"><span class="built_in">one_button</span>(VK_TAB);</span><br><span class="line"><span class="built_in">one_button</span>(VK_TAB);</span><br><span class="line"><span class="built_in">one_button</span>(VK_DOWN);</span><br><span class="line"><span class="built_in">one_button</span>(VK_RETURN);</span><br><span class="line"><span class="built_in">one_button</span>(VK_RETURN);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">one_button</span>(VK_DOWN);</span><br><span class="line"><span class="built_in">one_button</span>(VK_RETURN);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">if</span> (qqhwnd ==  <span class="built_in">GetForegroundWindow</span>()) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//打开了 新窗口 则当前操作窗口就不是qqhwnd了</span></span><br><span class="line"><span class="built_in">two_button</span>(VK_CONTROL,<span class="string">&#x27;V&#x27;</span>);</span><br><span class="line"><span class="built_in">one_button</span>(VK_RETURN);</span><br><span class="line"><span class="built_in">one_button</span>(VK_ESCAPE);</span><br><span class="line"><span class="built_in">one_button</span>(VK_TAB);</span><br><span class="line"><span class="built_in">one_button</span>(VK_TAB);</span><br><span class="line"><span class="built_in">one_button</span>(VK_DOWN);</span><br><span class="line"><span class="built_in">one_button</span>(VK_RETURN);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//HWND hwnd;</span></span><br><span class="line"><span class="comment">//hwnd = FindWindow(NULL, L&quot;woc&quot;);//获取窗口句柄</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; 10; i++) &#123;</span></span><br><span class="line"><span class="comment">//SendMessage(hwnd, WM_PASTE, 0, 0);//向窗口发送操作指令，WM_PASTE复制</span></span><br><span class="line"><span class="comment">//SendMessage(hwnd, WM_KEYDOWN, VK_RETURN, 0);//按下回车键</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">HWND hwnd = <span class="built_in">FindWindow</span>(<span class="string">L&quot;TXGuiFoundation&quot;</span>, <span class="string">L&quot;同福客栈&quot;</span>);</span><br><span class="line"><span class="built_in">SetForegroundWindow</span>(hwnd);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line"><span class="built_in">two_button</span>(VK_CONTROL, <span class="string">&#x27;V&#x27;</span>);</span><br><span class="line"><span class="built_in">one_button</span>(VK_RETURN);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -C++ -demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C++ -消息连发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>d2l</title>
      <link href="/2023/05/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/05/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>李沐动手学<a href="https://www.bilibili.com/video/BV1eK4y1U7Qy/?p=3&spm_id_from=pageDriver&vd_source=aa67ec1c08f743d3564f0d6bd14952f0">深度学习</a>，学习过程中遇到的知识点。</p><span id="more"></span><p><strong>梯度</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x.requires_grad_(<span class="literal">True</span>)  <span class="comment"># 等价于x=torch.arange(4.0,requires_grad=True),创建梯度存储</span></span><br><span class="line">.backward()</span><br><span class="line">x.grad.zero_()<span class="comment">#清空梯度</span></span><br></pre></td></tr></table></figure><h2 id="1-预备知识"><a href="#1-预备知识" class="headerlink" title="1.预备知识"></a>1.预备知识</h2><h3 id="1-1数据操作"><a href="#1-1数据操作" class="headerlink" title="1.1数据操作"></a>1.1数据操作</h3><h3 id="1-2数据预处理"><a href="#1-2数据预处理" class="headerlink" title="1.2数据预处理"></a>1.2数据预处理</h3><h3 id="1-3线性代数"><a href="#1-3线性代数" class="headerlink" title="1.3线性代数"></a>1.3线性代数</h3><h3 id="1-4矩阵计算"><a href="#1-4矩阵计算" class="headerlink" title="1.4矩阵计算"></a>1.4矩阵计算</h3><p><img src="1684992314392.png" alt="1684992314392"></p><p><img src="1684992720186.png" alt="1684992720186"></p>]]></content>
      
      
      <categories>
          
          <category> -教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -torch -DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>anaconda</title>
      <link href="/2023/05/10/%E6%95%99%E7%A8%8B/Anaconda%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/05/10/%E6%95%99%E7%A8%8B/Anaconda%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>Anaconda常见命令的使用！</p><span id="more"></span><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p><a href="https://docs.anaconda.com/anaconda/install/windows/">Anaconda官网</a>下载，安装一直默认。</p><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">1.验证是否安装</span><br><span class="line">conda --version</span><br><span class="line">2.更新至最新</span><br><span class="line">conda update conda</span><br><span class="line">3.查看帮助</span><br><span class="line">conda --<span class="built_in">help</span></span><br><span class="line">4.卸载</span><br><span class="line">控制面板 → 添加或删除程序 → 选择“Python X.X (Anaconda)” → 点击“删除程序”</span><br><span class="line"></span><br><span class="line">5.创建环境</span><br><span class="line">conda create -n python3 python=3.7 numpy pandas创建一个名为“python3”的环境，环境中安装版本为3.7的python，同时也安装了numpy和pandas。</span><br><span class="line">6.激活环境</span><br><span class="line">activate &lt;env_name&gt;</span><br><span class="line">7.显示已经创建的环境</span><br><span class="line">conda info -e</span><br><span class="line">8.复制环境</span><br><span class="line">conda create --name &lt;new_env_name&gt; --<span class="built_in">clone</span> &lt;copied_env_name&gt;</span><br><span class="line">9.删除环境</span><br><span class="line">conda remove --name &lt;env_name&gt; --all</span><br><span class="line">10.在指定环境中安装包</span><br><span class="line">conda install --name &lt;env_name&gt; &lt;package_name&gt;</span><br><span class="line">例如： conda install --name python2 pandas 即在名为“python2”的环境中安装pandas包。</span><br><span class="line">11.当前环境中安装包</span><br><span class="line">conda install &lt;package_name&gt;</span><br><span class="line">conda install pandas 即在当前环境中安装pandas包。</span><br><span class="line">也可以激活环境后，使用pip安装包</span><br><span class="line">12.卸载制定环境中的包</span><br><span class="line">conda remove --name &lt;env_name&gt; &lt;package_name&gt;</span><br><span class="line">13.更新所有包</span><br><span class="line">conda update --all</span><br><span class="line">14.导出环境</span><br><span class="line">conda <span class="built_in">env</span> <span class="built_in">export</span> &gt; environment.yaml</span><br><span class="line">15.利用环境文件创建环境</span><br><span class="line">conda <span class="built_in">env</span> create -f /path/environment.yaml</span><br><span class="line">16.利用环境文件更新另一个环境</span><br><span class="line">conda <span class="built_in">env</span> update -f=/path/environment.yaml</span><br><span class="line">17.退出激活的环境</span><br><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><h2 id="3-jupyter-notebook中使用anaconda创建的环境"><a href="#3-jupyter-notebook中使用anaconda创建的环境" class="headerlink" title="3. jupyter notebook中使用anaconda创建的环境"></a>3. jupyter notebook中使用anaconda创建的环境</h2><p>在jupyter notebook中使用anaconda创建的环境，先使用anaconda创建一个环境，然后激活环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">***先要激活需要添加的环境***</span><br><span class="line">activate env_name</span><br><span class="line">1.安装这个</span><br><span class="line">pip install ipykernel ipython</span><br><span class="line">2.配置到jupyter notebook</span><br><span class="line">ipython kernel install --user --name env_name</span><br><span class="line">3.删除添加的环境</span><br><span class="line">jupyter kernelspec remove env_name</span><br></pre></td></tr></table></figure><h2 id="4-导入导出conda虚拟环境的依赖包"><a href="#4-导入导出conda虚拟环境的依赖包" class="headerlink" title="4.导入导出conda虚拟环境的依赖包"></a>4.导入导出conda虚拟环境的依赖包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">activate &lt;envname&gt;</span><br><span class="line">conda env export &gt; environment.yaml # .yaml格式可以改</span><br><span class="line">conda env create -f environment.yaml</span><br><span class="line"></span><br><span class="line"># 导出位置 C:/USERS/用户名/生成的名字</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -Anaconda -python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pthon_leran</title>
      <link href="/2023/04/26/python/Python%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/04/26/python/Python%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>没有系统学习python，记录使用过程中遇到的小知识点。</p><p>跟着b站up主<a href="https://space.bilibili.com/1803865534/channel/collectiondetail?sid=231264&ctype=0">小飞有点东西</a>学习python。</p><span id="more"></span><h2 id="py"><a href="#py" class="headerlink" title="py"></a>py</h2><h3 id="1-使用方法"><a href="#1-使用方法" class="headerlink" title="1.使用方法"></a>1.使用方法</h3><p>查看一个方法的使用：</p><ul><li>关注输入输出类型</li><li>看官方文档&gt;大于百度</li><li>查看需要的参数</li></ul><p>不知道返回类型时，可以通过debug，或者print(type())</p><p>vscod使用conda环境，ctrl shift p， 输入Select Interpreter ,然后选择对应虚拟环境</p><h3 id="2-pycharm"><a href="#2-pycharm" class="headerlink" title="2.pycharm"></a>2.pycharm</h3><p>1.选中一个变量名，按alt+j自动选中后续，一键修改</p><h3 id="2-python类"><a href="#2-python类" class="headerlink" title="2.python类"></a>2.python类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#__init__相当于构造函数，实例化时会默认执行</span></span><br><span class="line"><span class="comment">#self相当于this</span></span><br><span class="line"><span class="comment">#__call__调用对象时默认函数，可以不用通过class.function调用</span></span><br><span class="line"><span class="comment">#子类__init__中使用super().__int__()，首先执行父类的__init__,然后接自定义操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__int__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="built_in">super</span>().__int__()</span><br><span class="line">    ···</span><br><span class="line">    0011 <span class="number">1111</span> 0111 <span class="number">1101</span></span><br></pre></td></tr></table></figure><h3 id="3-compose"><a href="#3-compose" class="headerlink" title="3.compose"></a>3.compose</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种直接赋值，第二种缩放</span></span><br><span class="line">trans_resize = transforms.Resize((<span class="number">512</span>, <span class="number">512</span>))</span><br><span class="line">trans_resize1 = transforms.Resize(<span class="number">200</span>)</span><br><span class="line"><span class="comment"># compose相当于组合，前一个函数的输出与后一个函数的输入必须相同</span></span><br><span class="line"><span class="comment"># 等价于  temp = trans_resize1(img)</span></span><br><span class="line"><span class="comment">#        img_resize = tensor(temp)</span></span><br><span class="line">trans_compose = transforms.Compose([trans_resize1,tensor])</span><br><span class="line">img_resize = trans_compose(img)</span><br></pre></td></tr></table></figure><h3 id="4-print"><a href="#4-print" class="headerlink" title="4.print"></a>4.print</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不换行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>*<span class="subst">&#123;j+<span class="number">1</span>&#125;</span>=<span class="subst">&#123;i*(j+<span class="number">1</span>)&#125;</span>&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 输出颜色格式设置</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">显示方式;前景颜色;背景颜色，这3个参数都为可选参数，选择自己需要的即可，而且顺序不是固定的，但建</span></span><br><span class="line"><span class="string">议按照默认顺序书写，结尾的\033[0m一定要有，不然会影响之后的打印。</span></span><br><span class="line"><span class="string">注：也可以在input()的提示性输出中使用</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\033[显示方式;前景颜色;背景颜色m......\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\033[33m输入有误，请重新输入！\033[0m&quot;</span>) <span class="comment"># 黄色字体</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\033[31;43m输入有误，请重新输入！\033[0m&quot;</span>) <span class="comment"># 红字黄底</span></span><br></pre></td></tr></table></figure><p><strong>显示方式</strong></p><table><thead><tr><th>意义</th><th></th></tr></thead><tbody><tr><td>默认</td><td>0</td></tr><tr><td>高亮显示</td><td>1</td></tr><tr><td>下划线</td><td>4</td></tr><tr><td>闪烁</td><td>5</td></tr><tr><td>反白显示</td><td>7</td></tr><tr><td>不可见</td><td>8</td></tr></tbody></table><p><strong>颜色</strong></p><table><thead><tr><th>颜色</th><th>前景色</th><th>背景色</th></tr></thead><tbody><tr><td>黑色</td><td>30</td><td>40</td></tr><tr><td>红色</td><td>31</td><td>41</td></tr><tr><td>绿色</td><td>32</td><td>42</td></tr><tr><td>黄色</td><td>33</td><td>43</td></tr><tr><td>蓝色</td><td>34</td><td>44</td></tr><tr><td>紫红色</td><td>35</td><td>45</td></tr><tr><td>青蓝色</td><td>36</td><td>46</td></tr><tr><td>白色</td><td>37</td><td>47</td></tr></tbody></table><h3 id="5-编码问题"><a href="#5-编码问题" class="headerlink" title="5.编码问题"></a><strong>5.编码问</strong>题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:gbk</span></span><br><span class="line"><span class="comment">#(带#)表示python解释器以gbk编码读取文件，读写格式一致才不会乱码</span></span><br><span class="line"><span class="comment"># 注释</span></span><br><span class="line">a=<span class="string">u&#x27;人&#x27;</span><span class="comment">#强制Unicode编码</span></span><br><span class="line">res=a.encode(<span class="string">&#x27;gbk&#x27;</span>)<span class="comment">#encode 将r通过gbk编码成二进制</span></span><br><span class="line"><span class="built_in">print</span>(res,<span class="built_in">type</span>(res))</span><br><span class="line"><span class="built_in">print</span>(res.decode(<span class="string">&#x27;gbk&#x27;</span>))<span class="comment">#将二进制通过gbk解码</span></span><br></pre></td></tr></table></figure><h3 id="6-python转义字符"><a href="#6-python转义字符" class="headerlink" title="6.python转义字符"></a>6.python转义字符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">字符串前加r  防止被转义，比如路径的\，可以加r解决</span><br><span class="line"><span class="comment"># \续行符 \\反斜杠 \&#x27;单引号 \&quot;双引号 \000空 \f换页\yyy(y是八进制数,\110代表H)</span></span><br><span class="line"><span class="comment"># \a响铃 \b退格一个字符 \n换行 \v纵向制表符 \t横向制表符 \r回车</span></span><br><span class="line"><span class="comment"># \xyy  \x开头  yy16进制的字符</span></span><br></pre></td></tr></table></figure><h3 id="7-文件操作"><a href="#7-文件操作" class="headerlink" title="7.文件操作"></a>7.文件操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">r读取不能写入，a+读取，写入光标在开头，如果文件不存在报错</span></span><br><span class="line"><span class="string">    w写入，不能读取，w+写入，读取光标在最后,注意w w+都会清空已存在文件，不存在则新建</span></span><br><span class="line"><span class="string">    a在文件末尾写入，不存在新建 r+末尾写入，读取光标在最后</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    写内容的模式,t:读写都是以字符串(Unicode),指定参数encoding编码成什么格式</span></span><br><span class="line"><span class="string">    b:二进制模式(图片 视频)S</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    seek移动文件光标位置，f.seek(offset, whence),f指的是file，offset偏移字符，whence,0开头，1当前，2末尾</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    select_action = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;1--登录\t2--注册\n&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> select_action==<span class="number">1</span>:</span><br><span class="line">        log_num = <span class="number">4</span></span><br><span class="line">        <span class="keyword">while</span> log_num:</span><br><span class="line">            username = <span class="built_in">input</span>(<span class="string">&#x27;请输入账号:&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">            password = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码:&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;C:\Users\yjt\Desktop\1.txt&#x27;</span>, mode=<span class="string">&#x27;rt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">                    line=line.strip()</span><br><span class="line">                    name, pword = line.split(<span class="string">&#x27;----&#x27;</span>)</span><br><span class="line">                    <span class="keyword">if</span> name == username <span class="keyword">and</span> pword == password:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&#x27;登录成功!&#x27;</span>)</span><br><span class="line">                        log_num=<span class="number">0</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    log_num -= <span class="number">1</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;账号或密码错误，剩余登录&#123;&#125;次数&#x27;</span>.<span class="built_in">format</span>(log_num))</span><br><span class="line">    <span class="keyword">if</span> select_action==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            username = <span class="built_in">input</span>(<span class="string">&#x27;请输入账号:&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">            password = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码:&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;C:\Users\yjt\Desktop\1.txt&#x27;</span>, mode=<span class="string">&#x27;a+t&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.seek(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">                    line=line.strip()</span><br><span class="line">                    name, pword = line.split(<span class="string">&#x27;----&#x27;</span>)</span><br><span class="line">                    <span class="keyword">if</span> name == username:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&#x27;用户名已被注册,请重新输入&#x27;</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    f.write(<span class="string">&#x27;&#123;&#125;----&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(username, password))</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 文本修改的两种方式</span></span><br><span class="line"><span class="string"># 1. 通过read全部读入修改写入(文本编辑器)</span></span><br><span class="line"><span class="string"># 2. 一行一行读入修改，写入新文件，删除源文件，修改新文件名字</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;C:\Users\yjt\Desktop\1.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">    new_data = data.replace(<span class="string">&#x27;bbbb&#x27;</span>,<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;C:\Users\yjt\Desktop\1.txt&#x27;</span>,mode=<span class="string">&#x27;wt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    f.write(new_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;C:\Users\yjt\Desktop\1.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f1,\</span><br><span class="line"><span class="built_in">open</span>(<span class="string">r&#x27;C:\Users\yjt\Desktop\1.txt.swap&#x27;</span>,mode=<span class="string">&#x27;wt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f2:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f1:</span><br><span class="line">        new_line=line.replace(<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;bbbb&quot;</span>)</span><br><span class="line">        f2.write(new_line)</span><br><span class="line">os.remove(<span class="string">r&#x27;C:\Users\yjt\Desktop\1.txt&#x27;</span>)</span><br><span class="line">os.rename(<span class="string">r&#x27;C:\Users\yjt\Desktop\1.txt.swap&#x27;</span>,<span class="string">r&#x27;C:\Users\yjt\Desktop\1.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="8-lambda表达式"><a href="#8-lambda表达式" class="headerlink" title="8.lambda表达式"></a>8.lambda表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">res=(<span class="keyword">lambda</span> x,y=<span class="number">1</span>:x+y)(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(res)<span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">r=&#123;</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>:<span class="number">100</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>:<span class="number">201</span>,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span>:<span class="number">301</span>,</span><br><span class="line">    <span class="string">&#x27;d&#x27;</span>:<span class="number">200</span>,</span><br><span class="line">    <span class="string">&#x27;e&#x27;</span>:<span class="number">301</span>,</span><br><span class="line">    <span class="string">&#x27;f&#x27;</span>:<span class="number">111</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(r))<span class="comment"># max返回key字符最大</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(r,key=<span class="keyword">lambda</span> k:r[k]))<span class="comment"># 使用value排序</span></span><br><span class="line"></span><br><span class="line">l=[<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>]</span><br><span class="line">l.sort(reverse=<span class="literal">True</span>)<span class="comment">#  默认false升序</span></span><br><span class="line">l=[(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">4</span>),(<span class="number">2</span>,<span class="number">1</span>),(<span class="number">4</span>,<span class="number">3</span>)]</span><br><span class="line">l.sort(key=<span class="keyword">lambda</span> item:item[<span class="number">1</span>])<span class="comment"># 使用列表内元组的第二个值排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sort 列表排序，sorted所有可迭代对象</span></span><br><span class="line"><span class="comment"># sort会改变原来的列表，sorted不会改变可迭代对象，并返回一个新列表</span></span><br><span class="line"></span><br><span class="line">l=[<span class="string">&#x27;康师傅&#x27;</span>,<span class="string">&#x27;同一&#x27;</span>,<span class="string">&#x27;大今野&#x27;</span>,<span class="string">&#x27;白象&#x27;</span>]</span><br><span class="line">new_l = (name+<span class="string">&#x27;老坛&#x27;</span> <span class="keyword">for</span> name <span class="keyword">in</span> l)<span class="comment"># 列表生成器</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">next</span>(new_l))</span><br><span class="line">    </span><br><span class="line">res=<span class="built_in">map</span>(<span class="keyword">lambda</span> name:name+<span class="string">&#x27;酸菜&#x27;</span>,l)<span class="comment"># map映射</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">next</span>(res))</span><br></pre></td></tr></table></figure><h3 id="9-类型提示"><a href="#9-类型提示" class="headerlink" title="9.类型提示"></a>9.类型提示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># py 解释性强类型动态</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">name: <span class="built_in">str</span>, age: <span class="built_in">int</span> = <span class="number">18</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    <span class="built_in">print</span>(age)</span><br><span class="line">    <span class="keyword">return</span> age</span><br><span class="line">func(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(func.__annotations__)<span class="comment"># 查看类型提示</span></span><br></pre></td></tr></table></figure><h3 id="10-包"><a href="#10-包" class="headerlink" title="10.包"></a>10.包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个文件作为包导入时__name__属性为model，作为执行文件时__name__为main</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入包时，会执行一遍文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找顺序：1.内存 2.硬盘（sys.path里面的路径，可以将存放模块的路径append进sysy.path）</span></span><br><span class="line">sys.path <span class="comment"># 存放1当前执行文件路径，2项目路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 包是一个包含__init__的文件夹，__init__中通过绝对导入对外的全局变量、函数、类等</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过from ··· import ··· 导入的变量只与定义有关，在源文件中修改了需要重新导入</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在.的左边是包</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1.新建一个带__init__.py的文件夹</span></span><br><span class="line"><span class="string">2.__init__.py写入:</span></span><br><span class="line"><span class="string">from pack.chat import chat_func,x #绝对导入，pack就是包名，chat是里面的模块py文件，chat_func,x是模块中的全局变量和函数</span></span><br><span class="line"><span class="string">from .chat import chat_func #相对导入，同级使用.  上级使用..</span></span><br><span class="line"><span class="string">3.创建模块chat.py</span></span><br><span class="line"><span class="string">x=100</span></span><br><span class="line"><span class="string">def chat_func():</span></span><br><span class="line"><span class="string">    print(&#x27;chat测试&#x27;)</span></span><br><span class="line"><span class="string">4.在需要用的地方# 注意包需要通过sys.path找到才能import</span></span><br><span class="line"><span class="string">from pack import x,chat_func</span></span><br><span class="line"><span class="string">chat_func()</span></span><br><span class="line"><span class="string">print(x)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="11-目录结构"><a href="#11-目录结构" class="headerlink" title="11.目录结构"></a>11.目录结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">project</span></span><br><span class="line"><span class="string">    api   </span></span><br><span class="line"><span class="string">    bin              启动文件，安装部署打包的脚本等</span></span><br><span class="line"><span class="string">        run.py</span></span><br><span class="line"><span class="string">        setup.py</span></span><br><span class="line"><span class="string">    conf             配置文件</span></span><br><span class="line"><span class="string">    core             核心代码</span></span><br><span class="line"><span class="string">    db               数据库处理代码</span></span><br><span class="line"><span class="string">    lib              常用模块</span></span><br><span class="line"><span class="string">    log              日志</span></span><br><span class="line"><span class="string">    requirements.txt 环境</span></span><br><span class="line"><span class="string">    readme.md        项目介绍说明</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目将项目根目录添加进sys.path</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    __file__获取当前文件的绝对路径</span></span><br><span class="line"><span class="string">    os.path.dirname(),获取路径的父目录</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    时间格式化    time.strftime(&#x27;&amp;Y-%m-%d %H:%M:%S&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd中敲python首先在当前文件夹下找这个指令，没有就会去环境变量中从上往下找，所以多版本python可以通过分别在不同文件夹下，复制python.exe文件并重新命名，在分别将不同的目录添加到环境变量区分。</span><br><span class="line">代码没有问题的话，不用区分文件的后缀名，例如.txt和.py等效。</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>id输出内存的映射，不是实际的堆内存地址</p><p>python解释器带小整数池(-5~256),这些值不在重新开辟内存，字符串也有</p><p>type输出变量的类型</p><p>is判断两个变量的内存地址是否相同</p><p>python没有常量，约定变量名全大写为常量(但还是可变)</p><p>‘’,””,等效，””””””,’’’’’’没有左值时，是多行注释，a&#x3D;”””aaaa”””定义字符串</p><p>python单引号或双引号是成对出现的，但是区分’”,转义\</p><p>字符串与字符串可直接+（拼接），也可以*(代表重复多少遍)</p><p>列表[],取值[索引]，0,1,2是正序取1,2,3个元素，-1，-2，-3是逆序取倒数第1 2 3个元素</p><p>字典{},key:value,取值[key]，列表 字典可以相互嵌套</p><p>bool类型，0 None ‘’ [] {}为FALSE。其他都为true</p><p><img src="1683881735413.png" alt="1683881735413"></p><p>python input把接收到的所有信息保存为str</p><p>python 强制类型转换 int(value) 只能转换纯数字，12.3转换不了</p><p>元组，通过()定义  内存地址不可变，但是嵌套可变类型中的数据内修改</p><p>字典 {} dict({}) dict{a&#x3D;1,b&#x3D;2}，</p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指向同一块内存，id输出内存的映射，不是实际的堆内存地址</span></span><br><span class="line"><span class="comment"># python解释器带小整数池(-5~256),为这些值不在重新开辟内存，字符串也有</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">b = a</span><br><span class="line">c = a</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(c))</span><br><span class="line"><span class="comment"># 输出变量的类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(c))</span><br><span class="line"><span class="comment"># is判断两个变量的内存地址是否相同</span></span><br><span class="line"><span class="comment"># 如果变量处于优化池则一直相同</span></span><br><span class="line"><span class="comment"># ==判断变量的值是否相同</span></span><br><span class="line"><span class="comment"># is为true，==结果必为true</span></span><br><span class="line">b = <span class="number">123</span></span><br><span class="line">c = b</span><br><span class="line"><span class="built_in">print</span>(b,c)</span><br><span class="line"><span class="built_in">print</span>(b <span class="keyword">is</span> c)</span><br><span class="line"><span class="built_in">print</span>(b == c)</span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;my name is&quot;张三&quot;&#x27;</span></span><br><span class="line">name = <span class="string">&#x27;my name is\&#x27;张三\&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">l = [<span class="number">73</span>,<span class="number">3.5</span>,<span class="string">&#x27;张三&#x27;</span>,[<span class="string">&#x27;1&#x27;</span>,<span class="number">22</span>]]</span><br><span class="line"><span class="built_in">print</span>(l[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(l[<span class="number">3</span>][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">person = [</span><br><span class="line">    [<span class="string">&#x27;张三&#x27;</span>,<span class="number">18</span>,<span class="number">10000</span>,[<span class="string">&#x27;吃&#x27;</span>,<span class="string">&#x27;喝&#x27;</span>,<span class="string">&#x27;嫖&#x27;</span>]]，</span><br><span class="line">    [<span class="string">&#x27;李四&#x27;</span>,<span class="number">19</span>,<span class="number">9000</span>,[<span class="string">&#x27;吃1&#x27;</span>,<span class="string">&#x27;喝1&#x27;</span>,<span class="string">&#x27;嫖1&#x27;</span>]],</span><br><span class="line">    [<span class="string">&#x27;王五&#x27;</span>,<span class="number">20</span>,<span class="number">8000</span>,[<span class="string">&#x27;吃2&#x27;</span>,<span class="string">&#x27;喝2&#x27;</span>,<span class="string">&#x27;嫖2&#x27;</span>]]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.%</span></span><br><span class="line">iffo = <span class="string">&#x27;my name is %s, I am from %s.&#x27;</span>%(value1,value2) <span class="comment"># 可以是值，也能是变量,位置一一对应</span></span><br><span class="line">iffo = <span class="string">&#x27;my name is %(name)s, I am from %(home)s.&#x27;</span>%(<span class="string">&#x27;home&#x27;</span>:value1,<span class="string">&#x27;name&#x27;</span>:value2)<span class="comment"># key值对应</span></span><br><span class="line">iffo = <span class="string">&#x27;my age is %d&#x27;</span> <span class="comment"># %d只能接收整型，%s所有类型 当做str处理</span></span><br><span class="line"><span class="comment"># 2.format</span></span><br><span class="line"><span class="comment"># join</span></span><br><span class="line"><span class="comment"># +</span></span><br></pre></td></tr></table></figure><p><img src="1685094915241.png" alt="1685094915241"></p><h2 id="py打包"><a href="#py打包" class="headerlink" title="py打包"></a>py打包</h2><p>pycharm终端启用环境的方法：</p><p><img src="1685686395662.png" alt="1685686395662"></p><p>终端-&gt;选择cmd-&gt;activate <env_name>（使用的conda）</env_name></p><ul><li><p>下载打包需要的包</p><p>  ​pip install pyinstaller</p></li><li><p>在当前目录下启动环境</p></li><li><p>pyinstaller -F main.py(main.py为程序执行文件)</p></li></ul><p>执行完毕会发现生成了 3 个文件夹：dist，build，samp.spec文件</p><p>在dist里面我们可以看到生成了一个exe可执行文件。</p><p>要把生成的exe文件从dist文件中移出来，和原主文件在同路径下，保持资源文件的相对路径</p><p><strong>bug</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这样会引起程序运行后闪退，使用下面导包的方式，原因未知</span></span><br><span class="line"><span class="keyword">from</span> PyQt5.Qt <span class="keyword">import</span> QWidget,QLabel</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QFont</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QLabel</span><br></pre></td></tr></table></figure><h2 id="py进程"><a href="#py进程" class="headerlink" title="py进程"></a>py进程</h2><h3 id="1-py执行cmd命令"><a href="#1-py执行cmd命令" class="headerlink" title="1.py执行cmd命令"></a>1.py执行cmd命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.Qt <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> call</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">main_widget</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        btn = QPushButton(<span class="string">&#x27;Click me&#x27;</span>, self)</span><br><span class="line">        btn.move(<span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">        btn.clicked.connect(self.run_script)</span><br><span class="line"></span><br><span class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">250</span>, <span class="number">150</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;Run script on button click&#x27;</span>)</span><br><span class="line">        self.show()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_script</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">#call([&#x27;python&#x27;,&#x27;./main.py&#x27;])</span></span><br><span class="line">        <span class="comment"># popen不等待子线程 run call等待子线程</span></span><br><span class="line">        <span class="comment">#subprocess</span></span><br><span class="line">        os.system(<span class="string">&#x27;main.exe&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = main_widget()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="2-进程通信-管道"><a href="#2-进程通信-管道" class="headerlink" title="2.进程通信-管道"></a>2.进程通信-管道</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">title = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_listener</span>():</span><br><span class="line">    <span class="keyword">global</span> title</span><br><span class="line">    <span class="comment"># 如果您还未安装you-get脚手架 请先执行 pip install you-get 或 pip3 install you-get</span></span><br><span class="line">    <span class="comment"># 尝试直接在 Terminal 中运行 `you-get [url]` 查看区别</span></span><br><span class="line">    <span class="comment"># you-get 将嗅探目标链接下的影视资源对象，并保存至当前目录下</span></span><br><span class="line">    cmd = <span class="string">&quot;you-get https://www.bilibili.com/video/BV1Yv41147QK&quot;</span>.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    p = subprocess.Popen(</span><br><span class="line">        cmd,</span><br><span class="line">        stdin=subprocess.PIPE,</span><br><span class="line">        stdout=subprocess.PIPE,</span><br><span class="line">        stderr=subprocess.STDOUT,</span><br><span class="line">        universal_newlines=<span class="literal">True</span>,</span><br><span class="line">        encoding=<span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">        bufsize=<span class="number">1</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">while</span> subprocess.Popen.poll(p) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        stream = p.stdout.readline()<span class="comment"># 没有返回值会阻塞线程，这儿是while循环 不影响</span></span><br><span class="line">        <span class="built_in">print</span>(stream)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 仅做演示，首次下载时捕获视频文件名</span></span><br><span class="line">        <span class="keyword">if</span> title == <span class="string">&quot;&quot;</span> <span class="keyword">and</span> stream.startswith(<span class="string">&quot;Downloading&quot;</span>):</span><br><span class="line">            title = stream.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            <span class="built_in">print</span>(title)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>():</span><br><span class="line">    _listener()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 仅作演示，自动打开下载好的视频</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.startfile(<span class="string">f&#x27;<span class="subst">&#123;title&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> (FileNotFoundError, FileExistsError):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    demo()</span><br></pre></td></tr></table></figure><h3 id="3-py启动进程"><a href="#3-py启动进程" class="headerlink" title="3.py启动进程"></a>3.py启动进程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#         向进程传入函数</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work</span>(<span class="params">name</span>):  <span class="comment">#定义一个函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;task &lt;%s&gt; is runing&#x27;</span> %name)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;task &lt;%s&gt; is aaaaa&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p1=Process(target=work,args=(<span class="string">&#x27;yxwang&#x27;</span>,)) <span class="comment">#产生一个进程对象，target后边加上要执行的函数名称。这里args跟一个元组</span></span><br><span class="line">    p2=Process(target=work,kwargs=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;user01&#x27;</span>&#125;)  <span class="comment">#也可以用kwargs跟字典的方式。</span></span><br><span class="line">    p1.start()  <span class="comment">#执行。 等于在当前程序下又运行了一个子进程。</span></span><br><span class="line">    p2.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;qqqqqqqqqq&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#        重写进程的run函数</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myprocess</span>(<span class="title class_ inherited__">Process</span>):  <span class="comment">#继承Process类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()  <span class="comment">#调用父类中的方法。</span></span><br><span class="line">        self.name=name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):   <span class="comment">#必须要有个run的方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;task &lt;%s&gt; is runing&#x27;</span> % self.name)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;task &lt;%s&gt; is aaaaa&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p=Myprocess(<span class="string">&#x27;egon&#x27;</span>)  <span class="comment">#得到一个对象</span></span><br><span class="line">    p.start()  <span class="comment">#运行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;TTTTTT&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="py-exe传入运行参数"><a href="#py-exe传入运行参数" class="headerlink" title="py exe传入运行参数"></a>py exe传入运行参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">subprocess.Popen(<span class="string">&#x27;test.exe --weights &#123;&#125; --cfg &#123;&#125; --data &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(config_t[<span class="string">&#x27;weights&#x27;</span>],config_t[<span class="string">&#x27;cfg&#x27;</span>],config_t[<span class="string">&#x27;data&#x27;</span>]))</span><br><span class="line"><span class="keyword">import</span> argparse </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">opt</span>):</span><br><span class="line">    <span class="comment"># Checks</span></span><br><span class="line">    <span class="built_in">print</span>(opt.weights)</span><br><span class="line">    <span class="built_in">print</span>(opt.cfg)</span><br><span class="line">    <span class="built_in">print</span>(opt.data)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_opt</span>(<span class="params">known=<span class="literal">False</span></span>):</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--weights&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&#x27;aaaa&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;initial weights path&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--cfg&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&#x27;bbb&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;model.yaml path&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--data&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&#x27;ccc&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;dataset.yaml path&#x27;</span>)</span><br><span class="line">    opt = parser.parse_known_args()[<span class="number">0</span>] <span class="keyword">if</span> known <span class="keyword">else</span> parser.parse_args()</span><br><span class="line">    <span class="keyword">return</span> opt</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    opt = parse_opt()</span><br><span class="line">    main(opt)</span><br></pre></td></tr></table></figure><h2 id="py-qt"><a href="#py-qt" class="headerlink" title="py qt"></a>py qt</h2><h3 id="1-自定义信号"><a href="#1-自定义信号" class="headerlink" title="1.自定义信号"></a>1.自定义信号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">main_widget</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    signal_finish=pyqtSignal()<span class="comment"># 必须在__init__外，不然会报错，可以带参</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.signal_finish.connect(self.train_finish)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">train_finish</span>(<span class="params">self</span>):</span><br><span class="line">        ...<span class="comment"># 槽函数的实现</span></span><br><span class="line"><span class="comment"># 需要的位置 self.signal_finish.emit()</span></span><br></pre></td></tr></table></figure><h3 id="2-画图qchart"><a href="#2-画图qchart" class="headerlink" title="2.画图qchart"></a>2.画图qchart</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtChart <span class="keyword">import</span> QSplineSeries, QLineSeries, QChart, QChartView, QValueAxis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySplineWindow</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(MySplineWindow, self).__init__(parent)</span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;曲线图表演示&quot;</span>)</span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">        chart = QChart()</span><br><span class="line">        <span class="comment"># 设置布局、图、</span></span><br><span class="line">        chart.setMargins(QMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="comment"># 隐藏图例</span></span><br><span class="line">        chart.legend().hide()</span><br><span class="line">        <span class="comment"># 数据点</span></span><br><span class="line">        spline = QSplineSeries()</span><br><span class="line">        <span class="comment"># 也可以在后面需要的地方动态添加数据点进来</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            spline.append(i,<span class="built_in">round</span>(random.random()*<span class="number">100</span>))</span><br><span class="line">        <span class="comment"># 添加到图中</span></span><br><span class="line">        chart.addSeries(spline)</span><br><span class="line">        <span class="comment"># 坐标轴</span></span><br><span class="line">        axis_x = QValueAxis()</span><br><span class="line">        axis_x.setLabelFormat(<span class="string">&quot;%d&quot;</span>)</span><br><span class="line">        chart.addAxis(axis_x, Qt.AlignBottom)</span><br><span class="line">        axis_x.setRange(<span class="number">0</span>,<span class="number">20</span>)</span><br><span class="line">        axis_y = QValueAxis()</span><br><span class="line">        axis_y.setLabelFormat(<span class="string">&quot;%.5f&quot;</span>)</span><br><span class="line">        chart.addAxis(axis_y, Qt.AlignLeft)</span><br><span class="line">        axis_y.setRange(<span class="number">0</span>,<span class="number">100.0</span>)</span><br><span class="line">        <span class="comment">#添加坐标轴</span></span><br><span class="line">        spline.attachAxis(axis_y)</span><br><span class="line">        spline.attachAxis(axis_x)</span><br><span class="line"></span><br><span class="line">        chartView = QChartView()</span><br><span class="line">        chartView.setChart(chart)</span><br><span class="line">        chartView.setRenderHint(QPainter.Antialiasing)<span class="comment"># 设置反走样，平滑</span></span><br><span class="line"></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addWidget(chartView)</span><br><span class="line">        self.setLayout(vbox)</span><br><span class="line">        epoch=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>]</span><br><span class="line">        loss=[n+<span class="number">0.3</span> <span class="keyword">for</span> n <span class="keyword">in</span> epoch]</span><br><span class="line">        <span class="keyword">while</span> spline.__len__()&lt;epoch.__len__():</span><br><span class="line">            spline.append(epoch[<span class="built_in">len</span>(spline)],loss[<span class="built_in">len</span>(spline)])</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">len</span>(spline))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    win = MySplineWindow()</span><br><span class="line">    win.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="3-定时器qtimer"><a href="#3-定时器qtimer" class="headerlink" title="3.定时器qtimer"></a>3.定时器qtimer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QTimer</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget,QApplication</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">main_widget</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.ia=<span class="number">0</span></span><br><span class="line">        self.timera = QTimer(self)</span><br><span class="line">        self.timera.timeout.connect(self.running_state)</span><br><span class="line">        self.timera.start(<span class="number">2000</span>)  <span class="comment"># 启动</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">running_state</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.ia==<span class="number">3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;结束&#x27;</span>)</span><br><span class="line">            self.timera.stop()<span class="comment"># 暂停</span></span><br><span class="line">            self.timera.killTimer()<span class="comment"># 结束</span></span><br><span class="line">            self.start_timer()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;这是第\t<span class="subst">&#123;self.ia&#125;</span>次&#x27;</span>)</span><br><span class="line">        self.ia=self.ia+<span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_timer</span>(<span class="params">self</span>):</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        self.ia=<span class="number">0</span></span><br><span class="line">        self.timera.start(<span class="number">500</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w=main_widget()</span><br><span class="line">    app.exec_()</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        self.initUI()</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    def initUI(self):</span></span><br><span class="line"><span class="string">        timer = QTimer(self)</span></span><br><span class="line"><span class="string">        timer.timeout.connect(self.do_something)</span></span><br><span class="line"><span class="string">        timer.start(1000) # 启动</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        btn = QPushButton(&#x27;aaaa&#x27;,self)</span></span><br><span class="line"><span class="string">        btn1 = QPushButton(&#x27;bbbb&#x27;, self)</span></span><br><span class="line"><span class="string">        btn1.move(50,50)</span></span><br><span class="line"><span class="string">        # btn.clicked.connect(self.close)</span></span><br><span class="line"><span class="string">        btn.clicked.connect(timer.stop)# 停止</span></span><br><span class="line"><span class="string">        btn1.clicked.connect(timer.start)</span></span><br><span class="line"><span class="string">    def do_something(self):</span></span><br><span class="line"><span class="string">        print(&quot;Timer triggered!&quot;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="py-线程"><a href="#py-线程" class="headerlink" title="py 线程"></a>py 线程</h2><h3 id="1-控制线程"><a href="#1-控制线程" class="headerlink" title="1.控制线程"></a>1.控制线程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">a=<span class="literal">True</span><span class="comment">#  通过外部bool控制线程的停止</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aaa</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> a==<span class="literal">False</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;2222&#x27;</span>)</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">t = threading.Thread(target=aaa)</span><br><span class="line">t.setDaemon(<span class="literal">True</span>)</span><br><span class="line">t.start()</span><br><span class="line">time.sleep(<span class="number">6</span>)</span><br><span class="line">a=<span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;22&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="2-线程id"><a href="#2-线程id" class="headerlink" title="2.线程id"></a>2.线程id</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只有在线程里面才能获取线程</span></span><br><span class="line">my_thread_name = threading.current_thread().name  <span class="comment"># 获取当前线程名称</span></span><br><span class="line">my_thread_id = threading.current_thread().ident  <span class="comment"># 获取当前线程id</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前线程为：&#123;&#125;，线程id为：&#123;&#125;，所在进程为：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(my_thread_name, my_thread_id, os.getpid()))</span><br><span class="line"></span><br><span class="line">Thread.is_alive()<span class="comment">#方法可以返回线程是否还在运行。如果线程结束了，返回False；否则，返回True。</span></span><br></pre></td></tr></table></figure><h3 id="3-通过队列获取返回值"><a href="#3-通过队列获取返回值" class="headerlink" title="3.通过队列获取返回值"></a>3.通过队列获取返回值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading, queue, time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">worker</span>(<span class="params">num, q</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在执行第&#123;&#125;个任务&quot;</span>.<span class="built_in">format</span>(num))</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    q.put(<span class="string">&quot;第&#123;&#125;个任务完成&quot;</span>.<span class="built_in">format</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    q = queue.Queue()</span><br><span class="line"></span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        t = threading.Thread(target=worker, args=(i+<span class="number">1</span>, q))</span><br><span class="line">        t.start()</span><br><span class="line">        threads.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">        results.append(q.get())</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(results)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="4-通过线程池获取返回值"><a href="#4-通过线程池获取返回值" class="headerlink" title="4.通过线程池获取返回值"></a>4.通过线程池获取返回值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 定义获取线程return返回测试的方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action_a</span>(<span class="params"><span class="built_in">max</span></span>):</span><br><span class="line">    my_sum = <span class="built_in">max</span> + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> my_sum</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action_b</span>(<span class="params"><span class="built_in">max</span></span>):</span><br><span class="line">    my_sum = <span class="built_in">max</span> + <span class="number">100</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> my_sum</span><br><span class="line"><span class="comment"># 创建包含2个线程的线程池</span></span><br><span class="line">pool = ThreadPoolExecutor(max_workers=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 向线程池提交一个任务, 20和10会作为action_a/b()方法的参数</span></span><br><span class="line">future1 = pool.submit(action_a, <span class="number">20</span>)</span><br><span class="line">future2 = pool.submit(action_b, <span class="number">10</span>)</span><br><span class="line"><span class="comment"># 判断future1线程是否结束---返回False表示该线程未结束，True表示该线程已经结束</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;future1线程的状态：&quot;</span> + <span class="built_in">str</span>(future1.done()))  <span class="comment"># 此时future1线程已结束</span></span><br><span class="line"><span class="comment"># 判断future2线程是否结束</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;future2线程的状态：&quot;</span> + <span class="built_in">str</span>(future2.done()))  <span class="comment"># 此时future2线程未结束，因为休眠了3秒</span></span><br><span class="line"><span class="comment"># 查看future1代表的任务返回的结果，如果线程未运行完毕，会暂时阻塞，等待线程运行完毕后再执行、输出；</span></span><br><span class="line"><span class="built_in">print</span>(future1.result())  <span class="comment"># 此处会直接输出</span></span><br><span class="line"><span class="comment"># 查看future2代表的任务返回的结果</span></span><br><span class="line"><span class="built_in">print</span>(future2.result())  <span class="comment"># 此处会等待3秒，因为方法中休眠了3秒</span></span><br><span class="line"><span class="comment"># 关闭线程池</span></span><br><span class="line">pool.shutdown()</span><br></pre></td></tr></table></figure><h3 id="5-通过重写线程函数获取返回值"><a href="#5-通过重写线程函数获取返回值" class="headerlink" title="5.通过重写线程函数获取返回值"></a>5.通过重写线程函数获取返回值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个MyThread.py线程类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, func, args=(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyThread, self).__init__()</span><br><span class="line">        self.func = func</span><br><span class="line">        self.args = args</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># time.sleep(2)</span></span><br><span class="line">        self.result = self.func(*self.args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_result</span>(<span class="params">self</span>):</span><br><span class="line">        threading.Thread.start(self) <span class="comment"># 启动线程</span></span><br><span class="line">        threading.Thread.join(self)  <span class="comment"># 等待线程执行完毕</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.result</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取多线程return返回值的测试方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin</span>(<span class="params">number</span>):</span><br><span class="line">    uiu = number</span><br><span class="line">    uiu=uiu+<span class="number">50</span></span><br><span class="line">    <span class="keyword">return</span> uiu</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 创建四个线程</span></span><br><span class="line">    more_th1 = MyThread(admin, (<span class="number">5</span>,))</span><br><span class="line">    more_th2 = MyThread(admin, (<span class="number">10</span>,))</span><br><span class="line">    <span class="comment"># 输出线程执行方法后的的返回值</span></span><br><span class="line">    <span class="built_in">print</span>(more_th1.get_result())</span><br><span class="line">    <span class="built_in">print</span>(more_th2.get_result())</span><br></pre></td></tr></table></figure><h3 id="6-控制线程数量"><a href="#6-控制线程数量" class="headerlink" title="6.控制线程数量"></a>6.控制线程数量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制线程的最大数量为3个， with操作</span></span><br><span class="line">sem = threading.Semaphore(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gothread</span>():</span><br><span class="line">    <span class="keyword">with</span> sem:  <span class="comment"># 锁定线程的最大数量，with执行完自动释放</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="built_in">print</span>(threading.current_thread().ident, i)</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    threading.Thread(target=gothread).start()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#手动操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gothread</span>():</span><br><span class="line">    sem.acquire()<span class="comment"># 手动加入</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="built_in">print</span>(threading.current_thread().name, i)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    sem.release()<span class="comment"># 手动释放</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    threading.Thread(target=gothread).start()</span><br></pre></td></tr></table></figure><h2 id="py文件操作"><a href="#py文件操作" class="headerlink" title="py文件操作"></a>py文件操作</h2><h3 id="1-返回文件夹下最新文件或文件夹"><a href="#1-返回文件夹下最新文件或文件夹" class="headerlink" title="1.返回文件夹下最新文件或文件夹"></a>1.返回文件夹下最新文件或文件夹</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回文件夹下最新的文件名或文件夹名，文件夹下没有文件，返回空</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new_report</span>(<span class="params">test_report</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(test_report):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    lists = os.listdir(test_report)         <span class="comment"># 列出目录的下所有文件和文件夹保存到lists</span></span><br><span class="line">    lists.sort(key=<span class="keyword">lambda</span> fn: os.path.getmtime(test_report + <span class="string">&quot;/&quot;</span> + fn)) <span class="comment"># 按时间排序</span></span><br><span class="line">    file_new = os.path.join(test_report, lists[-<span class="number">1</span>])      <span class="comment"># 获取最新的文件保存到file_new</span></span><br><span class="line">    <span class="keyword">return</span> file_new</span><br></pre></td></tr></table></figure><h3 id="2-获取文件的属性"><a href="#2-获取文件的属性" class="headerlink" title="2.获取文件的属性"></a>2.获取文件的属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">statinfo = os.stat(path)</span><br><span class="line">mtime = statinfo.st_mtime</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;File modified time : &quot;</span>, mtime)</span><br></pre></td></tr></table></figure><h3 id="3-写入yaml"><a href="#3-写入yaml" class="headerlink" title="3.写入yaml"></a>3.写入yaml</h3><p><img src="1686125206710.png" alt="1686125206710"><img src="1686125232523.png" alt="1686125232523"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> ruamel.yaml</span><br><span class="line"><span class="keyword">from</span> ruamel.yaml.scalarstring <span class="keyword">import</span> SingleQuotedScalarString <span class="keyword">as</span> dq</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">L</span>(<span class="params">*l</span>):</span><br><span class="line">   ret = ruamel.yaml.comments.CommentedSeq(l)</span><br><span class="line">   ret.fa.set_flow_style()</span><br><span class="line">   <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">txt_file = <span class="built_in">open</span>(<span class="string">&#x27;D:\YOLOv5\yolov5-6.1\classes.txt&#x27;</span>)</span><br><span class="line">yaml = ruamel.yaml.YAML()</span><br><span class="line">classes_txt = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> txt_file.readlines():</span><br><span class="line">    line = line.rstrip()</span><br><span class="line">    classes_txt.append(line)</span><br><span class="line">txt_file.close()</span><br><span class="line">yaml.preserve_quotes=<span class="literal">True</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;D:\YOLOv5\yolov5-6.1\mydata.yaml&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = yaml.load(file)</span><br><span class="line">data[<span class="string">&quot;nc&quot;</span>] = <span class="built_in">len</span>(classes_txt)</span><br><span class="line"><span class="comment">#data[&quot;names&quot;] = L(dq(&#x27;&#123;&#125;&#x27;.format(classes_txt[0])),dq(&#x27;bbb&#x27;))</span></span><br><span class="line">a=ruamel.yaml.CommentedSeq()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(classes_txt)):</span><br><span class="line">    a.append(dq(classes_txt[i]))</span><br><span class="line">data[<span class="string">&#x27;names&#x27;</span>]=a</span><br><span class="line">yaml.default_flow_style=<span class="literal">True</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;D:\YOLOv5\yolov5-6.1\mydata.yaml&quot;</span>,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    yaml.dump(data,f)</span><br></pre></td></tr></table></figure><h3 id="4-读取excl表格指定行或列"><a href="#4-读取excl表格指定行或列" class="headerlink" title="4.读取excl表格指定行或列"></a>4.读取excl表格指定行或列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;D:\YOLOv5\yolov5-6.1\dist\exe\runs\train\exp7\results.csv&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, mode=<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file_read:</span><br><span class="line">    epoch = []</span><br><span class="line">    loss = []</span><br><span class="line">    csvread = csv.reader(file_read)</span><br><span class="line">    headers = <span class="built_in">next</span>(csvread)  <span class="comment"># 获取csv文件中的列名</span></span><br><span class="line">    content = headers.index(<span class="string">&#x27;               epoch&#x27;</span>)  <span class="comment"># 提取csv文件中的指定列名</span></span><br><span class="line">    content1 = headers.index(<span class="string">&#x27;      train/box_loss&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> csvread:  <span class="comment"># 打印指定列的内容</span></span><br><span class="line">        epoch.append(<span class="built_in">int</span>(row[content].strip()))</span><br><span class="line">        loss.append(<span class="built_in">float</span>(row[content1].strip()))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(epoch[<span class="number">0</span>]))</span><br><span class="line">    <span class="built_in">print</span>(loss)</span><br><span class="line">file_read.close()</span><br></pre></td></tr></table></figure><h3 id="4-获取指定文件夹下的文件"><a href="#4-获取指定文件夹下的文件" class="headerlink" title="4.获取指定文件夹下的文件"></a>4.获取指定文件夹下的文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path=<span class="string">r&#x27;D:\YOLOv5\yolov5-6.1\data\1&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):    <span class="comment"># 不存在返回false</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;文件或文件夹不存在！&#x27;</span>)</span><br><span class="line">    exit()</span><br><span class="line">files=os.listdir(path)</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    <span class="keyword">if</span> file.endswith(<span class="string">&#x27;.bmp&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(file)</span><br></pre></td></tr></table></figure><h2 id="py-tcp"><a href="#py-tcp" class="headerlink" title="py tcp"></a>py tcp</h2><h3 id="1-测试某个端口是否打开"><a href="#1-测试某个端口是否打开" class="headerlink" title="1.测试某个端口是否打开"></a>1.测试某个端口是否打开</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">创建一个socket tcp服务</span></span><br><span class="line"><span class="string">AF_INET使用IPV4</span></span><br><span class="line"><span class="string">SOCK_STREAM使用流套接字tcp，</span></span><br><span class="line"><span class="string">SOCK_DGRAM使用数据套接字udp</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">result = sock.connect_ex((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">4000</span>))</span><br><span class="line"><span class="keyword">if</span> result == <span class="number">0</span>:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;Port is open&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;Port is not open&quot;</span>)</span><br><span class="line">sock.close()</span><br></pre></td></tr></table></figure><h3 id="2-建立tcp连接"><a href="#2-建立tcp连接" class="headerlink" title="2.建立tcp连接"></a>2.建立tcp连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务器代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment"># 创建一个ipv4的tcp套接字</span></span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># 本地8888端口</span></span><br><span class="line">serveraddress =(<span class="string">&#x27;localhost&#x27;</span>,<span class="number">8888</span>)</span><br><span class="line"><span class="comment"># 绑定ip和端口</span></span><br><span class="line">sock.bind(serveraddress)</span><br><span class="line"><span class="comment"># 监听客户端连接.1是排队数量，如果排队大于1会报错</span></span><br><span class="line"><span class="comment"># socket允许的最大连接数为: n + 1，n就是listen的参数</span></span><br><span class="line"><span class="comment"># 服务器开了2个线程，那么socket允许的最大连接数就是: n + 2</span></span><br><span class="line">sock.listen(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#接受客户端连接</span></span><br><span class="line">clientsocket, clientaddress = sock.accept()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;客户端已连接:&#x27;</span>, clientaddress)</span><br><span class="line"><span class="comment">#接收客户端消息</span></span><br><span class="line">message = clientsocket.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;收到消息:&#x27;</span>, message.decode())<span class="comment"># decode 解码 默认 utf-8</span></span><br><span class="line"><span class="comment">#发送回复消息给客户端</span></span><br><span class="line">reply =<span class="string">&#x27;欢迎连接到服务器！&#x27;</span></span><br><span class="line">clientsocket.sendall(reply.encode())</span><br><span class="line"><span class="comment">#关闭连接</span></span><br><span class="line">clientsocket.close()</span><br><span class="line">sock.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端代码</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment">#创建Socket对象</span></span><br><span class="line">clientsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment">#连接服务器</span></span><br><span class="line">serveraddress =(<span class="string">&#x27;localhost&#x27;</span>,<span class="number">8888</span>)</span><br><span class="line">clientsocket.connect(serveraddress)</span><br><span class="line"><span class="comment">#发送消息给服务器</span></span><br><span class="line">message =<span class="string">&#x27;Hello, Server!&#x27;</span></span><br><span class="line">clientsocket.sendall(message.encode())<span class="comment"># 默认以utf-8编码发送数据</span></span><br><span class="line"><span class="comment">#接收服务器回复消息</span></span><br><span class="line">reply = clientsocket.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;收到回复:&#x27;</span>, reply.decode())</span><br><span class="line"><span class="comment">#关闭连接</span></span><br><span class="line">clientsocket.close()</span><br></pre></td></tr></table></figure><h2 id="py脚本"><a href="#py脚本" class="headerlink" title="py脚本"></a>py脚本</h2><h3 id="1-将标注文件中1类别的图片从数据集中提取出来"><a href="#1-将标注文件中1类别的图片从数据集中提取出来" class="headerlink" title="1.将标注文件中1类别的图片从数据集中提取出来"></a>1.将标注文件中1类别的图片从数据集中提取出来</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    init_path = <span class="string">r&quot;D:\1work\PU7\FAOI_Screw_Tool\darknet_Train\AI_Label_Tool_V1.0.3\新建文件夹&quot;</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">r&quot;D:\1work\PU7\FAOI_Screw_Tool\darknet_Train\AI_Label_Tool_V1.0.3\新建文件夹&quot;</span>):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(<span class="string">&quot;.txt&quot;</span>):</span><br><span class="line">                a=init_path+<span class="string">&#x27;\\&#x27;</span>+file</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(a, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">                    data_file = f.read()</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">in</span> data_file:</span><br><span class="line">                        img_file = a.replace(<span class="string">&#x27;.txt&#x27;</span>, <span class="string">&#x27;.bmp&#x27;</span>)</span><br><span class="line">                        new_img_file = img_file.rsplit(<span class="string">&#x27;\\&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">                        new_img_file1 = new_img_file[<span class="number">0</span>] + <span class="string">&#x27;\\1\\&#x27;</span> + new_img_file[<span class="number">1</span>]</span><br><span class="line">                        shutil.move(img_file, new_img_file1)</span><br></pre></td></tr></table></figure><h2 id="py递归"><a href="#py递归" class="headerlink" title="py递归"></a>py递归</h2><h3 id="1-修改编译器最大递归深度"><a href="#1-修改编译器最大递归深度" class="headerlink" title="1.修改编译器最大递归深度"></a>1.修改编译器最大递归深度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.getrecursionlimit())  <span class="comment"># 查看当前最大递归深度</span></span><br><span class="line">sys.setrecursionlimit(<span class="number">1500</span>) <span class="comment"># 修改最大递归深度</span></span><br></pre></td></tr></table></figure><h3 id="2-递归"><a href="#2-递归" class="headerlink" title="2.递归"></a>2.递归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_sum</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span>==i:</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> i+my_sum(i-<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 创建一个一个函数空间：递推，返回值并销毁一个一个函数空间：回归</span></span><br><span class="line"><span class="built_in">print</span>(my_sum(<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归打印</span></span><br><span class="line">l=[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,[<span class="number">4</span>,[<span class="number">5</span>,[<span class="number">6</span>,[<span class="number">7</span>,[<span class="number">8</span>,[<span class="number">9</span>,[<span class="number">10</span>,[<span class="number">11</span>,<span class="number">12</span>]]]]]]]]]]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(i)<span class="keyword">is</span> <span class="built_in">list</span>:</span><br><span class="line">            func(i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">func(l)</span><br><span class="line"></span><br><span class="line"><span class="comment">#递归全排序</span></span><br><span class="line">s=<span class="string">&#x27;abc&#x27;</span></span><br><span class="line">l=<span class="built_in">list</span>(s)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">permutation</span>(<span class="params">l,level</span>):</span><br><span class="line">    <span class="keyword">if</span> level==<span class="built_in">len</span>(l):</span><br><span class="line">        <span class="built_in">print</span>(l)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(level,<span class="built_in">len</span>(l)):</span><br><span class="line">        l[level],l[i]=l[i],l[level]</span><br><span class="line">        permutation(l,level+<span class="number">1</span>)</span><br><span class="line">        l[level],l[i]=l[i],l[level]</span><br><span class="line">permutation(l,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归二分法</span></span><br><span class="line">ll=[-<span class="number">5</span>,-<span class="number">3</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">l,i</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(l)==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> l[<span class="number">0</span>]==i:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;找到了&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;没找到&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> i&lt;l[<span class="built_in">int</span>(<span class="built_in">len</span>(l)/<span class="number">2</span>)]:</span><br><span class="line">        l1=l[<span class="number">0</span>:<span class="built_in">int</span>(<span class="built_in">len</span>(l)/<span class="number">2</span>)]</span><br><span class="line">        func1(l1,i)</span><br><span class="line">    <span class="keyword">elif</span> i&gt;l[<span class="built_in">int</span>(<span class="built_in">len</span>(l)/<span class="number">2</span>)]:</span><br><span class="line">        l1=l[<span class="built_in">int</span>(<span class="built_in">len</span>(l)/<span class="number">2</span>):<span class="built_in">len</span>(l)]</span><br><span class="line">        func1(l1,i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;找到了&#x27;</span>)</span><br><span class="line">func1(ll,<span class="number">8</span>)</span><br></pre></td></tr></table></figure><h2 id="py模块"><a href="#py模块" class="headerlink" title="py模块"></a>py模块</h2><h3 id="1-time-amp-datetime"><a href="#1-time-amp-datetime" class="headerlink" title="1.time&amp;datetime"></a>1.time&amp;datetime</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 时间戳,从1970到现在的秒数</span></span><br><span class="line"><span class="built_in">print</span>(time.time())</span><br><span class="line"><span class="comment"># 结构化字符串</span></span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>))</span><br><span class="line"><span class="comment"># 结构化时间</span></span><br><span class="line">res=time.localtime()</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">nowtime=time.time()</span><br><span class="line">nowtime1=time.localtime(nowtime)<span class="comment"># 可以将时间戳转为结构化时间</span></span><br><span class="line">time.gmtime()<span class="comment"># 世界标准时间</span></span><br><span class="line"></span><br><span class="line">time.strftime(<span class="string">&#x27;%Y-%m-%d %X&#x27;</span>,nowtime1)<span class="comment"># 结构化时间转为结构化字符串</span></span><br><span class="line"></span><br><span class="line">t=<span class="string">&#x27;1983-12-07 01:02:02&#x27;</span></span><br><span class="line">tt=time.strptime(t,<span class="string">&#x27;%Y-%m-%d %X&#x27;</span>)<span class="comment"># 结构化字符串 转为 结构化时间</span></span><br><span class="line">time.mktime(tt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">res=datetime.datetime.now()</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="built_in">print</span>(res.replace(microsecond=<span class="number">0</span>))<span class="comment"># 去掉毫秒</span></span><br><span class="line"></span><br><span class="line">res1=datetime.datetime.now()+datetime.timedelta(days=<span class="number">7</span>)<span class="comment"># 7天后</span></span><br><span class="line"><span class="built_in">print</span>(res1.replace(microsecond=<span class="number">0</span>))</span><br></pre></td></tr></table></figure><h3 id="2-random"><a href="#2-random" class="headerlink" title="2.random"></a>2.random</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span>(random.random())<span class="comment"># 0-1</span></span><br><span class="line"><span class="built_in">print</span>(random.uniform(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(random.randint(-<span class="number">100</span>,<span class="number">100</span>))<span class="comment"># [-100,100]随机整数</span></span><br><span class="line"><span class="built_in">print</span>(random.randrange(<span class="number">1</span>,<span class="number">3</span>))<span class="comment"># [1,3)</span></span><br><span class="line"><span class="built_in">print</span>(random.choice([<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>]))<span class="comment"># 列表 字符串 元组等</span></span><br><span class="line"><span class="built_in">print</span>(random.sample([<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>],<span class="number">2</span>))<span class="comment"># 和choice类似，指定一次取多少个值</span></span><br><span class="line">li=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">random.shuffle(li)<span class="comment"># 打乱可变容器数据的顺讯</span></span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"><span class="comment"># 生成随机16位密码</span></span><br><span class="line">pwd=<span class="string">&#x27;&#x27;</span></span><br><span class="line">char_list=[[<span class="number">97</span>,<span class="number">122</span>],[<span class="number">65</span>,<span class="number">90</span>],[<span class="number">48</span>,<span class="number">57</span>],[<span class="number">33</span>,<span class="number">47</span>]]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    random_list=random.choice(char_list)</span><br><span class="line">    random_char=<span class="built_in">chr</span>(random.randint(*random_list))</span><br><span class="line">    pwd+=random_char</span><br><span class="line"><span class="built_in">print</span>(pwd)</span><br></pre></td></tr></table></figure><h3 id="3-os"><a href="#3-os" class="headerlink" title="3.os"></a>3.os</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递归统计文件夹或文件的大小</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">path_size</span>(<span class="params">path</span>):</span><br><span class="line">    size=<span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;文件或文件夹不存在！&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    dir_list=os.listdir(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(dir_list)==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> dir_list:</span><br><span class="line">        pa=os.path.join(path,p)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(pa):</span><br><span class="line">            size+=path_size(pa)</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(pa):</span><br><span class="line">            <span class="built_in">print</span>(pa)</span><br><span class="line">            size+=os.path.getsize(pa)</span><br><span class="line">    <span class="keyword">return</span> size</span><br><span class="line"><span class="built_in">print</span>(path_size(<span class="string">r&#x27;D:\1笔记&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">os.getcwd()<span class="comment"># 获取当前工作目录</span></span><br><span class="line">os.chdir(<span class="string">&quot;dirname&quot;</span>) <span class="comment"># 改变当前脚本工作目录；相当于终端里面的cd命令</span></span><br><span class="line">os.listdir(<span class="string">&#x27;dirname&#x27;</span>) <span class="comment"># 获取指定目录下的所有文件和文件夹，包括隐藏文件，并返回列表</span></span><br><span class="line">os.mkdir(<span class="string">&#x27;dirname&#x27;</span>) <span class="comment"># 创建文件夹；相当于终端里面的mkdir dirname</span></span><br><span class="line">os.makedirs(<span class="string">&#x27;dirname1/dirname2&#x27;</span>) <span class="comment"># 递归创建多层目录</span></span><br><span class="line">os.remove()<span class="comment"># 删除一个文件</span></span><br><span class="line">os.rmdir(<span class="string">&#x27;dirname&#x27;</span>) <span class="comment"># 删除单级空目录，若目录不为空则无法删除,则报错</span></span><br><span class="line">os.rename(<span class="string">&#x27;oldname&#x27;</span>,<span class="string">&#x27;newname&#x27;</span>) <span class="comment"># 重命名文件/目录</span></span><br><span class="line">os.system(<span class="string">&quot;rm -rf /&quot;</span>) <span class="comment"># 运行终端命令</span></span><br><span class="line">os.environ<span class="comment"># 获取系统环境变量,可以将密码存入环境变量读取</span></span><br><span class="line">os.environ.get(<span class="string">&#x27;KEY&#x27;</span>) <span class="comment"># 获取系统环境变量的某一个值</span></span><br><span class="line">os.getenv(<span class="string">&#x27;KEY&#x27;</span>)<span class="comment"># 获取系统环境变量的某一个值</span></span><br><span class="line">os.stat(<span class="string">&#x27;path/filename&#x27;</span>)<span class="comment"># 获取文件/目录信息</span></span><br><span class="line">os.name<span class="comment"># 输出字符串指示当前使用平台。win-&gt;&#x27;nt&#x27;; Linux-&gt;&#x27;posix&#x27;</span></span><br><span class="line">os.path.split(path) <span class="comment"># 将path分割成目录和文件名,返回元组</span></span><br><span class="line">os.path.dirname(path) <span class="comment"># 返回path的父级目录。其实就是os.path.split(path)的第一个元素</span></span><br><span class="line">os.path.basename(path) <span class="comment"># 返回path最后的文件名。如path以／或\结尾，那么就会返回空值。即</span></span><br><span class="line">os.path.split(path)的第二个元素</span><br><span class="line">os.path.exists(path) <span class="comment"># 如果path存在，返回True；如果path不存在，返回False</span></span><br><span class="line">os.path.isabs(path) <span class="comment"># 如果path是绝对路径，返回True</span></span><br><span class="line">os.path.isfile(path) <span class="comment"># 如果path是一个存在的文件，返回True。否则返回False</span></span><br><span class="line">os.path.isdir(path) <span class="comment"># 如果path是一个存在的目录，则返回True。否则返回False</span></span><br><span class="line">os.path.join(path1[, path2[, ...]]) <span class="comment"># 将多个路径组合后返回，第一个绝对路径之前的参数将被忽略</span></span><br><span class="line">os.path.getatime(path) <span class="comment"># 返回path所指向的文件或者目录的最后读取时间</span></span><br><span class="line">os.path.getmtime(path) <span class="comment"># 返回path所指向的文件或者目录的最后修改时间</span></span><br><span class="line">os.path.getctime(path) <span class="comment"># # 返回path所指向的文件或者目录的创建时间(windows平台中)</span></span><br><span class="line">os.path.getsize(path) <span class="comment"># 返回path的大小</span></span><br></pre></td></tr></table></figure><h3 id="4-shutil"><a href="#4-shutil" class="headerlink" title="4.shutil"></a>4.shutil</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">shutil.copystat(a,b)<span class="comment"># 将a文件的属性拷贝给b，b文件必须存在</span></span><br><span class="line">shutil.copymode(a,b)<span class="comment"># 拷贝文件权限</span></span><br><span class="line">shutil.copyfileobj(<span class="built_in">open</span>(),<span class="built_in">open</span>())<span class="comment"># 拷贝文件</span></span><br><span class="line">shutil.copyfile(a,b)<span class="comment"># 拷贝</span></span><br><span class="line">shutil.copy(a,b)<span class="comment"># 拷贝文件和权限</span></span><br><span class="line">shutil.copy2(a,b)<span class="comment"># 拷贝文件和属性</span></span><br><span class="line">shutil.copytree(a,b,ignore=shutil.ignore_patterns(<span class="string">&#x27;*.py&#x27;</span>))<span class="comment"># 拷贝文件夹，ignore排除.py文件</span></span><br><span class="line">shutil.move(a,b)<span class="comment"># 移动文件或文件夹，路径相同 名字不同就是重命名</span></span><br><span class="line">shutil.make_archive(paht,<span class="string">&#x27;zip&#x27;</span>,root_dir)<span class="comment"># 压缩包存放路径，压缩格式zip tar bztar gztar,需要压缩文件的路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># zipfile tarfile 处理压缩包的模块</span></span><br></pre></td></tr></table></figure><h3 id="5-sys"><a href="#5-sys" class="headerlink" title="5.sys"></a>5.sys</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.path)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sys.argv)<span class="comment"># 运行参数，0执行文件，后面就是转入的参数</span></span><br></pre></td></tr></table></figure><h3 id="6-configparser配置文件"><a href="#6-configparser配置文件" class="headerlink" title="6.configparser配置文件"></a>6.configparser配置文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line">config = configparser.ConfigParser ()</span><br><span class="line">config.read(<span class="string">r&#x27;C:\Users\yjt\Desktop\a.txt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(config.sections())<span class="comment"># 打印所有sections值</span></span><br><span class="line"><span class="built_in">print</span>(config.options(<span class="string">&#x27;db&#x27;</span>))<span class="comment"># 打印对应section下面的key</span></span><br><span class="line"><span class="built_in">print</span>(config.items(<span class="string">&#x27;db&#x27;</span>))<span class="comment"># 打印section对应的key 与 value,元组+字符串</span></span><br><span class="line"><span class="comment"># db1=config.get(&#x27;db&#x27;,&#x27;db1&#x27;)</span></span><br><span class="line"><span class="comment"># db1=config.getint(&#x27;db&#x27;,&#x27;db1&#x27;)</span></span><br><span class="line"><span class="comment"># db1=config.getfloat(&#x27;db&#x27;,&#x27;db1&#x27;)</span></span><br><span class="line">db1=config.getboolean(<span class="string">&#x27;db&#x27;</span>,<span class="string">&#x27;db3&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(db1,<span class="built_in">type</span>(db1))</span><br></pre></td></tr></table></figure><h3 id="7-subprocess"><a href="#7-subprocess" class="headerlink" title="7.subprocess"></a>7.subprocess</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import subprocess </span><br><span class="line"># 和 os.system 类似，结果是字符串类型</span><br><span class="line"># subprocess结果是bytes</span><br><span class="line">obj = subprocess.Popen(&#x27;tree &amp; aas&#x27;,</span><br><span class="line">                      shell=True,# 程序通过shell执行</span><br><span class="line">                      stdout=subprocess.PIPE,# 正确执行完成的结果存入stdout管道</span><br><span class="line">                      stderr=subprocess.PIPE)# 执行过程报错的信息</span><br><span class="line">res = obj.stdout.read()</span><br><span class="line">print(res.decode(&#x27;gbk&#x27;))</span><br><span class="line">err = obj.stderr.read()</span><br><span class="line">print(err.decode(&#x27;gbk&#x27;))</span><br></pre></td></tr></table></figure><h3 id="8-hash-哈希"><a href="#8-hash-哈希" class="headerlink" title="8.hash 哈希"></a>8.hash 哈希</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 哈希算法 md5 sha1 sha256 sha512</span></span><br><span class="line"><span class="comment"># 1.输入敏感(有点不同，哈希值就变化很大)    2.不可逆    3.计算极快而长度固定</span></span><br><span class="line"><span class="comment"># 用途1.加密(一个哈希值能对应多个明文)，可通过哈希碰撞破解    2.文件完整性效验</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">h1= hashlib.md5()</span><br><span class="line">h1.update(<span class="string">&#x27;abc&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))<span class="comment"># 传入需要加密的bytes内容</span></span><br><span class="line">h1.update(<span class="string">&#x27;123&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(h1.hexdigest())<span class="comment"># 返回所有h1加密的东西,abc123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 小文件完整性效验</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;D:\浏览器下载\ProcessExplorer.zip&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    m1=hashlib.md5(f.read()).hexdigest()<span class="comment"># 全部读入做md5效验</span></span><br><span class="line">    <span class="built_in">print</span>(m1)</span><br><span class="line">    m2=<span class="string">&#x27;78a1f74f69d40fc6468bc4a2bb2b5221&#x27;</span><span class="comment"># 文件的md5校验码</span></span><br><span class="line">    <span class="keyword">if</span> m1==m2:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;相同&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 大文件分段，取部分数据效验</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path=<span class="string">r&#x27;D:\浏览器下载\ProcessExplorer.zip&#x27;</span></span><br><span class="line">size = os.path.getsize(path)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;文件大小为:<span class="subst">&#123;size&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">md = hashlib.md5()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;D:\浏览器下载\ProcessExplorer.zip&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    f.seek(<span class="number">0</span>,<span class="number">2</span>)<span class="comment"># 参照末尾移动0个字节</span></span><br><span class="line">    size1 = f.tell()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;seek统计的文件大小:<span class="subst">&#123;size1&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    one_tenth=size//<span class="number">10</span>    <span class="comment"># 文件10分段，位置</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        f.seek(i*one_tenth,<span class="number">0</span>)     <span class="comment"># 取10分段位置起点</span></span><br><span class="line">        res=f.read(<span class="number">100</span>)       <span class="comment">#  取分段后100个字符</span></span><br><span class="line">        md.update(res)</span><br><span class="line">    <span class="built_in">print</span>(md.hexdigest())</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 密码加盐</span></span><br><span class="line">pwd=<span class="string">&#x27;xyxy520&#x27;</span></span><br><span class="line">mdmd=hashlib.md5()</span><br><span class="line"><span class="comment"># mdmd.update(pwd.encode(&#x27;gbk&#x27;))# 不进行任何加盐，xyxy520</span></span><br><span class="line">mdmd.update(pwd[:<span class="number">2</span>].encode(<span class="string">&#x27;gbk&#x27;</span>))<span class="comment">#   可以自定义位置和内容加盐</span></span><br><span class="line">mdmd.update(<span class="string">&#x27;天青色等烟雨&#x27;</span>.encode(<span class="string">&#x27;gbk&#x27;</span>))<span class="comment"># xy天青色等烟雨xy而我在等你520</span></span><br><span class="line">mdmd.update(pwd[<span class="number">2</span>:<span class="number">4</span>].encode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">mdmd.update(<span class="string">&#x27;而我在等你&#x27;</span>.encode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">mdmd.update(pwd[<span class="number">4</span>:].encode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(mdmd.hexdigest())</span><br></pre></td></tr></table></figure><h3 id="9-re正则表达式"><a href="#9-re正则表达式" class="headerlink" title="9.re正则表达式"></a>9.re正则表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#限定符</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    *:*前面的一个字符可以是0个或者多个</span></span><br><span class="line"><span class="string">    +：+前面的一个字符可以是1个或者多个</span></span><br><span class="line"><span class="string">    &#123;&#125;:&#123;&#125;前一个字符出现的次数，&#123;5&#125;5次，(2,5)2到5次,&#123;2,&#125;2次及以上</span></span><br><span class="line"><span class="string">    ？:前一个字符0次或1次</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    (xy):将()中的内容当做一个字符</span></span><br><span class="line"><span class="string">    play the (piano|guitar):play the piano或play the guitar，()不能省，|或</span></span><br><span class="line"><span class="string">    [xyg]+:只能是xyg组成的单词，一次或多次</span></span><br><span class="line"><span class="string">    [a-zA-Z0-9]+:所有英文和数字组成</span></span><br><span class="line"><span class="string">    [^a-zA-Z0-9]+:^后面列出的字符除外</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    正则内置字符：\d表示数字字符</span></span><br><span class="line"><span class="string">                \D非数字字符</span></span><br><span class="line"><span class="string">                \w所有单词字符，英文数字下划线</span></span><br><span class="line"><span class="string">                \W非单词字符</span></span><br><span class="line"><span class="string">                \s空白字符，空格 制表符 换行符</span></span><br><span class="line"><span class="string">                \S非空白</span></span><br><span class="line"><span class="string">                .任意字符，不包括换行符、</span></span><br><span class="line"><span class="string">                ^匹配行首，x^匹配行首的x，[^]的^是取反</span></span><br><span class="line"><span class="string">                $匹配行尾</span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &lt;.+&gt; 匹配以&lt;开始和&gt;结束最多的字符串，贪婪匹配</span></span><br><span class="line"><span class="string">    &lt;.+?&gt;懒惰匹配，最短的字符串</span></span><br><span class="line"><span class="string">    \.  匹配 . ，\防止转义</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">re.findall(<span class="string">&#x27;.+&#x27;</span>,<span class="string">&#x27;abc\ndef\ng&#x27;</span>) <span class="comment"># 1.正则表达式，2.需要核对的字符串</span></span><br><span class="line">re.findall(<span class="string">&#x27;.+&#x27;</span>,<span class="string">&#x27;abc\ndef\ng&#x27;</span>,flags=re.DOTALL)<span class="comment"># flags=re.DOTALL re.S 让.包括换行符</span></span><br><span class="line"><span class="comment"># flags=re.I 不区分大小写</span></span><br><span class="line"><span class="comment"># flags=re.M  匹配行首</span></span><br><span class="line"></span><br><span class="line">phone_num=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">13335654872</span></span><br><span class="line"><span class="string">14825556148</span></span><br><span class="line"><span class="string">15554845489</span></span><br><span class="line"><span class="string">16658151288</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#######   (?:···)让小括号不是一个group</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">r&#x27;\b(?:13[0-9]|14[5-9]|15[0-35-9])\d&#123;8&#125;\b&#x27;</span>,phone_num))<span class="comment"># \b表示边界，空白等</span></span><br><span class="line">res=re.search(<span class="string">r&#x27;\b(?:13[0-9]|14[5-9]|15[0-35-9])\d&#123;8&#125;\b&#x27;</span>,phone_num)<span class="comment"># 返回第一个符合值，且是一个match对象，没找到返回none</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="built_in">print</span>(res.span())</span><br><span class="line"><span class="built_in">print</span>(res.group())</span><br><span class="line">res1=re.search(<span class="string">r&#x27;\b(13[0-9]|14[5-9]|15[0-35-9])(\d&#123;8&#125;\b)&#x27;</span>,phone_num)<span class="comment"># 注意看正则的()</span></span><br><span class="line"><span class="built_in">print</span>(res1)</span><br><span class="line"><span class="built_in">print</span>(res1.group(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(res1.group(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#re.finditer()# 结果以迭代器返回</span></span><br><span class="line">s=<span class="string">&#x27;&#x27;&#x27;Host: movie.douban.com</span></span><br><span class="line"><span class="string">Pargma: no-cache</span></span><br><span class="line"><span class="string">Referer: https://cn.bing.com/&#x27;&#x27;&#x27;</span></span><br><span class="line">dic=&#123;&#125;</span><br><span class="line">res=re.finditer(<span class="string">&#x27;(.*): (.*)&#x27;</span>,s)</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> res:</span><br><span class="line">    dic[m.group(<span class="number">1</span>)]=m.group(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># re.match()# 和re.search一样，但只能匹配开头</span></span><br><span class="line"><span class="comment"># re.fullmatch()# 匹配整体，从头到尾都必须符合</span></span><br><span class="line">phone_num1=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tel:13335654872</span></span><br><span class="line"><span class="string">tel:14825556148</span></span><br><span class="line"><span class="string">tel:15554845489</span></span><br><span class="line"><span class="string">tel:16658151288</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">des</span>(<span class="params">m</span>):</span><br><span class="line">    tell=m.group(<span class="number">1</span>)</span><br><span class="line">    tell2=m.group(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> tell[:<span class="number">2</span>]+<span class="string">&#x27;***&#x27;</span>+tell2[-<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(re.sub(<span class="string">r&#x27;\b(?:13[0-9]|14[5-9]|15[0-35-9])\d&#123;8&#125;\b&#x27;</span>,<span class="string">&#x27;***&#x27;</span>,phone_num1))<span class="comment">#匹配到的替换，没有匹配到的不管</span></span><br><span class="line"><span class="built_in">print</span>(re.sub(<span class="string">r&#x27;\b(13[0-9]|14[5-9]|15[0-35-9])(\d&#123;8&#125;\b)&#x27;</span>,des,phone_num1))</span><br><span class="line"><span class="comment"># re.subn() #和 sub一样  多返回一个替换次数</span></span><br><span class="line">s=<span class="string">&#x27;xyg,- time,  !dog , cat&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.split(<span class="string">&#x27;\W+&#x27;</span>,s))<span class="comment"># 以匹配到的  为分隔符 分割</span></span><br><span class="line">res=re.<span class="built_in">compile</span>(<span class="string">&#x27;.*&#x27;</span>,flags=re.S)<span class="comment"># 创建一个正则表达式对象</span></span><br></pre></td></tr></table></figure><h3 id="10-logging日志管理"><a href="#10-logging日志管理" class="headerlink" title="10.logging日志管理"></a>10.logging日志管理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="comment"># # 日志基本配置</span></span><br><span class="line">logging.basicConfig(</span><br><span class="line"><span class="comment"># 1、日志级别</span></span><br><span class="line">level=<span class="number">10</span>,</span><br><span class="line"><span class="comment"># DE<span class="doctag">BUG:</span>10,INFO:20,WARNING:30,ERROR:40,CRITICAL:50</span></span><br><span class="line"><span class="comment"># 2、日志输出格式</span></span><br><span class="line">        <span class="comment"># 当前时间    #日志名字  # 路径     #哪一行代码      #等级    #信息</span></span><br><span class="line"><span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s %(name)s [%(pathname)s line:%(lineno)d] %(levelname)s %(message)s&#x27;</span>,</span><br><span class="line"><span class="comment"># 3、asctime的时间格式</span></span><br><span class="line">datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,</span><br><span class="line"><span class="comment"># 4、日志输出位置：终端/文件</span></span><br><span class="line">filename=<span class="string">r&#x27;C:\Users\yjt\Desktop\b.log&#x27;</span><span class="comment"># 不指定此配置，默认打印到终端</span></span><br><span class="line">)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">%(name)s</span></span><br><span class="line"><span class="string">Logger的名字(getlogger时指定的名字)</span></span><br><span class="line"><span class="string">%(levelno)s 数字形式的日志级别</span></span><br><span class="line"><span class="string">%(levelname)s 文本形式的日志级别</span></span><br><span class="line"><span class="string">%(pathname)s 调用日志输出日志的完整路径名</span></span><br><span class="line"><span class="string">%(filename)s 调用日志输出日志的文件名</span></span><br><span class="line"><span class="string">%(module)s 调用日志输出日志的模块名</span></span><br><span class="line"><span class="string">%(funcName)s 调用日志输出日志的函数名</span></span><br><span class="line"><span class="string">%(lineno)d 调用日志输出函数的语句所在的代码行</span></span><br><span class="line"><span class="string">%(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示</span></span><br><span class="line"><span class="string">%(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数</span></span><br><span class="line"><span class="string">%(asctime)s 字符串形式的当前时间,默认格式是 “2022-07-30 22:15:53,394”</span></span><br><span class="line"><span class="string">%(thread)d 线程ID,可能没有</span></span><br><span class="line"><span class="string">%(threadName)s 线程名,可能没有</span></span><br><span class="line"><span class="string">%(process)d 进程ID,可能没有</span></span><br><span class="line"><span class="string">%(message)s 用户输出的消息</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">logging.debug(<span class="string">&#x27;调试日志&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;消息日志&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;警告日志&#x27;</span>)</span><br><span class="line">logging.error(<span class="string">&#x27;错误日志&#x27;</span>)</span><br><span class="line">logging.critical(<span class="string">&#x27;严重错误日志&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="py序列化"><a href="#py序列化" class="headerlink" title="py序列化"></a>py序列化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 序列化：把内存中的数据类型转成一种特定格式，可用于存储，或传输给其他操作系统</span></span><br><span class="line"><span class="comment"># 内存中数据类型----&gt;序列化----&gt;特定格式（json/pickle）</span></span><br><span class="line"><span class="comment"># 内存中数据类型&lt;----反序列化&lt;----特定格式（json/pickle）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.存档</span></span><br><span class="line"><span class="comment"># 2.跨平台数据交互，只能用json，pickle是python专用的，python和C++交互等，只能交互共有的数据类型</span></span><br><span class="line"><span class="comment"># json只能序列化都有的数据类型，python的集合不能进行序列化</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">dic=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;张大仙&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;bool&#x27;</span>:<span class="literal">False</span>,<span class="string">&#x27;hobbies&#x27;</span>:[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>]&#125;</span><br><span class="line">json_res=json.dumps(dic,ensure_ascii=<span class="literal">False</span>)<span class="comment"># 默认为true，汉字使用Unicode表示，不影响序列化和反序列化</span></span><br><span class="line"><span class="built_in">print</span>(json_res,<span class="built_in">type</span>(json_res))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;D:\1笔记\1.json&#x27;</span>,mode=<span class="string">&#x27;wt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line"><span class="comment">#     f.write(json_res)</span></span><br><span class="line">    json.dump(dic,f)<span class="comment"># 直接写入</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;D:\1笔记\1.json&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line"><span class="comment">#     json1=f.read()</span></span><br><span class="line"><span class="comment">#     dic=json.loads(json1)</span></span><br><span class="line"><span class="comment">#     print(dic,type(dic))</span></span><br><span class="line">    </span><br><span class="line">    jsonres=json.load(f)<span class="comment"># 直接读入</span></span><br><span class="line">    <span class="built_in">print</span>(jsonres)</span><br></pre></td></tr></table></figure><h2 id="py猴子补丁"><a href="#py猴子补丁" class="headerlink" title="py猴子补丁"></a>py猴子补丁</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在执行文件首次导入模块的时候，更改模块函数的内存地址</span></span><br><span class="line"><span class="comment"># 因为第一次已经加载到内存，后续所有用的地方都会从内存中加载，一次修改所有</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> ujson<span class="comment"># 和json类似，但速度更快</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">monley_patch_json</span>():</span><br><span class="line">    json.__name__=<span class="string">&#x27;ujson&#x27;</span></span><br><span class="line">    json.dumps=ujson.dumps<span class="comment"># 后续使用json.dumps，使用使用的ujson.dumps</span></span><br><span class="line">    json.loads=ujosn.loads</span><br><span class="line">monley_patch_json()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -python -教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dnn推理</title>
      <link href="/2023/04/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv_dnn_%E6%8E%A8%E7%90%86%E5%8A%A0%E9%80%9F/"/>
      <url>/2023/04/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv_dnn_%E6%8E%A8%E7%90%86%E5%8A%A0%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<p>使用OpenCV dnn模块推理，并使用cuda加速。</p><span id="more"></span><h2 id="1-模型转换"><a href="#1-模型转换" class="headerlink" title="1.模型转换"></a>1.模型转换</h2><p>通过YOLOv5提供的模型转换代码export.py。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install onnx</span><br><span class="line">pip install onnxruntime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意修改--weights 和 --include参数</span><br></pre></td></tr></table></figure><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h2><p>在实例化DNN::Net net后，通过下面代码启用duda加速。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net.<span class="built_in">setPreferableBackend</span>(DNN_BACKEND_CUDA);</span><br><span class="line">net.<span class="built_in">setPreferableTarget</span>(DNN_TARGET_CUDA);</span><br></pre></td></tr></table></figure><p>对于报错Could not load library cudnn_cnn_infer64_8.dll. Error code 126。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">进入https://docs.nvidia.com/deeplearning/cudnn/install-guide/index.html#install-zlib-windows</span><br><span class="line">下载Zlib文件</span><br><span class="line">将dll_x64文件夹下的zlibwapi.dll文件剪切到c:/window/system32下</span><br></pre></td></tr></table></figure><p>下面代码是通过opencv dnn推理onnx模型。(通过yolo的detect50ms左右，在opencv dnn cuda加速下只有80ms左右，不知道为什么！！！)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;Winmm.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;opencv2/dnn.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/core/utils/logger.hpp&gt;</span><span class="comment">//包含头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;timeapi.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> dnn;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Net_config</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> confThreshold; <span class="comment">// Confidence threshold</span></span><br><span class="line"><span class="type">float</span> nmsThreshold;  <span class="comment">// Non-maximum suppression threshold</span></span><br><span class="line"><span class="type">float</span> objThreshold;  <span class="comment">//Object Confidence threshold</span></span><br><span class="line">string modelpath;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">endsWith</span><span class="params">(string s, string sub)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s.<span class="built_in">rfind</span>(sub) == (s.<span class="built_in">length</span>() - sub.<span class="built_in">length</span>()) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> anchors_640[<span class="number">3</span>][<span class="number">6</span>] = &#123; &#123;<span class="number">10.0</span>,  <span class="number">13.0</span>, <span class="number">16.0</span>,  <span class="number">30.0</span>,  <span class="number">33.0</span>,  <span class="number">23.0</span>&#125;,</span><br><span class="line"> &#123;<span class="number">30.0</span>,  <span class="number">61.0</span>, <span class="number">62.0</span>,  <span class="number">45.0</span>,  <span class="number">59.0</span>,  <span class="number">119.0</span>&#125;,</span><br><span class="line"> &#123;<span class="number">116.0</span>, <span class="number">90.0</span>, <span class="number">156.0</span>, <span class="number">198.0</span>, <span class="number">373.0</span>, <span class="number">326.0</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> anchors_1280[<span class="number">4</span>][<span class="number">6</span>] = &#123; &#123;<span class="number">19</span>, <span class="number">27</span>, <span class="number">44</span>, <span class="number">40</span>, <span class="number">38</span>, <span class="number">94</span>&#125;,&#123;<span class="number">96</span>, <span class="number">68</span>, <span class="number">86</span>, <span class="number">152</span>, <span class="number">180</span>, <span class="number">137</span>&#125;,&#123;<span class="number">140</span>, <span class="number">301</span>, <span class="number">303</span>, <span class="number">264</span>, <span class="number">238</span>, <span class="number">542</span>&#125;,</span><br><span class="line">   &#123;<span class="number">436</span>, <span class="number">615</span>, <span class="number">739</span>, <span class="number">380</span>, <span class="number">925</span>, <span class="number">792</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YOLO</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">YOLO</span>(Net_config config);</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">detect</span><span class="params">(Mat&amp; frame)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">float</span>* anchors;</span><br><span class="line"><span class="type">int</span> num_stride;</span><br><span class="line"><span class="type">int</span> inpWidth;</span><br><span class="line"><span class="type">int</span> inpHeight;</span><br><span class="line">vector&lt;string&gt; class_names;</span><br><span class="line"><span class="type">int</span> num_class;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> confThreshold;</span><br><span class="line"><span class="type">float</span> nmsThreshold;</span><br><span class="line"><span class="type">float</span> objThreshold;</span><br><span class="line"><span class="type">const</span> <span class="type">bool</span> keep_ratio = <span class="literal">true</span>;</span><br><span class="line">Net net;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawPred</span><span class="params">(<span class="type">float</span> conf, <span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom, Mat&amp; frame, <span class="type">int</span> classid)</span></span>;</span><br><span class="line"><span class="function">Mat <span class="title">resize_image</span><span class="params">(Mat srcimg, <span class="type">int</span>* newh, <span class="type">int</span>* neww, <span class="type">int</span>* top, <span class="type">int</span>* left)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">YOLO::<span class="built_in">YOLO</span>(Net_config config)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;confThreshold = config.confThreshold;</span><br><span class="line"><span class="keyword">this</span>-&gt;nmsThreshold = config.nmsThreshold;</span><br><span class="line"><span class="keyword">this</span>-&gt;objThreshold = config.objThreshold;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;net = <span class="built_in">readNet</span>(config.modelpath);</span><br><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;class.names&quot;</span>)</span></span>;</span><br><span class="line">string line;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(ifs, line)) <span class="keyword">this</span>-&gt;class_names.<span class="built_in">push_back</span>(line);</span><br><span class="line"><span class="keyword">this</span>-&gt;num_class = class_names.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">endsWith</span>(config.modelpath, <span class="string">&quot;6.onnx&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">anchors = (<span class="type">float</span>*)anchors_1280;</span><br><span class="line"><span class="keyword">this</span>-&gt;num_stride = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;inpHeight = <span class="number">1280</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;inpWidth = <span class="number">1280</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">anchors = (<span class="type">float</span>*)anchors_640;</span><br><span class="line"><span class="keyword">this</span>-&gt;num_stride = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;inpHeight = <span class="number">640</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;inpWidth = <span class="number">640</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Mat <span class="title">YOLO::resize_image</span><span class="params">(Mat srcimg, <span class="type">int</span>* newh, <span class="type">int</span>* neww, <span class="type">int</span>* top, <span class="type">int</span>* left)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> srch = srcimg.rows, srcw = srcimg.cols;</span><br><span class="line">*newh = <span class="keyword">this</span>-&gt;inpHeight;</span><br><span class="line">*neww = <span class="keyword">this</span>-&gt;inpWidth;</span><br><span class="line">Mat dstimg;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;keep_ratio &amp;&amp; srch != srcw) &#123;</span><br><span class="line"><span class="type">float</span> hw_scale = (<span class="type">float</span>)srch / srcw;</span><br><span class="line"><span class="keyword">if</span> (hw_scale &gt; <span class="number">1</span>) &#123;</span><br><span class="line">*newh = <span class="keyword">this</span>-&gt;inpHeight;</span><br><span class="line">*neww = <span class="built_in">int</span>(<span class="keyword">this</span>-&gt;inpWidth / hw_scale);</span><br><span class="line"><span class="built_in">resize</span>(srcimg, dstimg, <span class="built_in">Size</span>(*neww, *newh), INTER_AREA);</span><br><span class="line">*left = <span class="built_in">int</span>((<span class="keyword">this</span>-&gt;inpWidth - *neww) * <span class="number">0.5</span>);</span><br><span class="line"><span class="built_in">copyMakeBorder</span>(dstimg, dstimg, <span class="number">0</span>, <span class="number">0</span>, *left, <span class="keyword">this</span>-&gt;inpWidth - *neww - *left, BORDER_CONSTANT, <span class="number">114</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">*newh = (<span class="type">int</span>)<span class="keyword">this</span>-&gt;inpHeight * hw_scale;</span><br><span class="line">*neww = <span class="keyword">this</span>-&gt;inpWidth;</span><br><span class="line"><span class="built_in">resize</span>(srcimg, dstimg, <span class="built_in">Size</span>(*neww, *newh), INTER_AREA);</span><br><span class="line">*top = (<span class="type">int</span>)(<span class="keyword">this</span>-&gt;inpHeight - *newh) * <span class="number">0.5</span>;</span><br><span class="line"><span class="built_in">copyMakeBorder</span>(dstimg, dstimg, *top, <span class="keyword">this</span>-&gt;inpHeight - *newh - *top, <span class="number">0</span>, <span class="number">0</span>, BORDER_CONSTANT, <span class="number">114</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">resize</span>(srcimg, dstimg, <span class="built_in">Size</span>(*neww, *newh), INTER_AREA);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dstimg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">YOLO::drawPred</span><span class="params">(<span class="type">float</span> conf, <span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom, Mat&amp; frame, <span class="type">int</span> classid)</span>   <span class="comment">// Draw the predicted bounding box</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Draw a rectangle displaying the bounding box</span></span><br><span class="line"><span class="built_in">rectangle</span>(frame, <span class="built_in">Point</span>(left, top), <span class="built_in">Point</span>(right, bottom), <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Get the label for the class name and its confidence</span></span><br><span class="line">string label = format(<span class="string">&quot;%.2f&quot;</span>, conf);</span><br><span class="line">label = <span class="keyword">this</span>-&gt;class_names[classid] + <span class="string">&quot;:&quot;</span> + label;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Display the label at the top of the bounding box</span></span><br><span class="line"><span class="type">int</span> baseLine;</span><br><span class="line">Size labelSize = <span class="built_in">getTextSize</span>(label, FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span>, <span class="number">1</span>, &amp;baseLine);</span><br><span class="line">top = <span class="built_in">max</span>(top, labelSize.height);</span><br><span class="line"><span class="comment">//rectangle(frame, Point(left, top - int(1.5 * labelSize.height)), Point(left + int(1.5 * labelSize.width), top + baseLine), Scalar(0, 255, 0), FILLED);</span></span><br><span class="line"><span class="built_in">putText</span>(frame, label, <span class="built_in">Point</span>(left<span class="number">-3</span>, top<span class="number">-3</span>), FONT_HERSHEY_SIMPLEX, <span class="number">0.75</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">YOLO::detect</span><span class="params">(Mat&amp; frame)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">net.<span class="built_in">setPreferableBackend</span>(DNN_BACKEND_CUDA);</span><br><span class="line">net.<span class="built_in">setPreferableTarget</span>(DNN_TARGET_CUDA);</span><br><span class="line"><span class="type">int</span> newh = <span class="number">0</span>, neww = <span class="number">0</span>, padh = <span class="number">0</span>, padw = <span class="number">0</span>;</span><br><span class="line">Mat dstimg = <span class="keyword">this</span>-&gt;<span class="built_in">resize_image</span>(frame, &amp;newh, &amp;neww, &amp;padh, &amp;padw);</span><br><span class="line">Mat blob = <span class="built_in">blobFromImage</span>(dstimg, <span class="number">1</span> / <span class="number">255.0</span>, <span class="built_in">Size</span>(<span class="keyword">this</span>-&gt;inpWidth, <span class="keyword">this</span>-&gt;inpHeight), <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">this</span>-&gt;net.<span class="built_in">setInput</span>(blob);</span><br><span class="line">vector&lt;Mat&gt; outs;</span><br><span class="line"><span class="keyword">this</span>-&gt;net.forward(outs, <span class="keyword">this</span>-&gt;net.<span class="built_in">getUnconnectedOutLayersNames</span>());</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num_proposal = outs[<span class="number">0</span>].size[<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> nout = outs[<span class="number">0</span>].size[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">if</span> (outs[<span class="number">0</span>].dims &gt; <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">outs[<span class="number">0</span>] = outs[<span class="number">0</span>].<span class="built_in">reshape</span>(<span class="number">0</span>, num_proposal);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/////generate proposals</span></span><br><span class="line">vector&lt;<span class="type">float</span>&gt; confidences;</span><br><span class="line">vector&lt;Rect&gt; boxes;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; classIds;</span><br><span class="line"><span class="type">float</span> ratioh = (<span class="type">float</span>)frame.rows / newh, ratiow = (<span class="type">float</span>)frame.cols / neww;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>, q = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>, row_ind = <span class="number">0</span>; <span class="comment">///xmin,ymin,xamx,ymax,box_score,class_score</span></span><br><span class="line"><span class="type">float</span>* pdata = (<span class="type">float</span>*)outs[<span class="number">0</span>].data;</span><br><span class="line"><span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; <span class="keyword">this</span>-&gt;num_stride; n++)   <span class="comment">///特征图尺度</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">float</span> stride = <span class="built_in">pow</span>(<span class="number">2</span>, n + <span class="number">3</span>);</span><br><span class="line"><span class="type">int</span> num_grid_x = (<span class="type">int</span>)<span class="built_in">ceil</span>((<span class="keyword">this</span>-&gt;inpWidth / stride));</span><br><span class="line"><span class="type">int</span> num_grid_y = (<span class="type">int</span>)<span class="built_in">ceil</span>((<span class="keyword">this</span>-&gt;inpHeight / stride));</span><br><span class="line"><span class="keyword">for</span> (q = <span class="number">0</span>; q &lt; <span class="number">3</span>; q++)    <span class="comment">///anchor</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">float</span> anchor_w = <span class="keyword">this</span>-&gt;anchors[n * <span class="number">6</span> + q * <span class="number">2</span>];</span><br><span class="line"><span class="type">const</span> <span class="type">float</span> anchor_h = <span class="keyword">this</span>-&gt;anchors[n * <span class="number">6</span> + q * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_grid_y; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; num_grid_x; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> box_score = pdata[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">if</span> (box_score &gt; <span class="keyword">this</span>-&gt;objThreshold)</span><br><span class="line">&#123;</span><br><span class="line">Mat scores = outs[<span class="number">0</span>].<span class="built_in">row</span>(row_ind).<span class="built_in">colRange</span>(<span class="number">5</span>, nout);</span><br><span class="line">Point classIdPoint;</span><br><span class="line"><span class="type">double</span> max_class_socre;</span><br><span class="line"><span class="comment">// Get the value and location of the maximum score</span></span><br><span class="line"><span class="built_in">minMaxLoc</span>(scores, <span class="number">0</span>, &amp;max_class_socre, <span class="number">0</span>, &amp;classIdPoint);</span><br><span class="line">max_class_socre *= box_score;</span><br><span class="line"><span class="keyword">if</span> (max_class_socre &gt; <span class="keyword">this</span>-&gt;confThreshold)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> class_idx = classIdPoint.x;</span><br><span class="line"><span class="comment">//float cx = (pdata[0] * 2.f - 0.5f + j) * stride;  ///cx</span></span><br><span class="line"><span class="comment">//float cy = (pdata[1] * 2.f - 0.5f + i) * stride;   ///cy</span></span><br><span class="line"><span class="comment">//float w = powf(pdata[2] * 2.f, 2.f) * anchor_w;   ///w</span></span><br><span class="line"><span class="comment">//float h = powf(pdata[3] * 2.f, 2.f) * anchor_h;  ///h</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> cx = pdata[<span class="number">0</span>];</span><br><span class="line"><span class="type">float</span> cy = pdata[<span class="number">1</span>];</span><br><span class="line"><span class="type">float</span> w = pdata[<span class="number">2</span>];</span><br><span class="line"><span class="type">float</span> h = pdata[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> left = <span class="built_in">int</span>((cx - padw - <span class="number">0.5</span> * w) * ratiow);</span><br><span class="line"><span class="type">int</span> top = <span class="built_in">int</span>((cy - padh - <span class="number">0.5</span> * h) * ratioh);</span><br><span class="line"></span><br><span class="line">confidences.<span class="built_in">push_back</span>((<span class="type">float</span>)max_class_socre);</span><br><span class="line">boxes.<span class="built_in">push_back</span>(<span class="built_in">Rect</span>(left, top, (<span class="type">int</span>)(w * ratiow), (<span class="type">int</span>)(h * ratioh)));</span><br><span class="line">classIds.<span class="built_in">push_back</span>(class_idx);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">row_ind++;</span><br><span class="line">pdata += nout;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Perform non maximum suppression to eliminate redundant overlapping boxes with</span></span><br><span class="line"><span class="comment">// lower confidences</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; indices;</span><br><span class="line">dnn::<span class="built_in">NMSBoxes</span>(boxes, confidences, <span class="keyword">this</span>-&gt;confThreshold, <span class="keyword">this</span>-&gt;nmsThreshold, indices);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; indices.<span class="built_in">size</span>(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> idx = indices[i];</span><br><span class="line">Rect box = boxes[idx];</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">drawPred</span>(confidences[idx], box.x, box.y,</span><br><span class="line">box.x + box.width, box.y + box.height, frame, classIds[idx]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">DWORD t1, t2;</span><br><span class="line">cv::utils::logging::<span class="built_in">setLogLevel</span>(utils::logging::LOG_LEVEL_SILENT);<span class="comment">//关闭日志</span></span><br><span class="line"></span><br><span class="line">Net_config yolo_nets = &#123; <span class="number">0.75</span>, <span class="number">0.45</span>, <span class="number">0.3</span>, <span class="string">&quot;weights/best.onnx&quot;</span> &#125;;</span><br><span class="line"><span class="function">YOLO <span class="title">yolo_model</span><span class="params">(yolo_nets)</span></span>;</span><br><span class="line"></span><br><span class="line">string path_image = <span class="string">&quot;D:\\A_project\\PythonApplication1\\PythonApplication1\\out\\*.*&quot;</span>;</span><br><span class="line">vector&lt;cv::String&gt;file_names;</span><br><span class="line">cv::<span class="built_in">glob</span>(path_image, file_names);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; file_names.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">string file_name = <span class="string">&quot;./out/&quot;</span>;</span><br><span class="line">Mat srcimg = <span class="built_in">imread</span>(file_names[i]);</span><br><span class="line">t1 = <span class="built_in">timeGetTime</span>();</span><br><span class="line">yolo_model.<span class="built_in">detect</span>(srcimg);</span><br><span class="line">t2 = <span class="built_in">timeGetTime</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;img%d:%f\n&quot;</span>,i+<span class="number">1</span>, (t2 - t1) * <span class="number">1.0</span> / <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">9</span>)  file_name += <span class="string">&#x27;0&#x27;</span> + <span class="built_in">to_string</span>(i+<span class="number">1</span>) + <span class="string">&quot;.bmp&quot;</span>;</span><br><span class="line"><span class="keyword">else</span>  file_name +=  <span class="built_in">to_string</span>(i) + <span class="string">&quot;.bmp&quot;</span>;</span><br><span class="line"><span class="built_in">imwrite</span>(file_name, srcimg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//string imgpath = &quot;images/53.bmp&quot;;</span></span><br><span class="line"><span class="comment">//Mat srcimg = imread(imgpath);</span></span><br><span class="line"><span class="comment">//t1 = timeGetTime();</span></span><br><span class="line"><span class="comment">//yolo_model.detect(srcimg);</span></span><br><span class="line"><span class="comment">//t2 = timeGetTime();</span></span><br><span class="line"><span class="comment">//printf(&quot;Use Time:%f\n&quot;, (t2 - t1) * 1.0 / 1000);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//static const string kWinName = &quot;Deep learning object detection in OpenCV&quot;;</span></span><br><span class="line"><span class="comment">//namedWindow(kWinName, WINDOW_NORMAL);</span></span><br><span class="line"><span class="comment">//imshow(kWinName, srcimg);</span></span><br><span class="line"><span class="comment">//waitKey(0);</span></span><br><span class="line"><span class="comment">//destroyAllWindows();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -DeepLearn -OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识OpenCV.md</title>
      <link href="/2023/04/24/opencv/%E5%88%9D%E8%AF%86OpenCV/"/>
      <url>/2023/04/24/opencv/%E5%88%9D%E8%AF%86OpenCV/</url>
      
        <content type="html"><![CDATA[<p>OpenCV是一个计算机视觉开源库，提供了处理图像和视频的能力。</p><span id="more"></span><p>OpenCV的影响力非常大，有超过47 000的社区用户，以及超过1400万次的下载量。其应用领域横跨图像处理、交互式艺术、视频监督、地图拼接和高级机器人等。作为一个有十几年历史的开源项目，OpenCV拥有广大的用户群体和开发者群体。</p><p>在数字的世界中，一幅图像由多个<strong>点</strong>（像素）组成。图像处理就是对其中一个像素或者一个区域内的像素（块）进行处理。无论是初学者还是富有经验的研发人员，他们都需要借助软件工具来分析这些像素和图像块，<strong>OpenCV则是其中最常用、最重要的一个软件工具。</strong></p><p>OpenCV成为最主要的图像处理工具包，是因为它功能齐全，支持目前主流的图像、视频处理算法，而且对外提供C++、Python和Java的接口，用户调用方便。本书的代码分析、示例程序及环境搭建基于OpenCV 4.1版本，源代码位于GitHub的OpenCV仓库。</p><h2 id="01-OpenCV库"><a href="#01-OpenCV库" class="headerlink" title="01 OpenCV库"></a><strong>01 OpenCV库</strong></h2><p>OpenCV由各种不同组件组成。OpenCV源代码主要由OpenCV core（核心库）、opencv_contrib和opencv_extra等子仓库组成。近些年，OpenCV的主仓库增加了深度学习相关的子仓库：OpenVINO（即DLDT, Deep Learning Deployment Toolkit）、open_model_zoo，以及标注工具CVAT等。</p><p>下面分别介绍<strong>3个主要的代码库</strong>：OpenCV core、opencv_contrib、opencv_extra。</p><h3 id="1-核心库OpenCV-core"><a href="#1-核心库OpenCV-core" class="headerlink" title="1. 核心库OpenCV core"></a><strong>1. 核心库OpenCV core</strong></h3><p>核心库是OpenCV的主要算法来源。OpenCV采用模块化结构设计，包含了多个共享或者静态库。目前OpenCV核心库提供了很多组件，如下所示。</p><ul><li><strong>核心功能模块：</strong>这是一个小巧而高效的模块，定义了基础的数据结构，包含紧密多尺度向量矩阵和一些供其他模块使用的基础函数</li><li><strong>图像处理模块：</strong>它包括了线性和非线性的图像滤波、几何图像变换（图像缩放、仿射变换、透视矫正、通用的基于表格的像素映射）、色域变换及直方图生成与分析等</li><li><strong>视频：</strong>这是一个视频分析模块，包含运动检测、背景减除和对象追踪等算法</li><li><strong>calib3d：</strong>包含基础的多视角几何算法、单个和立体相机标定算法、对象姿势预测算法、立体一致性算法，以及3D元素重建</li><li><strong>Features2d：</strong>图像显著特征检测、特征点描述和匹配</li><li><strong>Objdetect：</strong>对象检测和预先定义的类别检测（如脸、眼、杯子、人、车等）</li><li><strong>Highgui：</strong>提供了比较容易使用的UI接口</li><li><strong>Video I&#x2F;O：</strong>提供了基本的视频存取访问和编解码功能</li><li><strong>GPU：</strong>为不同的OpenCV算法模块提供GPU加速算法</li><li><strong>其他：</strong>如FLANN和Google测试封装层、Python绑定等</li></ul><h3 id="2-opencv-contrib"><a href="#2-opencv-contrib" class="headerlink" title="2. opencv_contrib"></a><strong>2. opencv_contrib</strong></h3><p><strong>opencv_contrib代码库主要用于管理新功能模块的开发。</strong>该库的设计主要基于以下考虑：处于初始开发阶段的功能模块，它的API定义会经常变化，各种测试也不够全面。</p><p>为了不影响OpenCV核心模块的稳定性，这些新功能模块会发布到opencv_contrib中。等到模块足够成熟并且在社区得到了足够的关注和使用之后，这个模块便会被移到OpenCV核心库，这意味着核心库开发团队将会对该模块进行全面的测试，保证这个模块具有产品级的质量。</p><p>例如，对于DNN这个模块，OpenCV 3.1开始出现在opencv_contrib中，到了3.3版本才移到了OpenCV核心库。</p><p>opencv_contrib需要和OpenCV核心库一同编译。下载好opencv_contrib的源代码并在CMake执行时传入参数：-DOPENCV_EXTRA_MODULES_PATH&#x3D;&lt;opencv_contrib源码路径&gt;&#x2F;modules。</p><p>如果编译时遇到问题，则可以在OpenCV核心库和opencv_contrib库的问题汇报页面,查看一下是否有现成的解决方案，如果没有，则读者可新建一个问题。OpenCV是一个活跃的社区，只要问题描述清晰、完整，一般会很快得到反馈。</p><h3 id="3-opencv-extra"><a href="#3-opencv-extra" class="headerlink" title="3. opencv_extra"></a><strong>3. opencv_extra</strong></h3><p><strong>opencv_extra仓库存放了运行测试和示例程序时需要使用的一些测试数据和脚本。</strong>例如，运行DNN模块测试程序或者示例程序时需要用到预训练模型，这些模型可以通过opencv_extra中的脚本来自动下载。近些年添加的opencv&#x2F;open_model_zoo仓库也增加了很多预训练好的深度学习模型，这些模型大多做过性能和速度上的调优。</p><h2 id="02-OpenCV深度学习应用的典型流程"><a href="#02-OpenCV深度学习应用的典型流程" class="headerlink" title="02 OpenCV深度学习应用的典型流程"></a><strong>02 OpenCV深度学习应用的典型流程</strong></h2><p>OpenCV是一个自包含库，可以不依赖于任何第三方库而运行，这个特性给开发调试带来了很大的便利。另外，OpenCV还提供了硬件加速功能，使得算法能够在各种平台高效地执行。</p><p>下面以一个识别性别和年龄的深度学习应用为例，展现OpenCV深度学习应用的典型流程。该应用使用C++语言，总共只需要百来行代码便可实现人脸检测、性别和年龄的识别功能，还可以方便地使用硬件的加速能力，提高程序的运行效率。此处展示核心流程，故以伪代码为例，完整的源代码由本书的参考代码库提供。</p><p><strong>该应用的核心流程如下：</strong>首先读取两个网络模型参数（分别是性别和年龄），然后检测人脸，转换输入图像，最后运行网络前向预测。伪代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入OpenCV DNN模块的命名空间</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv：：dnn;</span><br><span class="line"><span class="comment">// 创建人脸检测器</span></span><br><span class="line">CascadeClassifier cascade；</span><br><span class="line"><span class="comment">// 导入性别和年龄深度神经网络模型</span></span><br><span class="line">Net gender_net=dnn：：readNetFromCaffe（gender_modelTxt， gender_modelBin）；</span><br><span class="line">Net age_net=dnn：：readNetFromCaffe（age_modelTxt， age_modelBin）；</span><br><span class="line"><span class="comment">// 人脸检测</span></span><br><span class="line">cascade.load（cascadeName）；</span><br><span class="line">cascade.detectMultiScale（input_gray_file， output_faces_data）；</span><br><span class="line"><span class="comment">// 准备深度神经网络的输入数据</span></span><br><span class="line">Mat inputBlob=blobFromImage（input.getMat（ACCESS_READ））；</span><br><span class="line">gender_net.setInput（inputBlob, <span class="string">&quot;data&quot;</span>）；</span><br><span class="line">age_net.setInput（inputBlob, <span class="string">&quot;data&quot;</span>）；</span><br><span class="line"><span class="comment">// 执行模型的前向运算，即模型推理</span></span><br><span class="line">Mat gender_prob=gender_net.forward（<span class="string">&quot;prob&quot;</span>）；</span><br><span class="line">Mat age_prob=age_net.forward（<span class="string">&quot;prob&quot;</span>）；</span><br></pre></td></tr></table></figure><p>应用识别效果如图1-1所示。</p><p>▲图1-1 应用识别效果图</p><p> <img src="640.png" alt="图片"> </p><p>以上伪代码很好地展示了OpenCV深度学习应用的典型流程，如图1-2所示。</p><p> <img src="640-1682322916257.png" alt="图片"> </p><p>▲图1-2 OpenCV深度学习应用的典型流程</p><h2 id="03-OpenCV深度学习模块"><a href="#03-OpenCV深度学习模块" class="headerlink" title="03 OpenCV深度学习模块"></a><strong>03 OpenCV深度学习模块</strong></h2><p>深度学习模块是OpenCV为支持基于深度学习的计算机视觉应用所加入的新特性。OpenCV DNN模块于OpenCV 3.1版本开始出现在opencv_contrib库中，从3.3版本开始被纳入OpenCV核心库。</p><p>本节主要讲解OpenCV深度学习模块的实现原理和主要特性，通过这些内容，读者可以对OpenCV DNN有一个总体了解，并对OpenCV深度学习模块的应用代码有一个初步的印象。</p><p>作为计算机视觉领域的“标准库”，OpenCV为用户提供深度学习的支持是题中应有之义。OpenCV选择重新实现一个深度学习框架而不是直接调用现有的各种框架（如TensorFlow、Caffe等），有如下几点原因。</p><ul><li><strong>轻量：</strong>OpenCV的深度学习模块只实现了模型推理功能，这使得相关代码非常精简，加速了安装和编译过程。</li><li><strong>最少的外部依赖：</strong>重新实现一遍深度学习框架使得对外部依赖减到最小，大大方便了深度学习应用的部署。</li><li><strong>方便集成：</strong>①如果原来的应用是基于OpenCV开发的，通过深度学习模块可以非常方便地加入对神经网络推理的支持；②如果网络模型来自多个框架，如一个来自TensorFlow，一个来自Caffe，则深度学习模块可以方便整合网络运算结果。</li><li><strong>通用性：</strong>①提供统一的接口来操作网络模型；②内部所做的优化和加速对所有网络模型格式都适用；③支持多种设备和操作系统。</li></ul><h3 id="1-主要特性"><a href="#1-主要特性" class="headerlink" title="1. 主要特性"></a><strong>1. 主要特性</strong></h3><p><strong>OpenCV深度学习模块只提供网络推理功能，不支持网络训练。</strong>像所有的推理框架一样，加载和运行网络模型是基本的功能。深度学习模块支持TensorFlow、Caffe、Torch、DarkNet、ONNX和OpenVINO格式的网络模型，用户无须考虑原格式的差异。在加载过程中，各种格式的模型被转换成统一的内部网络结构。</p><p>深度学习模块支持所有的基本网络层类型和子结构，包括AbsVal、AveragePooling、BatchNormalization、Concatenation、Convolution (with DILATION)、Crop、DetectionOutput、Dropout、Eltwise、Flatten、FullConvolution、FullyConnected、LRN、LSTM、MaxPooling、MaxUnpooling、MVN、NormalizeBBox、Padding、Permute、Power、PReLU、PriorBox、Relu、RNN、Scale、Shift、Sigmoid、Slice、Softmax、Split和Tanh。</p><p>如果需要的层类型不在这个支持列表之内，则可以通过脚注中的申请链接来请求新的层类型的支持，OpenCV的开发者们有可能会在将来加入对该层类型的支持。<strong>读者也可以自己动手实现新的层类型，并把代码反馈回社区，参与到深度学习模块的开发中来。</strong></p><p>除了实现基本的层类型，支持常见的网络架构也很重要，经过严格测试，深度学习模块支持的网络架构如下所示。</p><h4 id="图像分类网络"><a href="#图像分类网络" class="headerlink" title="图像分类网络"></a><strong>图像分类网络</strong></h4><ul><li>Caffe：AlexNet、GoogLeNet、VGG、ResNet、SqueezeNet、DenseNet、ShuffleNet</li><li>TensorFlow：Inception、MobileNet</li><li>Darknet：darknet-imagenet</li><li>ONNX：AlexNet、GoogleNet、CaffeNet、RCNN_ILSVRC13、ZFNet512、VGG16、VGG16_bn、ResNet-18v1、ResNet-50v1、CNN Mnist、MobileNetv2、LResNet100E-IR、Emotion FERPlus、Squeezenet、DenseNet121、Inception-v1&#x2F;v2、ShuffleNet</li></ul><h4 id="对象检测网络"><a href="#对象检测网络" class="headerlink" title="对象检测网络"></a><strong>对象检测网络</strong></h4><ul><li><p>Caffe：SSD、VGG、MobileNet-SSD、Faster-RCNN、R-FCN、OpenCV face detector</p></li><li><p>TensorFlow：SSD、Faster-RCNN、Mask-RCNN、EAST</p></li><li><p>Darknet：YOLOv2、Tiny YOLO、YOLOv3</p></li><li><p>ONNX：TinyYOLOv2</p></li><li><p><strong>语义分割网络：</strong>FCN（Caffe）、ENet（Torch）、ResNet101_DUC_HDC（ONNX）</p></li><li><p><strong>姿势估计网络：</strong>openpose（Caffe）</p></li><li><p><strong>图像处理网络：</strong>Colorization（Caffe）、Fast-Neural-Style（Torch）</p></li><li><p><strong>人脸识别网络：</strong>openface（Torch）</p></li></ul><h3 id="2-OpenCV-DNN图像分类举例（Python）"><a href="#2-OpenCV-DNN图像分类举例（Python）" class="headerlink" title="2. OpenCV DNN图像分类举例（Python）"></a><strong>2. OpenCV DNN图像分类举例（Python）</strong></h3><p>C++和Python是OpenCV应用开发的主要语言，1.1.2节介绍了一个基于C++语言的深度学习应用，本节继续介绍一个基于Python的图像分类示例。</p><p>首先引入必要的Python库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># 引入numpy库</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv <span class="comment"># 引入OpenCV库，深度学习模块包含在其中</span></span><br></pre></td></tr></table></figure><p>读入类别文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(&#x27;synset_words.txt&#x27;) as f:</span><br><span class="line">  classes=[x[x.find(&#x27; &#x27;) + 1:] for x in f]</span><br></pre></td></tr></table></figure><p>读入待分类的图片：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image=cv.imread(&#x27;space_shuttle.jpg&#x27;)</span><br></pre></td></tr></table></figure><p>调用深度学习模块的blobFromImage方法将图片对象转换成网络模型的输入张量（tensor）。该张量的大小是224×224，参数中的(104,117,123)表示需要从输入张量减掉的均值，它是从训练网络模型时用到的数据集计算出来的，这里直接使用即可。第二个参数“1”表示将OpenCV的默认通道顺序BGR转换成网络模型要求的RGB通道顺序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input=cv.dnn.blobFromImage(image, 1, (224, 224), (104, 117, 123))</span><br></pre></td></tr></table></figure><p>下面来加载Caffe网络模型。注意，相关的模型参数和配置文件可在这里下载：</p><p><a href="http://dl.caffe.berkeleyvision.org/bvlc_googlenet.caffemodel">http://dl.caffe.berkeleyvision.org/bvlc_googlenet.caffemodel</a></p><p><a href="https://github.com/opencv/opencv_extra/blob/4.1.0/testdata/dnn/bvlc_googlenet.prototxt">https://github.com/opencv/opencv_extra/blob/4.1.0/testdata/dnn/bvlc_googlenet.prototxt</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net=cv.dnn.readNetFromCaffe(&#x27;bvlc_googlenet.prototxt&#x27;,</span><br><span class="line">              &#x27;bvlc_googlenet.caffemodel&#x27;)</span><br></pre></td></tr></table></figure><p>设置网络模型输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.setInput(input)</span><br></pre></td></tr></table></figure><p>执行网络推理并得到输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out=net.forward()</span><br></pre></td></tr></table></figure><p>从网络输出中获取最大的5个可能种类的索引值并输出类别名称和概率值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">indexes=np.argsort(out[0])[-5:]</span><br><span class="line">for i in reversed(indexes):</span><br><span class="line">　print (&#x27;class:&#x27;, classes[i], &#x27; probability:&#x27;, out[0][i])</span><br></pre></td></tr></table></figure><p>通过这个例子，我们可以看到一个基于深度学习模型的分类应用并不复杂，<strong>主要分3部分：模型导入、网络执行和结果解析。</strong> </p>]]></content>
      
      
      <categories>
          
          <category> -OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>torch_leran</title>
      <link href="/2023/04/05/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/torch%E6%95%99%E7%A8%8B/"/>
      <url>/2023/04/05/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/torch%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>跟随B站土堆up主的 <a href="https://www.bilibili.com/video/BV1hE411t7RN?p=6&vd_source=aa67ec1c08f743d3564f0d6bd14952f0">torch教程</a> ，学习torch的使用。</p><span id="more"></span><h2 id="touch下载"><a href="#touch下载" class="headerlink" title="touch下载"></a>touch下载</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install torch==1.9.0+cu111 torchvision==0.10.0+cu111 torchaudio===0.9.0 -f https://download.pytorch.org/whl/torch_stable.html -i https://pypi.douban.com/simple</span><br><span class="line">注意显卡和cuda版本对应，cuda和cudnn版本对应，torch和cuda版本对应</span><br></pre></td></tr></table></figure><h2 id="dataset和dataloader类。"><a href="#dataset和dataloader类。" class="headerlink" title="dataset和dataloader类。"></a>dataset和dataloader类。</h2><p>dataset主要是获取数据及其对应的label，并统计总共有多少个数据。</p><p>dataloader为网络提供不同的数据形式，如bachsize等。</p><h3 id="torchversion-dataset"><a href="#torchversion-dataset" class="headerlink" title="torchversion.dataset"></a>torchversion.dataset</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pytorch官网-&gt;Docs-&gt;torchvison下</span></span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line">dataset_tensor = torchvision.transforms.ToTensor()</span><br><span class="line"></span><br><span class="line">train_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../dataset_cifar10&quot;</span>, train=<span class="literal">True</span>, transform=dataset_tensor, download=<span class="literal">True</span>)</span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../dataset_cifar10&quot;</span>, train=<span class="literal">False</span>, transform=dataset_tensor, download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># img,target = test_set[0]</span></span><br><span class="line"><span class="comment"># print(test_set.classes)</span></span><br><span class="line"><span class="comment"># print(img)</span></span><br><span class="line"><span class="comment"># print(target)</span></span><br><span class="line"><span class="comment"># print(test_set[0])</span></span><br><span class="line"><span class="comment"># img.show()</span></span><br><span class="line"></span><br><span class="line">write = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    img,target1 = test_set[i]</span><br><span class="line">    write.add_image(<span class="string">&quot;data&quot;</span>, img, i)</span><br><span class="line">write.close()</span><br></pre></td></tr></table></figure><h3 id="torch-utils-data-DataLoader"><a href="#torch-utils-data-DataLoader" class="headerlink" title="torch.utils.data.DataLoader"></a>torch.utils.data.DataLoader</h3><blockquote><blockquote><p>batch_size #一次传入网络数据量<br>shuffle #数据是否打乱<br>sampler<br>batch_sampler<br>num_workers #是否多进程加载数据<br>collate_fn<br>pin_memory<br>drop_last #对于不能整除的数据量，最后一次是否舍弃<br>timeout<br>worker_init_fn<br>generator<br>prefetch_factor<br>persistent_workers<br>pin_memory_device </p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../dataset_cifar10&quot;</span>, train=<span class="literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line">test_loader = DataLoader(dataset=test_data,batch_size=<span class="number">64</span>,shuffle=<span class="literal">False</span>,num_workers=<span class="number">0</span>,drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">write = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    step = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">        img,target = data</span><br><span class="line">        write.add_images(<span class="string">&quot;loader:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(epoch),img,step)</span><br><span class="line">        step = step+<span class="number">1</span></span><br><span class="line">write.close()</span><br><span class="line"><span class="comment"># tensorboard显示不连续问题，使用如下：</span></span><br><span class="line"><span class="comment"># tensorboard --logdir=./src/logs --port=6007 --samples_per_plugin=images=10000</span></span><br></pre></td></tr></table></figure><h3 id="dataset实践代码"><a href="#dataset实践代码" class="headerlink" title="dataset实践代码"></a>dataset实践代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment">#__init__初始化类变量，相当于构造函数，实例化时就把对应的参数传入</span></span><br><span class="line"><span class="comment">#self相当于类的this指针</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyData</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,root_dir,label_dir</span>):</span><br><span class="line">        self.root_dir=root_dir</span><br><span class="line">        self.label_dir=label_dir</span><br><span class="line">        <span class="comment">#os.path.join（）自动拼接路径，按照对应的系统</span></span><br><span class="line">        self.path=os.path.join(self.root_dir,self.label_dir)</span><br><span class="line">        <span class="comment">#os.listdir()将对应路径下的文件生成列表</span></span><br><span class="line">        self.img_path=os.listdir(self.path)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self,idx</span>):</span><br><span class="line">        img_name=self.img_path[idx]</span><br><span class="line">        img_item_path=os.path.join(self.root_dir,self.label_dir,img_name)</span><br><span class="line">        img=cv2.imread(img_item_path)</span><br><span class="line">        label=self.label_dir</span><br><span class="line">        <span class="keyword">return</span> img,label</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.img_path)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">root_dir=<span class="string">&quot;D:\\A_project\\1dataset\\train&quot;</span></span><br><span class="line">ants_label_dir=<span class="string">&quot;ants_image&quot;</span></span><br><span class="line">bees_label_dir=<span class="string">&quot;bees_image&quot;</span></span><br><span class="line">ants_dataset=MyData(root_dir,ants_label_dir)</span><br><span class="line">bees_dataset=MyData(root_dir,bees_label_dir)</span><br><span class="line">img,label=ants_dataset[<span class="number">0</span>]</span><br><span class="line">img1,label1=bees_dataset[<span class="number">0</span>]</span><br><span class="line">cv2.imshow(<span class="string">&quot;1&quot;</span>,img)</span><br><span class="line">cv2.imshow(<span class="string">&quot;2&quot;</span>,img1)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"><span class="comment">#可以直接通过  +  拼接数据集</span></span><br><span class="line">train_dataset=ants_dataset+bees_dataset</span><br><span class="line"><span class="built_in">len</span>(train_dataset)</span><br><span class="line">img,label=train_dataset[<span class="number">123</span>]</span><br><span class="line">img1,label1=train_dataset[<span class="number">124</span>]</span><br><span class="line">cv2.imshow(<span class="string">&quot;1&quot;</span>,img)</span><br><span class="line">cv2.imshow(<span class="string">&quot;2&quot;</span>,img1)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="根据data生成对应的label-txt文件"><a href="#根据data生成对应的label-txt文件" class="headerlink" title="根据data生成对应的label.txt文件"></a>根据data生成对应的label.txt文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建于数据集对应的label  txt文件</span></span><br><span class="line">root_dir=<span class="string">&quot;D:\\A_project\\1dataset\\train&quot;</span></span><br><span class="line">ants_label_dir=<span class="string">&quot;bees_image&quot;</span></span><br><span class="line">img_path=os.listdir(os.path.join(root_dir,ants_label_dir))</span><br><span class="line">label=ants_label_dir.split(<span class="string">&#x27;_&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">out_dir=<span class="string">&quot;bees_label&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> img_path:</span><br><span class="line">    file_name=i.split(<span class="string">&#x27;.jpg&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(root_dir,out_dir,<span class="string">&quot;&#123;&#125;.txt&quot;</span>.<span class="built_in">format</span>(file_name)),<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(label)</span><br></pre></td></tr></table></figure><h2 id="TensorBoard的使用"><a href="#TensorBoard的使用" class="headerlink" title="TensorBoard的使用"></a>TensorBoard的使用</h2><p>TensorBoard用于可视化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 保存位置</span></span><br><span class="line"><span class="comment">#展示一张图片</span></span><br><span class="line">write = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">img_path = <span class="string">&quot;C:\\Users\\yjt\\Desktop\\1.jpg&quot;</span></span><br><span class="line">img = cv2.imread(img_path)</span><br><span class="line"><span class="comment">#标签框title 数据 位置(通过滑块展示) 类型</span></span><br><span class="line">write.add_image(<span class="string">&quot;test&quot;</span>, img, <span class="number">1</span>, dataformats=<span class="string">&#x27;HWC&#x27;</span>)</span><br><span class="line"><span class="comment">#输出一个函数图y=2*x</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    write.add_scalar(<span class="string">&quot;y=2x&quot;</span>, <span class="number">2</span> * i, i)</span><br><span class="line">write.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># --port=6007 指定端口号</span></span><br><span class="line"><span class="comment"># tensorboard --logdir=./src/logs --port=6007</span></span><br></pre></td></tr></table></figure><h2 id="transform使用"><a href="#transform使用" class="headerlink" title="transform使用"></a>transform使用</h2><p>transform主要用于图像变换,其中最常用的就是Totensor类，将数据转为tensor类型。</p><p>tensor数据类型包含了许多神经网络需要的参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line">img_path = <span class="string">&quot;../1dataset/train/ants_image/0013035.jpg&quot;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line"></span><br><span class="line">write = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line"><span class="comment"># Totensor</span></span><br><span class="line">tensor = transforms.ToTensor()</span><br><span class="line">img_tensor = tensor(img)</span><br><span class="line">write.add_image(<span class="string">&quot;tensor_img&quot;</span>, img_tensor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># normalize </span></span><br><span class="line"><span class="built_in">print</span>(img_tensor[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">norm = transforms.Normalize([<span class="number">9</span>,<span class="number">3</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>])</span><br><span class="line">img_norm = norm(img_tensor)</span><br><span class="line"><span class="built_in">print</span>(img_norm[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">write.add_image(<span class="string">&quot;norm_img&quot;</span>, img_norm,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># resize</span></span><br><span class="line"><span class="built_in">print</span>(img.size)</span><br><span class="line"><span class="comment"># 第一种直接赋值，第二种缩放</span></span><br><span class="line">trans_resize = transforms.Resize((<span class="number">512</span>, <span class="number">512</span>))</span><br><span class="line">trans_resize1 = transforms.Resize(<span class="number">200</span>)</span><br><span class="line"><span class="comment"># compose相当于组合，前一个函数的输出与后一个函数的输入必须相同</span></span><br><span class="line">trans_compose = transforms.Compose([trans_resize1,tensor])</span><br><span class="line">img_resize = trans_compose(img)</span><br><span class="line"></span><br><span class="line"><span class="comment"># randomcrop</span></span><br><span class="line">trans_rcrop = transforms.RandomCrop(<span class="number">200</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    img_crop = trans_rcrop(img)</span><br><span class="line">    img_crop_t = tensor(img_crop)</span><br><span class="line">    write.add_image(<span class="string">&quot;img_crop&quot;</span>, img_crop_t, i)</span><br><span class="line">write.close()</span><br></pre></td></tr></table></figure><h2 id="nn-module"><a href="#nn-module" class="headerlink" title="nn.module"></a>nn.module</h2><p>torch官网，看module例程。</p><ul><li><a href="https://pytorch.org/docs/stable/nn.html#containers">Containers</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myModule</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__int__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__int__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,<span class="built_in">input</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">input</span> + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">mc = myModule()</span><br><span class="line">input1 = torch.tensor(<span class="number">1.0</span>)</span><br><span class="line">output1 = mc(input1)</span><br><span class="line"><span class="built_in">print</span>(output1)</span><br></pre></td></tr></table></figure><h2 id="nn-convolution"><a href="#nn-convolution" class="headerlink" title="nn.convolution"></a>nn.convolution</h2><ul><li><a href="https://pytorch.org/docs/stable/nn.html#convolution-layers">Convolution Layers</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../dataset_cifar10&quot;</span>, train=<span class="literal">False</span>,</span><br><span class="line">                                         transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line">test_loader = DataLoader(test_data,batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_class</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(in_channels=<span class="number">3</span>,out_channels=<span class="number">6</span>,kernel_size=<span class="number">3</span>,stride=<span class="number">1</span>,padding=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.conv1(x)</span><br><span class="line">step = <span class="number">0</span></span><br><span class="line">write = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">ml = my_class()</span><br><span class="line"><span class="built_in">print</span>(ml)</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">    imgs ,target = data</span><br><span class="line">    write.add_images(<span class="string">&quot;img&quot;</span>,imgs,step)</span><br><span class="line">    outs = ml(imgs)</span><br><span class="line">    outs = torch.reshape(outs,(-<span class="number">1</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">32</span>))</span><br><span class="line">    write.add_images(<span class="string">&quot;conv&quot;</span>,outs,step)</span><br><span class="line">    step = step + <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="maxpool"><a href="#maxpool" class="headerlink" title="maxpool"></a>maxpool</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../dataset_cifar10&quot;</span>, train=<span class="literal">False</span>,</span><br><span class="line">                                         transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line">test_loader = DataLoader(test_data,batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_class</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment">#步长默认等于kernel_size</span></span><br><span class="line">        self.maxpool = nn.MaxPool2d(kernel_size=<span class="number">3</span>,ceil_mode=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.maxpool(x)</span><br><span class="line">step = <span class="number">0</span></span><br><span class="line">write = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">ml = my_class()</span><br><span class="line"><span class="built_in">print</span>(ml)</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">    imgs ,target = data</span><br><span class="line">    write.add_images(<span class="string">&quot;img&quot;</span>,imgs,step)</span><br><span class="line">    outs = ml(imgs)</span><br><span class="line">    write.add_images(<span class="string">&quot;pool&quot;</span>,outs,step)</span><br><span class="line">    step = step + <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="linear"><a href="#linear" class="headerlink" title="linear"></a>linear</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../dataset_cifar10&quot;</span>, train=<span class="literal">False</span>,transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line">test_loader = DataLoader(test_data,batch_size=<span class="number">64</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_class</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.linear1 = nn.Linear(<span class="number">196608</span>,<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.linear1(x)</span><br><span class="line">step = <span class="number">0</span></span><br><span class="line">write = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">ml = my_class()</span><br><span class="line"><span class="built_in">print</span>(ml)</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">    imgs ,target = data</span><br><span class="line">    outs = torch.reshape(imgs,(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>))</span><br><span class="line">    <span class="built_in">print</span>(outs.shape)</span><br><span class="line">    <span class="comment"># torch.flatten(tensor) 就是 torch.reshape(tensor,(1,1,1,-1))</span></span><br><span class="line">    <span class="comment">#outs1 = torch.flatten(imgs)</span></span><br><span class="line">    outs = ml(outs)</span><br><span class="line">    <span class="built_in">print</span>(outs.shape)</span><br><span class="line">    step = step + <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="网络搭建"><a href="#网络搭建" class="headerlink" title="网络搭建"></a>网络搭建</h2><p> <img src="Structure-of-CIFAR10-quick-model.png" alt="Structure of CIFAR10-quick model.  "> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_class</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(in_channels=<span class="number">3</span>,out_channels=<span class="number">32</span>,kernel_size=<span class="number">5</span>,stride=<span class="number">1</span>,padding=<span class="number">2</span>)</span><br><span class="line">        self.maxpool2=nn.MaxPool2d(<span class="number">2</span>)</span><br><span class="line">        self.conv3 = nn.Conv2d(in_channels=<span class="number">32</span>,out_channels=<span class="number">32</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>)</span><br><span class="line">        self.maxpool4 = nn.MaxPool2d(<span class="number">2</span>)</span><br><span class="line">        self.conv5 = nn.Conv2d(in_channels=<span class="number">32</span>,out_channels=<span class="number">64</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>)</span><br><span class="line">        self.maxpool6 = nn.MaxPool2d(<span class="number">2</span>)</span><br><span class="line">        self.flatten7 = nn.Flatten()</span><br><span class="line">        <span class="comment"># 线性层的输入不知道的时候可以pritf(flatten层查看)</span></span><br><span class="line">        self.linear8 = nn.Linear(<span class="number">1024</span>,<span class="number">64</span>)</span><br><span class="line">        self.linear9 = nn.Linear(<span class="number">64</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="built_in">input</span> = self.conv1(<span class="built_in">input</span>)</span><br><span class="line">        <span class="built_in">input</span> = self.maxpool2(<span class="built_in">input</span>)</span><br><span class="line">        <span class="built_in">input</span> = self.conv3(<span class="built_in">input</span>)</span><br><span class="line">        <span class="built_in">input</span> = self.maxpool4(<span class="built_in">input</span>)</span><br><span class="line">        <span class="built_in">input</span> = self.conv5(<span class="built_in">input</span>)</span><br><span class="line">        <span class="built_in">input</span> = self.maxpool6(<span class="built_in">input</span>)</span><br><span class="line">        <span class="built_in">input</span> = self.flatten7(<span class="built_in">input</span>)</span><br><span class="line">        <span class="built_in">input</span> = self.linear8(<span class="built_in">input</span>)</span><br><span class="line">        <span class="built_in">input</span> = self.linear9(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">input</span></span><br><span class="line"></span><br><span class="line">mc = my_class()</span><br><span class="line"><span class="comment"># 通过下面代码测试网络输出是否想要的</span></span><br><span class="line">input1 = torch.ones(<span class="number">64</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">32</span>)</span><br><span class="line">outs = mc(input1)</span><br><span class="line"><span class="built_in">print</span>(outs.shape)</span><br><span class="line"><span class="comment"># 采用tensorboard也可以查看网络结构 </span></span><br><span class="line">write = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">write.add_graph(mc,input1)</span><br><span class="line">write.close()</span><br></pre></td></tr></table></figure><h2 id="sequential"><a href="#sequential" class="headerlink" title="sequential"></a>sequential</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">my_class</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.module1 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">3</span>,out_channels=<span class="number">32</span>,kernel_size=<span class="number">5</span>,stride=<span class="number">1</span>,padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            nn.Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="keyword">return</span> self.module1(<span class="built_in">input</span>)</span><br></pre></td></tr></table></figure><h2 id="损失函数与反向传播"><a href="#损失函数与反向传播" class="headerlink" title="损失函数与反向传播"></a>损失函数与反向传播</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> L1Loss,MSELoss</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../dataset_cifar10&quot;</span>, train=<span class="literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line">test_loader = DataLoader(dataset=test_data,batch_size=<span class="number">1</span>,shuffle=<span class="literal">False</span>,num_workers=<span class="number">0</span>,drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_class</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.module1 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">3</span>,out_channels=<span class="number">32</span>,kernel_size=<span class="number">5</span>,stride=<span class="number">1</span>,padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            nn.Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="keyword">return</span> self.module1(<span class="built_in">input</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input1 = torch.Tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">target1 = torch.Tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>])</span><br><span class="line">input1 = torch.reshape(input1,(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>))</span><br><span class="line">target1 = torch.reshape(target1,(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>))</span><br><span class="line">loss1 = L1Loss(reduction=<span class="string">&#x27;mean&#x27;</span>)</span><br><span class="line">loss2 = L1Loss(reduction=<span class="string">&#x27;sum&#x27;</span>)</span><br><span class="line">loss_mse = MSELoss()</span><br><span class="line"></span><br><span class="line">result1 = loss1(input1,target1)</span><br><span class="line">result2 = loss2(input1,target1)</span><br><span class="line">result3 = loss_mse(input1,target1)</span><br><span class="line"></span><br><span class="line">x = torch.tensor([<span class="number">0.1</span>,<span class="number">0.2</span>,<span class="number">0.3</span>])</span><br><span class="line">y = torch.tensor([<span class="number">1</span>])</span><br><span class="line">x = torch.reshape(x,(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">loss_cross = nn.CrossEntropyLoss()</span><br><span class="line">result4 = loss_cross(x,y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result1)</span><br><span class="line"><span class="built_in">print</span>(result2)</span><br><span class="line"><span class="built_in">print</span>(result3)</span><br><span class="line"><span class="built_in">print</span>(result4)</span><br><span class="line"></span><br><span class="line">mc = my_class()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">    imgs,targets = data</span><br><span class="line">    outs = mc(imgs)</span><br><span class="line">    loss_cross_result = loss_cross(outs,targets)</span><br><span class="line">    loss_cross_result.backward()</span><br><span class="line">    <span class="built_in">print</span>(loss_cross_result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> L1Loss,MSELoss</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../dataset_cifar10&quot;</span>, train=<span class="literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line">test_loader = DataLoader(dataset=test_data,batch_size=<span class="number">1</span>,shuffle=<span class="literal">False</span>,num_workers=<span class="number">0</span>,drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_class</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.module1 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">3</span>,out_channels=<span class="number">32</span>,kernel_size=<span class="number">5</span>,stride=<span class="number">1</span>,padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            nn.Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="keyword">return</span> self.module1(<span class="built_in">input</span>)</span><br><span class="line"></span><br><span class="line">loss_cross = nn.CrossEntropyLoss()</span><br><span class="line">mc = my_class()</span><br><span class="line">optim = torch.optim.SGD(mc.parameters(), lr=<span class="number">0.01</span>)</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    running_loss = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">        imgs,targets = data</span><br><span class="line">        outs = mc(imgs)</span><br><span class="line">        loss_cross_result = loss_cross(outs,targets)</span><br><span class="line">        optim.zero_grad()</span><br><span class="line">        loss_cross_result.backward()</span><br><span class="line">        optim.step()</span><br><span class="line">        running_loss = running_loss + loss_cross_result</span><br><span class="line">    <span class="built_in">print</span>(running_loss)</span><br></pre></td></tr></table></figure><h2 id="官网模型导入及修改-保存-读取"><a href="#官网模型导入及修改-保存-读取" class="headerlink" title="官网模型导入及修改,保存 读取"></a>官网模型导入及修改,保存 读取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line">vgg16_false = torchvision.models.vgg16(pretrained= <span class="literal">False</span>)</span><br><span class="line">vgg16_true = torchvision.models.vgg16(pretrained= <span class="literal">True</span>)</span><br><span class="line">vgg16_true1 = torchvision.models.vgg16()</span><br><span class="line"><span class="comment"># 添加网络层</span></span><br><span class="line">vgg16_true.classifier.add_module(<span class="string">&quot;add_linear&quot;</span>,nn.Linear(<span class="number">1000</span>,<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(vgg16_true)</span><br><span class="line"><span class="comment"># 修改网络层</span></span><br><span class="line">vgg16_false.classifier[<span class="number">6</span>]=nn.Linear(<span class="number">4096</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(vgg16_false)</span><br><span class="line"><span class="comment"># 保存 网络结构与参数</span></span><br><span class="line">torch.save(vgg16_false, <span class="string">&#x27;../models/vgg16_f.pt&#x27;</span>)</span><br><span class="line"><span class="comment"># 读取</span></span><br><span class="line">vgg16 = torch.load(<span class="string">&#x27;../models/vgg16_f.pt&#x27;</span>)</span><br><span class="line"><span class="comment"># 保存方式2 只保存参数</span></span><br><span class="line">torch.save(vgg16_true1.state_dict(),<span class="string">&#x27;../models/vgg16_f1.pt&#x27;</span>)</span><br><span class="line"><span class="comment"># 读取方式2</span></span><br><span class="line">vgg161 = torchvision.models.vgg16()</span><br><span class="line">vgg161.load_state_dict(torch.load(<span class="string">&#x27;../models/vgg16_f1.pt&#x27;</span>))</span><br><span class="line"><span class="comment"># torch.load(&#x27;../models/vgg16_f1.pt&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># *****注意</span></span><br><span class="line"><span class="comment"># *****</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myclass</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">3</span>,<span class="number">64</span>,kernel_size=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"><span class="comment"># mc = myclass()</span></span><br><span class="line"><span class="comment"># torch.save(mc,&#x27;../models/mc.pt&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果直接读取模型会报错，必须导入模型的定义1.ctrl c v模型的定义到本文件  或  2.import 定义的文件</span></span><br><span class="line">mc1 = torch.load(<span class="string">&#x27;../models/mc.pt&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="完整模型训练过程"><a href="#完整模型训练过程" class="headerlink" title="完整模型训练过程"></a>完整模型训练过程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="comment"># 模型定义</span></span><br><span class="line"><span class="keyword">from</span> module <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../dataset_cifar10&quot;</span>, train=<span class="literal">True</span>, transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../dataset_cifar10&quot;</span>, train=<span class="literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">train_data_len = <span class="built_in">len</span>(train_data)</span><br><span class="line">test_data_len = <span class="built_in">len</span>(test_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;训练集长度:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_len))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;测试集长度:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(test_data_len))</span><br><span class="line"></span><br><span class="line">train_dataloader = DataLoader(train_data,batch_size=<span class="number">64</span>)</span><br><span class="line">test_dataloader = DataLoader(test_data,batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型单独一个py文件，并通过main测试模型的输出</span></span><br><span class="line">mc = my_class()</span><br><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line">loss_f = nn.CrossEntropyLoss()</span><br><span class="line"><span class="comment"># 优化器</span></span><br><span class="line">learing_rate = <span class="number">0.01</span></span><br><span class="line">optinizer = torch.optim.SGD(mc.parameters(),lr=learing_rate)</span><br><span class="line"></span><br><span class="line">write = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line"><span class="comment"># 设置训练网络的参数</span></span><br><span class="line"><span class="comment"># 记录训练的次数</span></span><br><span class="line">total_train_step = <span class="number">0</span></span><br><span class="line"><span class="comment"># 记录测试的次数</span></span><br><span class="line">total_test_step = <span class="number">0</span></span><br><span class="line"><span class="comment"># 训练轮数</span></span><br><span class="line">epoch = <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----第 &#123;&#125; 轮训练开始-----&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>))</span><br><span class="line">    mc.train()</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> train_dataloader:</span><br><span class="line">        imgs,target = data</span><br><span class="line">        output = mc(imgs)</span><br><span class="line">        loss = loss_f(output,target)</span><br><span class="line">        <span class="comment"># 优化模型</span></span><br><span class="line">        optinizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optinizer.step()</span><br><span class="line"></span><br><span class="line">        total_train_step = total_train_step+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> total_train_step % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># loss.item()将tensor转为int</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;训练次数:&#123;&#125;  ,loss:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step,loss.item()))</span><br><span class="line">        write.add_scalar(<span class="string">&quot;train_loss&quot;</span>,loss.item(),total_train_step)</span><br><span class="line">    <span class="comment"># 测试</span></span><br><span class="line">    total_test_loss = <span class="number">0</span></span><br><span class="line">    total_accuracy = <span class="number">0</span></span><br><span class="line">    mc.<span class="built_in">eval</span>()</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> test_dataloader:</span><br><span class="line">            imgs,target = data</span><br><span class="line">            output = mc(imgs)</span><br><span class="line">            loss = loss_f(output,target)</span><br><span class="line">            total_test_loss = loss + total_test_loss</span><br><span class="line">            <span class="comment"># .argmax 参数0，操作列，1操作行，取行或列中最大数的下标。[0.2.0.4,0.3,0.1]结果是1</span></span><br><span class="line">            <span class="comment"># ==直接将结果与target比较，相同即为正确为true，然后.sum求和，除以test_data_size即为正确率</span></span><br><span class="line">            accuracy = (output.argmax(<span class="number">1</span>) == target).<span class="built_in">sum</span>()</span><br><span class="line">            total_accuracy = total_accuracy+accuracy</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试集误差：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_loss))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试集整体正确率:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_accuracy/test_data_len))</span><br><span class="line">    write.add_scalar(<span class="string">&quot;test_loss&quot;</span>, loss.item(), total_test_step)</span><br><span class="line">    total_test_step = total_test_step+<span class="number">1</span></span><br><span class="line">    write.add_scalar(<span class="string">&quot;test_accuracy&quot;</span>,total_accuracy/test_data_len,total_test_step)</span><br><span class="line">    torch.save(mc,<span class="string">&quot;../model_&#123;&#125;.pt&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">    <span class="comment"># torch.save(mc.state_dict(),&quot;tuidui_&#123;&#125;.pt&quot;.format(i))</span></span><br><span class="line">write.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_class</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.module1 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">3</span>,out_channels=<span class="number">32</span>,kernel_size=<span class="number">5</span>,stride=<span class="number">1</span>,padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            nn.Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="keyword">return</span> self.module1(<span class="built_in">input</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    mc = my_class()</span><br><span class="line">    <span class="built_in">input</span> = torch.ones(<span class="number">64</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">32</span>)</span><br><span class="line">    output = mc(<span class="built_in">input</span>)</span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 并不是用了才能训练，只针对某些特定的网络层，具体介绍查看pytorch官网model</span><br><span class="line">mc.train()</span><br><span class="line">mv.eval()</span><br><span class="line"></span><br><span class="line">device = torch.device(&quot;cuda&quot; if torch.cuda.is_available() else &quot;cpu&quot;)</span><br></pre></td></tr></table></figure><h2 id="gpu加速"><a href="#gpu加速" class="headerlink" title="gpu加速"></a>gpu加速</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">11111111111111111111111111111111</span><br><span class="line">在模型实例化后 mc=mc.cuda()</span><br><span class="line">在损失函数后 loss_f = loss_f.cuda()</span><br><span class="line">在从dataloader中取出数据后.cuda</span><br><span class="line"></span><br><span class="line">if torch.cuda.is_available()</span><br><span class="line">mc=mc.cuda()</span><br><span class="line"></span><br><span class="line">222222222222222222222222222222222</span><br><span class="line">如果没有gpu，可使用google colab</span><br><span class="line"></span><br><span class="line">33333333333333333333333333333333</span><br><span class="line">还是第一种三个地方</span><br><span class="line">.to（device）</span><br><span class="line">device = torch.device(&quot;cpu&quot;)</span><br><span class="line">device = torch.device(&quot;cuda&quot;)</span><br><span class="line">device = torch.device(&quot;cuda:1&quot;)多显卡</span><br><span class="line">device = torch.device(&quot;cuda&quot; if torch.cuda.is_avaliable() else &quot;cpu&quot;)</span><br></pre></td></tr></table></figure><h2 id="验证测试模型"><a href="#验证测试模型" class="headerlink" title="验证测试模型"></a>验证测试模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line">img_path = <span class="string">&quot;../images/dog.png&quot;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line"><span class="comment"># 保留rgb三通道  不要透明度通道</span></span><br><span class="line">img = img.convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line"><span class="comment"># 大小 格式转换</span></span><br><span class="line">transform = torchvision.transforms.Compose([torchvision.transforms.Resize((<span class="number">32</span>,<span class="number">32</span>)),</span><br><span class="line">                                            torchvision.transforms.ToTensor()])</span><br><span class="line">img = transform(img)</span><br><span class="line"></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_class</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.module1 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">3</span>,out_channels=<span class="number">32</span>,kernel_size=<span class="number">5</span>,stride=<span class="number">1</span>,padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            nn.Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="keyword">return</span> self.module1(<span class="built_in">input</span>)</span><br><span class="line"><span class="comment"># 模型读取</span></span><br><span class="line">model = torch.load(<span class="string">&quot;../models/model_27.pt&quot;</span>)</span><br><span class="line">img = torch.reshape(img,(<span class="number">1</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">32</span>))</span><br><span class="line">img = img.to(device)</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    output = model(img)</span><br><span class="line"><span class="built_in">print</span>(output.argmax(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="跑项目时"><a href="#跑项目时" class="headerlink" title="跑项目时"></a>跑项目时</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">required  替换为  default</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> torch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> torch </tag>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取豆瓣top250</title>
      <link href="/2023/03/20/python/%E7%88%AC%E8%99%AB/"/>
      <url>/2023/03/20/python/%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<p>通过python爬取豆瓣网top250的电影信息，熟悉爬虫的实现原理与过程。</p><span id="more"></span><h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>就是模拟浏览器访问网址，并将有用的数据保存到本地数据库。</p><p>headers是浏览器向服务器发送的消息。包括：response headers即服务器地址访问时间等等。cookie：浏览器访问记录、登录信息等，若访问需要登录的网站可以修改cookie而不登录访问。 </p><p>User-Agent：包含计算机、浏览器版本信息等。</p><p>计算机网络，html，json，数据库。</p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p><img src="1657525467851.png" alt="1657525467851"></p><p><img src="1657525695322.png" alt="1657525695322"></p><p><img src="1657525905894.png" alt="1657525905894"></p><p><img src="1657526025951.png" alt="1657526025951"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- codeing = utf-8 -*-</span></span><br><span class="line"><span class="comment">#@Time:2022.7.10</span></span><br><span class="line"><span class="comment">#@Author:涛</span></span><br><span class="line"><span class="comment">#@File:spider_douban</span></span><br><span class="line"><span class="comment">#@Software:jupyter notebook</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup      <span class="comment">#网页及解析，获取数据</span></span><br><span class="line"><span class="keyword">import</span> re       <span class="comment">#正则表达式，进行文字匹配</span></span><br><span class="line"><span class="keyword">import</span> urllib   <span class="comment">#制定url，获取网页数据</span></span><br><span class="line"><span class="keyword">import</span> xlwt     <span class="comment">#进行excel操作</span></span><br><span class="line"><span class="keyword">import</span> sqlite3  <span class="comment">#进行sqlite数据库操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#正则表达式的全局变量，&#x27;&#x27;号中间（）号中的内容即是所需要的内容</span></span><br><span class="line">findlink = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;a href=&quot;(.*?)&quot;&gt;&#x27;</span>)<span class="comment">#影片详情链接的正则表达式</span></span><br><span class="line">findImgSrc = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;img.*src=&quot;(.*?)&quot;&#x27;</span>,re.S) <span class="comment">#re.S让换行符包含在字符中</span></span><br><span class="line">findTitle = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span class=&quot;title&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)</span><br><span class="line">findRating = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span class=&quot;rating_num&quot; property=&quot;v:average&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)</span><br><span class="line">findJudge = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span&gt;(\d*)人评价&lt;/span&gt;&#x27;</span>)</span><br><span class="line">findInq = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span class=&quot;inq&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)<span class="comment">#概述</span></span><br><span class="line">findBd = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;p class=&quot;&quot;&gt;(.*?)&lt;/p&gt;&#x27;</span>,re.S)<span class="comment">#详细信息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    baseurl = <span class="string">&quot;https://movie.douban.com/top250?start=&quot;</span></span><br><span class="line">    datalist = getData(baseurl)</span><br><span class="line">    <span class="comment">#savepath = &quot;豆瓣电影Top250.xls&quot;</span></span><br><span class="line">    <span class="comment">#saveData(datalist,savepath)</span></span><br><span class="line">    </span><br><span class="line">    dbpath = <span class="string">&quot;movie.db&quot;</span></span><br><span class="line">    saveDataDb(datalist,dbpath)</span><br><span class="line">    print_movie_db(dbpath)</span><br><span class="line"></span><br><span class="line"><span class="comment">#爬取网页</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getData</span>(<span class="params">baseurl</span>):</span><br><span class="line">    datalist = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">        url = baseurl + <span class="built_in">str</span>(i*<span class="number">25</span>)</span><br><span class="line">        html = askURL(url)</span><br><span class="line">        <span class="comment">#逐一解析数据</span></span><br><span class="line">        soup = BeautifulSoup(html,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;div&#x27;</span>,class_=<span class="string">&quot;item&quot;</span>):<span class="comment">#查找符合要求的字符串，形成列表</span></span><br><span class="line">            <span class="comment">#print(item)</span></span><br><span class="line">            data = []</span><br><span class="line">            item = <span class="built_in">str</span>(item)<span class="comment">#转为字符串使用re正则表达式查找</span></span><br><span class="line">            <span class="comment">#在所有字符串中 找到满足要求的  影片详情链接</span></span><br><span class="line">            link = re.findall(findlink,item)[<span class="number">0</span>]<span class="comment">#findall 找到所有的，并保留第一个</span></span><br><span class="line">            data.append(link)</span><br><span class="line">            </span><br><span class="line">            imgSrc = re.findall(findImgSrc,item)[<span class="number">0</span>]</span><br><span class="line">            data.append(imgSrc)</span><br><span class="line">            </span><br><span class="line">            title = re.findall(findTitle,item)<span class="comment">#片名会有外国名  分别保存</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">len</span>(title)==<span class="number">2</span>):</span><br><span class="line">                ctitle = title[<span class="number">0</span>]</span><br><span class="line">                data.append(ctitle)</span><br><span class="line">                otitle = title[<span class="number">1</span>].replace(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;&quot;</span>)<span class="comment">#外国名 前面有一个/需要去掉，replace就是用后一个代替前一个</span></span><br><span class="line">                data.append(otitle)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data.append(title[<span class="number">0</span>])</span><br><span class="line">                data.append(<span class="string">&#x27; &#x27;</span>)        <span class="comment">#如果没有外国名，就将名字留空，不然表格会乱            </span></span><br><span class="line">            </span><br><span class="line">            Rating = re.findall(findRating,item)[<span class="number">0</span>]</span><br><span class="line">            data.append(Rating)</span><br><span class="line">            </span><br><span class="line">            Judge = re.findall(findJudge,item)[<span class="number">0</span>]</span><br><span class="line">            data.append(Judge)</span><br><span class="line">            </span><br><span class="line">            Inq = re.findall(findInq,item)   <span class="comment">#概述可能没有</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(Inq) != <span class="number">0</span>:</span><br><span class="line">                Inq= Inq[<span class="number">0</span>].replace(<span class="string">&quot;。&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">                data.append(Inq)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data.append(<span class="string">&quot; &quot;</span>)</span><br><span class="line">            </span><br><span class="line">            Bd = re.findall(findBd,item)[<span class="number">0</span>]</span><br><span class="line">            Bd = re.sub(<span class="string">&#x27;&lt;br(\s+)?/&gt;(\s+)?&#x27;</span>,<span class="string">&quot; &quot;</span>,Bd)  <span class="comment">#替换没必要的内容</span></span><br><span class="line">            Bd = re.sub(<span class="string">&#x27;/&#x27;</span>,<span class="string">&quot; &quot;</span>,Bd)</span><br><span class="line">            Bd = Bd.strip()<span class="comment">#  strip 去掉空格</span></span><br><span class="line">            data.append(Bd)</span><br><span class="line">            datalist.append(data)</span><br><span class="line">    <span class="keyword">return</span> datalist</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#用户代理，告诉服务器我们能接受  解析什么样的数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">askURL</span>(<span class="params">url</span>):</span><br><span class="line">    head = &#123;<span class="comment">#模拟浏览器头部信息，向豆瓣服务器发送消息。</span></span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.49&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    request = urllib.request.Request(url,headers=head)</span><br><span class="line">    html = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = urllib.request.urlopen(request)</span><br><span class="line">        html = response.read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="comment">#print(html)</span></span><br><span class="line">    <span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(e,<span class="string">&quot;code&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(e.code)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(e,<span class="string">&quot;reason&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(e.reason)</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line">    </span><br><span class="line"><span class="comment">#保存数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">saveData</span>(<span class="params">datalist,savepath</span>):</span><br><span class="line">    book = xlwt.Workbook(encoding=<span class="string">&quot;utf-8&quot;</span>,style_compression=<span class="number">0</span>)</span><br><span class="line">    sheet = book.add_sheet(<span class="string">&#x27;豆瓣电影top250&#x27;</span>,cell_overwrite_ok=<span class="literal">True</span>)</span><br><span class="line">    col=(<span class="string">&quot;电影详情链接&quot;</span>,<span class="string">&quot;图片链接&quot;</span>,<span class="string">&quot;影片中文名&quot;</span>,<span class="string">&quot;影片外国名&quot;</span>,<span class="string">&quot;评分&quot;</span>,<span class="string">&quot;评分人数&quot;</span>,<span class="string">&quot;概述&quot;</span>,<span class="string">&quot;相关信息&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">8</span>):</span><br><span class="line">        sheet.write(<span class="number">0</span>,i,col[i])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">250</span>):</span><br><span class="line">        <span class="comment">#print(&#x27;第%d条&#x27;%(i))</span></span><br><span class="line">        data = datalist[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">8</span>):</span><br><span class="line">            sheet.write(i+<span class="number">1</span>,j,data[j])</span><br><span class="line">    book.save(savepath)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">saveDataDb</span>(<span class="params">datalist,dbpath</span>):</span><br><span class="line">    init_db(dbpath)</span><br><span class="line">    conn = sqlite3.connect(dbpath)</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datalist:</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">            <span class="keyword">if</span> index == <span class="number">4</span> <span class="keyword">or</span> index == <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            data[index] = <span class="string">&#x27;&quot;&#x27;</span>+data[index]+<span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">        sql=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            insert into movie250(</span></span><br><span class="line"><span class="string">            info_link,pic_link,cname,ename,score,rated,instroduction,info)</span></span><br><span class="line"><span class="string">            values(%s)</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span>%<span class="string">&quot;,&quot;</span>.join(data)<span class="comment">#用，将字符串分割</span></span><br><span class="line">        <span class="comment">#print(sql)</span></span><br><span class="line">        cur.execute(sql)</span><br><span class="line">        conn.commit()</span><br><span class="line">    cur.close()</span><br><span class="line">    conn.close()</span><br><span class="line">            </span><br><span class="line"><span class="comment">#数据库建表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_db</span>(<span class="params">dbpath</span>):</span><br><span class="line">    sql = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        create table movie250</span></span><br><span class="line"><span class="string">        (</span></span><br><span class="line"><span class="string">        id integer primary key autoincrement,</span></span><br><span class="line"><span class="string">        info_link text,</span></span><br><span class="line"><span class="string">        pic_link text,</span></span><br><span class="line"><span class="string">        cname varchar,</span></span><br><span class="line"><span class="string">        ename varchar,</span></span><br><span class="line"><span class="string">        score numeric,</span></span><br><span class="line"><span class="string">        rated numeric,</span></span><br><span class="line"><span class="string">        instroduction text,</span></span><br><span class="line"><span class="string">        info text</span></span><br><span class="line"><span class="string">        )</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    conn = sqlite3.connect(dbpath)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    conn.commit()</span><br><span class="line">    conn.close()</span><br><span class="line">    </span><br><span class="line"><span class="comment">#查看数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_movie_db</span>(<span class="params">dbpath</span>):</span><br><span class="line">    conn = sqlite3.connect(dbpath)</span><br><span class="line">    c= conn.cursor()       <span class="comment">#获取游标</span></span><br><span class="line">    <span class="comment">#sql 语句</span></span><br><span class="line">    sql = <span class="string">&quot;select id,info_link,pic_link,cname,ename,score,rated,instroduction,info from movie250&quot;</span></span><br><span class="line"></span><br><span class="line">    cursor = c.execute(sql)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> cursor:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;id=&quot;</span>,row[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;info_link=&quot;</span>,row[<span class="number">1</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;pic_link=&quot;</span>,row[<span class="number">2</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;cname=&quot;</span>,row[<span class="number">3</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ename=&quot;</span>,row[<span class="number">4</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;score=&quot;</span>,row[<span class="number">5</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;rated=&quot;</span>,row[<span class="number">6</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;instroduction=&quot;</span>,row[<span class="number">7</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;info=&quot;</span>,row[<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">    conn.close()<span class="comment">#关闭数据库链接</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#调用函数</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment">#链接数据库</span></span><br><span class="line"><span class="comment"># conn = sqlite3.connect(&quot;test.db&quot;)</span></span><br><span class="line"><span class="comment"># print(&quot;opend database successfully&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#链接数据库，并建表</span></span><br><span class="line"><span class="comment"># conn = sqlite3.connect(&quot;test.db&quot;)</span></span><br><span class="line"><span class="comment"># c= conn.cursor()       #获取游标</span></span><br><span class="line"><span class="comment"># #sql 语句</span></span><br><span class="line"><span class="comment"># sql = &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#     create table company</span></span><br><span class="line"><span class="comment">#     (id int primary key not null,</span></span><br><span class="line"><span class="comment">#     name text not null,</span></span><br><span class="line"><span class="comment">#     age int not null,</span></span><br><span class="line"><span class="comment">#     address char(50),</span></span><br><span class="line"><span class="comment">#     salary real);</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># c.execute(sql)#执行sql语句</span></span><br><span class="line"><span class="comment"># conn.commit()#提交数据库操作</span></span><br><span class="line"><span class="comment"># conn.close()#关闭数据库链接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># conn = sqlite3.connect(&quot;test.db&quot;)</span></span><br><span class="line"><span class="comment"># c= conn.cursor()       #获取游标</span></span><br><span class="line"><span class="comment"># #sql 语句</span></span><br><span class="line"><span class="comment"># sql1 = &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#     insert into company (id,name,age,address,salary)</span></span><br><span class="line"><span class="comment">#     values(1,&#x27;张三&#x27;,32,&#x27;成都&#x27;,8000)</span></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># sql2 = &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#     insert into company (id,name,age,address,salary)</span></span><br><span class="line"><span class="comment">#     values(2,&#x27;李四&#x27;,30,&#x27;重庆&#x27;,10000)</span></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># c.execute(sql1)#执行sql语句</span></span><br><span class="line"><span class="comment"># c.execute(sql2)</span></span><br><span class="line"><span class="comment"># conn.commit()#提交数据库操作</span></span><br><span class="line"><span class="comment"># conn.close()#关闭数据库链接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询数据</span></span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">&quot;test.db&quot;</span>)</span><br><span class="line">c= conn.cursor()       <span class="comment">#获取游标</span></span><br><span class="line"><span class="comment">#sql 语句</span></span><br><span class="line">sql = <span class="string">&quot;select id,name,address,salary from company&quot;</span></span><br><span class="line"></span><br><span class="line">cursor = c.execute(sql)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> cursor:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;id=&quot;</span>,row[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;name=&quot;</span>,row[<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;address=&quot;</span>,row[<span class="number">2</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;salary=&quot;</span>,row[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">conn.close()<span class="comment">#关闭数据库链接</span></span><br></pre></td></tr></table></figure><h3 id="网址访问get请求"><a href="#网址访问get请求" class="headerlink" title="网址访问get请求"></a>网址访问get请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># #获取一个get请求</span></span><br><span class="line"><span class="comment"># response = urllib.request.urlopen(&quot;http://www.baidu.com&quot;)</span></span><br><span class="line"><span class="comment"># print(response.read().decode(&#x27;utf-8&#x27;))#访问网址，将所有信息保存到一个类，通过read读取</span></span><br><span class="line"><span class="comment"># #使用ytf-8解码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># #还可以使用post请求     需要服务器代码，可以使用网址       httpbin.org  网址</span></span><br><span class="line"><span class="comment"># #通过post访问时，必须需要一个表单才能访问，即下面的data</span></span><br><span class="line"><span class="comment"># import urllib.parse</span></span><br><span class="line"><span class="comment"># #bytes 转为字节数据</span></span><br><span class="line"><span class="comment"># data = bytes(urllib.parse.urlencode(&#123;&quot;hello&quot;:&quot;world&quot;&#125;),encoding=&quot;utf-8&quot;)</span></span><br><span class="line"><span class="comment"># response = urllib.request.urlopen(&quot;http://httpbin.org/post&quot;,data = data)</span></span><br><span class="line"><span class="comment"># print(response.read().decode(&quot;utf-8&quot;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># try:</span></span><br><span class="line"><span class="comment">#     #timeout 即访问等待时间，超时返回异常</span></span><br><span class="line"><span class="comment">#     response = urllib.request.urlopen(&quot;http://httpbin.org/get&quot;,timeout=0.01)</span></span><br><span class="line"><span class="comment">#     print(response.read().decode(&quot;utf-8&quot;))</span></span><br><span class="line"><span class="comment"># except urllib.error.URLError as e:</span></span><br><span class="line"><span class="comment">#     print(&quot;time out!!!&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># response = urllib.request.urlopen(&quot;http://httpbin.org/get&quot;,timeout=1)</span></span><br><span class="line"><span class="comment"># #status  即访问网址的状态码，如httpbin.org，访问成功返回状态码为200</span></span><br><span class="line"><span class="comment"># #当爬取，douban网时，会识别为爬虫，返回418，禁止爬取</span></span><br><span class="line"><span class="comment"># print(response.status)</span></span><br><span class="line"><span class="comment"># #getheaders获取所有headers，可以使用具体名字访问一部分</span></span><br><span class="line"><span class="comment"># print(response.getheaders())</span></span><br><span class="line"><span class="comment"># print(response.getheader(&quot;Content-Type&quot;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># url = &quot;http://httpbin.org/post&quot;</span></span><br><span class="line"><span class="comment"># #headers 可以使用浏览器访问网址获取</span></span><br><span class="line"><span class="comment"># headers = &#123;</span></span><br><span class="line"><span class="comment">#     &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.49&quot;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># data = bytes(urllib.parse.urlencode(&#123;&#x27;name&#x27;:&#x27;eric&#x27;&#125;),encoding = &#x27;utf-8&#x27;)</span></span><br><span class="line"><span class="comment"># req = urllib.request.Request(url = url,data=data,headers=headers,method=&quot;POST&quot;)</span></span><br><span class="line"><span class="comment"># response = urllib.request.urlopen(req)</span></span><br><span class="line"><span class="comment"># print(response.read().decode(&quot;utf-8&quot;))</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.douban.com&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.49&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">req  =  urllib.request.Request(url=url,headers=headers)</span><br><span class="line">response = urllib.request.urlopen(req)</span><br><span class="line"><span class="built_in">print</span>(response.read().decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="Excel表格创建写入"><a href="#Excel表格创建写入" class="headerlink" title="Excel表格创建写入"></a>Excel表格创建写入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line">workbook = xlwt.Workbook(encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">worksheet = workbook.add_sheet(<span class="string">&#x27;sheet1&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,i+<span class="number">1</span>):</span><br><span class="line">        worksheet.write(i,j,<span class="string">&quot;%d * %d = %d&quot;</span>%(i+<span class="number">1</span>,j+<span class="number">1</span>,(i+<span class="number">1</span>)*(j+<span class="number">1</span>)))</span><br><span class="line">workbook.save(<span class="string">&#x27;student.xls&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="正则表达式-1"><a href="#正则表达式-1" class="headerlink" title="正则表达式"></a>正则表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#title：python  re模块   正则表达式</span></span><br><span class="line"><span class="comment">#time 2022.7.11</span></span><br><span class="line"><span class="comment">#author：涛</span></span><br><span class="line"><span class="comment">#software：jupyter notebook</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pat = re.<span class="built_in">compile</span>(<span class="string">&quot;AA&quot;</span>)<span class="comment">#此处为正则表达式，去检验其他字符串</span></span><br><span class="line"><span class="comment">#m=pat.search(&quot;CA&quot;)#search字符串被检验的内容,找到第一个匹配字符串的位置</span></span><br><span class="line"><span class="comment">#m= pat.search(&quot;ACA&quot;)</span></span><br><span class="line"><span class="comment">#m= pat.search(&quot;ACAA&quot;)</span></span><br><span class="line">m= pat.search(<span class="string">&quot;ACAABAACAA&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line">a = re.search(<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;ACAABAACAA&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">b= re.findall(<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;ACAABAACAA&quot;</span>)<span class="comment">#findall 找到满足字符串，并提取出来</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line">c= re.findall(<span class="string">&quot;[A-Z]&quot;</span>,<span class="string">&quot;ACAABAACAA&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line">d= re.findall(<span class="string">&quot;[A-Z]+&quot;</span>,<span class="string">&quot;ACAAaBAACAA&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(re.sub(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;A&quot;</span>,<span class="string">&quot;abcdaaAAbA&quot;</span>))<span class="comment">#找到第三个字符串中满足第一个字符串的内容，并用第二个字符串替换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#建议在正则表达式中，被比较的字符串前面加上r，不用担心转义字符的问题</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\aabd-\&#x27;&quot;</span>) <span class="comment">#比如  \a 和 \&#x27;  会被转义为其他的东西</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&quot;\aabd-\&#x27;&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见图像变换</title>
      <link href="/2023/03/16/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/"/>
      <url>/2023/03/16/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>常见图像变换的实现原理及源码。</p><span id="more"></span><h2 id="图像线性变换"><a href="#图像线性变换" class="headerlink" title="图像线性变换"></a>图像线性变换</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>图像的线性变换是图像处理的基本运算，通常应用在调整图像的画面质量方面，如图像对比度、亮度及反转等操作。对于输入图像f(x,y)，输出图像g(x,y)，其线性变换表达式为：<br>$$<br>g(x, y)&#x3D;a f(x, y)+b<br>$$<br>$g(x, y)&#x3D;a f(x, y)+b$</p><p>其中参数a表示图像对比度变化，b表示图像亮度变化。</p><p>当a&lt;0时，图像变换代表反转操作，如a&#x3D;-1、b&#x3D;255，（255-$f(x, y)$）这是常见的8位灰度图像的反转操作设置参数；<br>当|a|&gt;1时，图像变换代表对比度增加操作；当|a|&lt;1时，图像变换代表对比度减少操作。<br>当b&gt;0时，表示图像变换操作是亮度增加操作；b&lt;0时，表示图像变换操作是亮度减少操作。</p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/core/core.hpp&gt;</span>        </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/highgui/highgui.hpp&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="comment">// 图像线性变换操作</span></span><br><span class="line"><span class="function">cv::Mat <span class="title">linearTransform</span><span class="params">(cv::Mat srcImage, <span class="type">float</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(srcImage.<span class="built_in">empty</span>())&#123;  </span><br><span class="line">        std::cout&lt;&lt; <span class="string">&quot;No data!&quot;</span> &lt;&lt;std::endl;  </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> nRows = srcImage.rows;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> nCols = srcImage.cols;</span><br><span class="line">    cv::Mat resultImage = </span><br><span class="line">        cv::Mat::<span class="built_in">zeros</span>(srcImage.<span class="built_in">size</span>(), srcImage.<span class="built_in">type</span>());</span><br><span class="line">    <span class="comment">// 图像元素遍历</span></span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">0</span>; i &lt; nRows; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="type">int</span> j = <span class="number">0</span>; j &lt; nCols; j++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>( <span class="type">int</span> c = <span class="number">0</span>; c &lt; <span class="number">3</span>; c++ )<span class="comment">//如果源图像是灰度图,那么把这里改为c&lt;1即可</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 矩阵at操作，检查下标防止越界</span></span><br><span class="line">                resultImage.<span class="built_in">at</span>&lt;Vec3b&gt;(i,j)[c] = </span><br><span class="line">                  <span class="built_in">saturate_cast</span>&lt;uchar&gt;(a * </span><br><span class="line">                  (srcImage.<span class="built_in">at</span>&lt;Vec3b&gt;(i,j)[c]) + b);</span><br><span class="line">    <span class="comment">//只有当a=-1,b=255,等效255-像素值，反转图像！！！！</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultImage;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 图像获取及验证</span></span><br><span class="line">    cv::Mat srcImage = cv::<span class="built_in">imread</span>(<span class="string">&quot;lakeWater.jpg&quot;</span>); </span><br><span class="line">    <span class="keyword">if</span>(!srcImage.data) </span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    cv::<span class="built_in">imshow</span>(<span class="string">&quot;srcImage&quot;</span>, srcImage);</span><br><span class="line">    <span class="comment">//cv::waitKey(0);</span></span><br><span class="line">    <span class="comment">// 线性变换</span></span><br><span class="line">    <span class="type">float</span> a = <span class="number">1.2</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">50</span>;</span><br><span class="line">    cv::Mat new_image  = <span class="built_in">linearTransform</span>(srcImage, a, b);  </span><br><span class="line">    cv::<span class="built_in">imshow</span>(<span class="string">&quot;dst&quot;</span>, new_image);</span><br><span class="line">    cv::<span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像处理 </tag>
            
            <tag> 线性变换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo配置使用</title>
      <link href="/2023/03/14/%E6%95%99%E7%A8%8B/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/03/14/%E6%95%99%E7%A8%8B/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>使用Hexo+GitHub完成部署。</p><span id="more"></span><ol><li><p>下载node.js,Git。</p></li><li><p>使用cmd node -v，npm -v，git –version，分别出现对应版本信息，安装成功。</p></li><li><p>npm install hexo-cli -g安装hexo。hexo -v查看版本信息。</p></li><li><p>登录GitHub，创建一个仓库，仓库名必须与GitHub注册名一致并且加上.github.io。</p></li><li><p>打开Git bash，通过ssh检测是否安装ssh，并通过ssh -keygen -t -rsa -C “加上GitHub注册邮箱”    点击4次回车。在C盘\用户\你的id\ .ssh文件夹下找到id_rsa.pub文件，复制里面所有内容。打开GitHub，setting，SSH，新建一个SSH。ssh -T <a href="mailto:&#x67;&#x69;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#99;&#x6f;&#109;">&#x67;&#x69;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#99;&#x6f;&#109;</a>测试是否绑定成功。</p></li><li><p>本地创建博客，在本地创建一个文件夹，在这儿打开Git bash，输入hexo init#初始化hexo。</p></li><li><p>打开hexo文件夹下config文件，最后替换成:</p><p> deploy:<br>   type: git<br>   repository: 新建github仓库的地址，点击code就有。<br>   branch: main</p></li><li><p>通过npm install hexo-deployer-git –save   ,安装工具。</p></li><li><p>上传成功后，点击仓库，setting，找到github pages的链接，就是github里面博客内容的链接。</p></li><li><p>新建一篇  hexo new title -p _posts下的相对路径</p></li><li><h6 id="hexo-clean-清理-hexo-g生成-hexo-s本地发布-hexo-d-上传github"><a href="#hexo-clean-清理-hexo-g生成-hexo-s本地发布-hexo-d-上传github" class="headerlink" title="hexo clean 清理    hexo g生成  hexo s本地发布  hexo d  上传github"></a>hexo clean 清理    hexo g生成  hexo s本地发布  hexo d  上传github</h6></li></ol><h2 id="hexo-s后图像无法显示"><a href="#hexo-s后图像无法显示" class="headerlink" title="hexo s后图像无法显示"></a>hexo s后图像无法显示</h2><p>1.首先打开typora设置图片的保存位置。</p><p><img src="1678785047227.png" alt="1678785047227"></p><p>2.打开博客根目录下的_config.yml文件，将其中post_asset_folder设置为true，post_asset_folder: true。</p><p>3.安装npm install <a href="https://github.com/CodeFalling/hexo-asset-image">https://github.com/CodeFalling/hexo-asset-image</a> –save这个插件</p><p>4.修改node_modules\hexo-asset-image\index.js</p><p><img src="1689927249163.png" alt="1689927249163"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈夫曼编码</title>
      <link href="/2023/03/14/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/"/>
      <url>/2023/03/14/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>数据无损压缩——哈夫曼编码。学习及简单实现过程。</p><span id="more"></span><h2 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h2><p>​数据压缩技术通过重新编码将数据进行压缩存储，从而减少数据占用的存储空间。使用时，再进行解压缩。压缩方法主要有无损压缩和有损压缩。无损压缩的原理是统计被压缩数据中重复数据的出现次数来进行编码。无损压缩能确保解压后的数据不失真，压缩比为 2∶1～5∶1，适用于文本、图像的压缩，不适合实时处理图像、视频和音频数据。 </p><p>​ASCII 码是最常用的一种定长编码方案，一个字符由 8 位二进制数表示。ASCII 码中每个字符的编码与字符的使用频率无关。在实际应用中，各字符的使用频率不同，如字母 a 的使用频率明显高于字母 z。同样，图像中的数据也有不同的使用频率。 </p><p>​哈夫曼编码是一种变长的编码方案，字符的编码根据使用频率的不同而长短不一，使用频率高的字符其编码较短，使用频率低的字符其编码较长，从而使所有字符的编码总长度为最短。 </p><p><strong>例如字符串[AAAABBBCDDBBAAA]采用不同的编码方式：</strong></p><ol><li>采用ASCII码存储，15个字符占用15字节，公120位。</li><li>采用哈夫曼编码存储。已知字符集为{A， B， C， D}，统计各字符在指定字符串中的出现次数分别为{7， 5， 1， 2}，求得哈夫曼树和哈夫曼编码如图所示。</li></ol><p><img src="1678170420790.png" alt="1678170420790"></p><p>根据哈夫曼编码，将指定字符串压缩如下：</p><p>AAAABBBCDDBBAAA</p><p>0000   1111   11  100  101  101  11   11    0    0    0 </p><p>压缩后数据共26位，采用哈夫曼编码压缩后，数据信息没有损失，因此哈夫曼编码是一种无损压缩。</p><p><strong>变长编码方案必须满足这样一条基本要求：任何一个字符的编码都不是另一个字符编码的前缀。</strong>这样才能保证译码的唯一性。哈夫曼编码满足这一基本要求。</p><h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2><h3 id="1-二叉树的路径长度"><a href="#1-二叉树的路径长度" class="headerlink" title="1.二叉树的路径长度"></a>1.二叉树的路径长度</h3><p>​与树的边、路径、路径长度等概念相同，在二叉树中，从结点 X 到 Y 所经过的结点序列称为从结点 X 到 Y 的一条路径，路径长度为路径上的边数。从根结点到所有结点的路径长度之和称为该二叉树的路径长度（Path Length，PL）。</p><p>​从根到结点 X 有且仅有一条路径，路径长度为结点 X 的层次减 1。n个结点的不同形态的二叉树，其路径长度也不同，完全二叉树的路径长度最短，但路径长度最短的二叉树不只完全二叉树一种。8 个结点的多棵二叉树及其路径长度如图所示。 </p><p><img src="1678171562217.png" alt="1678171562217"></p><h3 id="2-二叉树的外路径长度"><a href="#2-二叉树的外路径长度" class="headerlink" title="2.二叉树的外路径长度"></a>2.二叉树的外路径长度</h3><p>​一棵二叉树，从根结点到所有叶子结点的路径长度之和称为该二叉树的外路径长度。 </p><p>​一种编码方案可由一棵二叉树表示，每条边表示一个二进制位 0 或 1，左子树的边表示 0，右子树的边表示 1，每个叶子结点表示一个字符。从根到叶子结点的一条路径上所有边的值组成该字符的编码。表示编码的二叉树中只有 2 度结点和叶子结点，没有 1 度结点。 </p><p>​一种编码方案的编码总长度为对应编码二叉树的外路径长度，完全二叉树的外路径长度最短。例如，四进制的定长编码对应 7 个结点的满二叉树，如图 6.31（a）所示，其外路径长度为 8，这是所有 7 个结点二叉树中外路径长度最短的。 </p><p>​同理，可画出八进制和十六进制的编码二叉树。以上讨论的是等概率情况，即编码方案中每个字符的使用概率相等。那么，如果考虑字符的使用概率不相等情况，该如何编码呢？ </p><p><img src="1678178268876.png" alt="1678178268876"></p><h3 id="3-哈夫曼编码"><a href="#3-哈夫曼编码" class="headerlink" title="3.哈夫曼编码"></a>3.哈夫曼编码</h3><ul><li>统计文本中字符出现的次数</li><li>将字符按照频数升序排序</li><li>将频数最小的两个叶子结点结合成树，看作一个整体，整体的频数是叶子结点频数和</li><li>把这个树看作整体和其他的一起也进行升序排序</li><li>重复上述过程知道生成整棵树</li></ul><h2 id="BMP图像文件的读写"><a href="#BMP图像文件的读写" class="headerlink" title="BMP图像文件的读写"></a>BMP图像文件的读写</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 数据压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中值阈值和otsu</title>
      <link href="/2023/03/14/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/%E4%B8%AD%E5%80%BC%E9%98%88%E5%80%BC%E5%92%8Cotsu/"/>
      <url>/2023/03/14/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/%E4%B8%AD%E5%80%BC%E9%98%88%E5%80%BC%E5%92%8Cotsu/</url>
      
        <content type="html"><![CDATA[<p>中值阈值和大津算法的原理及手动实现。</p><span id="more"></span><h2 id="OTSU"><a href="#OTSU" class="headerlink" title="OTSU"></a>OTSU</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>大津法（OTSU）又名最大类间差法，由日本学者大津于1979年提出。被认为是图像分割中阈值选取的最佳算法，计算简单，不受图像亮度和对比度的影响。</p><p>大津法是按图像的灰度特征，把图像分成前景和背景两部分。因方差是灰度分布均匀性的一种度量,背景和前景之间的类间方差越大,说明构成图像的两部分的差别越大,当部分前景错分为背景或部分背景错分为前景都会导致两部分差别变小。因此使用类间方差最大的分割意味着错分概率最小。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">对于图像I(x,y)，前景(即目标)和背景的分割阈值记作T，</span><br><span class="line">属于前景的像素点数占整幅图像的比例记为ω0，其平均灰度μ0；</span><br><span class="line">背景像素点数占整幅图像的比例为ω1，其平均灰度为μ1。</span><br><span class="line">图像的总平均灰度记为μ，类间方差记为g。</span><br><span class="line">假设图像的背景较暗，并且图像的大小为M×N，</span><br><span class="line">图像中像素的灰度值小于阈值T的像素个数记作N0，</span><br><span class="line">像素灰度大于阈值T的像素个数记作N1，则有：</span><br><span class="line">　　　　　　ω0=N0/ M×N (1)</span><br><span class="line">　　　　　　ω1=N1/ M×N (2)</span><br><span class="line">　　　　　　N0+N1=M×N (3)</span><br><span class="line">　　　　　　ω0+ω1=1　　　 (4)</span><br><span class="line">　　　　　　μ=ω0*μ0+ω1*μ1 (5)</span><br><span class="line">　　　　　　g=ω0(μ0-μ)^2+ω1(μ1-μ)^2 (6)</span><br><span class="line">将式(5)代入式(6),得到等价公式:</span><br><span class="line">　　　　　　g=ω0ω1(μ0-μ1)^2 　　 (7)　</span><br><span class="line">这就是类间方差采用遍历的方法得到使类间方差g最大的阈值T,即为所求。</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用大津法Mat的阈值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetMatOTSU</span><span class="params">(Mat&amp; img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//判断如果不是单通道直接返回128</span></span><br><span class="line">  <span class="keyword">if</span> (img.<span class="built_in">channels</span>() &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">128</span>;</span><br><span class="line">  <span class="type">int</span> rows = img.rows;</span><br><span class="line">  <span class="type">int</span> cols = img.cols;</span><br><span class="line">  <span class="comment">//定义数组</span></span><br><span class="line">  <span class="type">float</span> mathists[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">  <span class="comment">//遍历计算0-255的个数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> row = <span class="number">0</span>; row &lt; rows; ++row) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> col = <span class="number">0</span>; col &lt; cols; ++col) &#123;</span><br><span class="line">      <span class="type">int</span> val = img.<span class="built_in">at</span>&lt;uchar&gt;(row, col);</span><br><span class="line">      mathists[val]++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//定义灰度级像素在整个图像中的比例</span></span><br><span class="line">  <span class="type">float</span> grayPro[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">  <span class="type">int</span> matSize = rows * cols;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i) &#123;</span><br><span class="line">    grayPro[i] = (<span class="type">float</span>)mathists[i] / (<span class="type">float</span>)matSize;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//大津法OTSU，前景与背景分割，计算出方差最大的灰度值</span></span><br><span class="line">  <span class="type">int</span> calcval;</span><br><span class="line">  <span class="type">int</span> calcMax = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i) &#123;</span><br><span class="line">    <span class="type">float</span> w0 = <span class="number">0</span>, w1 = <span class="number">0</span>, u0tmp = <span class="number">0</span>, u1tmp = <span class="number">0</span>, u0 = <span class="number">0</span>, u1 = <span class="number">0</span>, u = <span class="number">0</span>, calctmp = <span class="number">0</span>;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">256</span>; ++k) &#123;</span><br><span class="line">      <span class="type">float</span> curGray = grayPro[k];</span><br><span class="line">      <span class="comment">//计算背景部分</span></span><br><span class="line">      <span class="keyword">if</span> (k &lt;= i) &#123;</span><br><span class="line">        <span class="comment">//以i为阈值分类，第一类总的概率</span></span><br><span class="line">        w0 += curGray;</span><br><span class="line">        u0tmp += curGray * k;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//计算前景部分</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//以i为阈值分类，第一类总的概率</span></span><br><span class="line">        w1 += curGray;</span><br><span class="line">        u1tmp += curGray * k;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//求出第一类和第二类的平均灰度</span></span><br><span class="line">    u0 = u0tmp / w0;</span><br><span class="line">    u1 = u1tmp / w1;</span><br><span class="line">    <span class="comment">//求出整幅图像的平均灰度</span></span><br><span class="line">    u = u0tmp + u1tmp;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//计算类间方差</span></span><br><span class="line">    calctmp = w0 * <span class="built_in">pow</span>((u0 - u), <span class="number">2</span>) + w1 * <span class="built_in">pow</span>((u1 - u), <span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//更新最大类间方差，并设置阈值</span></span><br><span class="line">    <span class="keyword">if</span> (calctmp &gt; calcMax) &#123;</span><br><span class="line">      calcMax = calctmp;</span><br><span class="line">      calcval = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> calcval;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中值阈值"><a href="#中值阈值" class="headerlink" title="中值阈值"></a>中值阈值</h2><p>要实现自动阈值，方法就是求出图像的灰度直方图，直方图中找出中位数，然后根据中位数值设定一个标准差值，用中位数的值加上标准差来求出高低阈值。</p><p>实现思路：</p><ul><li>图像转灰度图</li><li>求出灰度直方图，并找到中位数</li><li>根据中位数和设定的sigma值求出高低阈值</li><li>使用Canny边缘检测</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求Mat的中位数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CvUtils::GetMatMidVal</span><span class="params">(Mat&amp; img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//判断如果不是单通道直接返回128</span></span><br><span class="line">  <span class="keyword">if</span> (img.<span class="built_in">channels</span>() &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">128</span>;</span><br><span class="line">  <span class="type">int</span> rows = img.rows;</span><br><span class="line">  <span class="type">int</span> cols = img.cols;</span><br><span class="line">  <span class="comment">//定义数组</span></span><br><span class="line">  <span class="type">float</span> mathists[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">  <span class="comment">//遍历计算0-255的个数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> row = <span class="number">0</span>; row &lt; rows; ++row) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> col = <span class="number">0</span>; col &lt; cols; ++col) &#123;</span><br><span class="line">      <span class="type">int</span> val = img.<span class="built_in">at</span>&lt;uchar&gt;(row, col);</span><br><span class="line">      mathists[val]++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> calcval = rows * cols / <span class="number">2</span>;</span><br><span class="line">  <span class="type">int</span> tmpsum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">255</span>; ++i) &#123;</span><br><span class="line">    tmpsum += mathists[i];</span><br><span class="line">    <span class="keyword">if</span> (tmpsum &gt; calcval) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高低阈值"><a href="#高低阈值" class="headerlink" title="高低阈值"></a>高低阈值</h2><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><p>通过设定默认sigma的值，求出高低阈值进行canny。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">GetMinMaxthreshold</span><span class="params">(Mat&amp; img, <span class="type">int</span>&amp; minval, <span class="type">int</span>&amp; maxval,<span class="type">int</span> type, <span class="type">float</span> sigma)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> midval;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">midval = <span class="built_in">getmatmidval</span>(img);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">midval = <span class="built_in">GetMatOTSU</span>(img);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算低阈值</span></span><br><span class="line">minval = <span class="built_in">saturate_cast</span>&lt;uchar&gt;((<span class="number">1.0</span> - sigma) * midval);</span><br><span class="line"><span class="comment">//计算高阈值</span></span><br><span class="line">maxval = <span class="built_in">saturate_cast</span>&lt;uchar&gt;((<span class="number">1.0</span> + sigma) * midval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getmatmidval</span><span class="params">(Mat&amp; img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (img.<span class="built_in">channels</span>() &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">int</span> rows = img.rows;</span><br><span class="line"><span class="type">int</span> cols = img.cols;</span><br><span class="line"><span class="comment">//定义数组</span></span><br><span class="line"><span class="type">float</span> mathists[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//遍历计算0-255的个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> row = <span class="number">0</span>; row &lt; rows; ++row) &#123;</span><br><span class="line">uchar* ptr = img.<span class="built_in">ptr</span>&lt;uchar&gt;(row);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> col = <span class="number">0</span>; col &lt; cols; ++col) &#123;</span><br><span class="line"><span class="type">int</span> val = *ptr;</span><br><span class="line">mathists[val]++;</span><br><span class="line">ptr++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> calval = rows * cols / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> tempsum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">255</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">tempsum += mathists[i];</span><br><span class="line"><span class="keyword">if</span> (tempsum &gt; calval) <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetMatOTSU</span><span class="params">(Mat&amp; img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (img.<span class="built_in">channels</span>() &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">int</span> rows = img.rows;</span><br><span class="line"><span class="type">int</span> cols = img.cols;</span><br><span class="line"><span class="comment">//定义数组</span></span><br><span class="line"><span class="type">float</span> mathists[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//遍历计算0-255的个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> row = <span class="number">0</span>; row &lt; rows; ++row) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> col = <span class="number">0</span>; col &lt; cols; ++col) &#123;</span><br><span class="line"><span class="type">int</span> val = img.<span class="built_in">at</span>&lt;uchar&gt;(row, col);</span><br><span class="line">mathists[val]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义灰度级像素在整个图像中的比例</span></span><br><span class="line"><span class="type">float</span> grayPro[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> matSize = rows * cols;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i) &#123;</span><br><span class="line">grayPro[i] = (<span class="type">float</span>)mathists[i] / (<span class="type">float</span>)matSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//大津法OTSU，前景与背景分割，计算出方差最大的灰度值</span></span><br><span class="line"><span class="type">int</span> calcval;</span><br><span class="line"><span class="type">int</span> calcMax = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i) &#123;</span><br><span class="line"><span class="type">float</span> w0 = <span class="number">0</span>, w1 = <span class="number">0</span>, u0tmp = <span class="number">0</span>, u1tmp = <span class="number">0</span>, u0 = <span class="number">0</span>, u1 = <span class="number">0</span>, u = <span class="number">0</span>, calctmp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">256</span>; ++k) &#123;</span><br><span class="line"><span class="type">float</span> curGray = grayPro[k];</span><br><span class="line"><span class="comment">//计算背景部分</span></span><br><span class="line"><span class="keyword">if</span> (k &lt;= i) &#123;</span><br><span class="line"><span class="comment">//以i为阈值分类，第一类总的概率</span></span><br><span class="line">w0 += curGray;</span><br><span class="line">u0tmp += curGray * k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算前景部分</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//以i为阈值分类，第一类总的概率</span></span><br><span class="line">w1 += curGray;</span><br><span class="line">u1tmp += curGray * k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求出第一类和第二类的平均灰度</span></span><br><span class="line">u0 = u0tmp / w0;</span><br><span class="line">u1 = u1tmp / w1;</span><br><span class="line"><span class="comment">//求出整幅图像的平均灰度</span></span><br><span class="line">u = u0tmp + u1tmp;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算类间方差</span></span><br><span class="line">calctmp = w0 * <span class="built_in">pow</span>((u0 - u), <span class="number">2</span>) + w1 * <span class="built_in">pow</span>((u1 - u), <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新最大类间方差，并设置阈值</span></span><br><span class="line"><span class="keyword">if</span> (calctmp &gt; calcMax) &#123;</span><br><span class="line">calcMax = calctmp;</span><br><span class="line">calcval = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> calcval;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GetMinMaxthreshold</span><span class="params">(Mat&amp; img, <span class="type">int</span>&amp; minval, <span class="type">int</span>&amp; maxval,<span class="type">int</span> type, <span class="type">float</span> sigma)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> midval;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">midval = <span class="built_in">getmatmidval</span>(img);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">midval = <span class="built_in">GetMatOTSU</span>(img);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算低阈值</span></span><br><span class="line">minval = <span class="built_in">saturate_cast</span>&lt;uchar&gt;((<span class="number">1.0</span> - sigma) * midval);</span><br><span class="line"><span class="comment">//计算高阈值</span></span><br><span class="line">maxval = <span class="built_in">saturate_cast</span>&lt;uchar&gt;((<span class="number">1.0</span> + sigma) * midval);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Mat src = <span class="built_in">imread</span>(<span class="string">&quot;1.png&quot;</span>, <span class="number">1</span>);</span><br><span class="line">Mat gray;</span><br><span class="line"><span class="built_in">cvtColor</span>(src, gray, COLOR_BGR2GRAY);</span><br><span class="line"><span class="built_in">GaussianBlur</span>(gray, gray, <span class="built_in">Size</span>(<span class="number">3</span>, <span class="number">3</span>), <span class="number">0.5</span>, <span class="number">0.5</span>);</span><br><span class="line"><span class="type">int</span> minthreshold, maxthreshold;</span><br><span class="line"><span class="built_in">GetMinMaxthreshold</span>(gray, minthreshold, maxthreshold,<span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line"><span class="type">int</span> minthreshold1, maxthreshold1;</span><br><span class="line"><span class="built_in">GetMinMaxthreshold</span>(gray, minthreshold1, maxthreshold1, <span class="number">1</span>, <span class="number">0.3</span>);</span><br><span class="line">Mat dst1, dst2;</span><br><span class="line"><span class="built_in">Canny</span>(gray, dst1, minthreshold, maxthreshold);</span><br><span class="line"><span class="built_in">Canny</span>(gray, dst2, minthreshold1, maxthreshold1);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;1&quot;</span>, dst1);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;2&quot;</span>, dst2);</span><br><span class="line"><span class="built_in">waitKey</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阈值 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的使用</title>
      <link href="/2023/03/13/%E6%95%99%E7%A8%8B/git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/03/13/%E6%95%99%E7%A8%8B/git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>git的简单使用，如何克隆、上传、创建分支、合并以及常见指令。</p><span id="more"></span><h2 id="上传的简单流程："><a href="#上传的简单流程：" class="headerlink" title="上传的简单流程："></a>上传的简单流程：</h2><p>1.登录github，创建一个仓库。</p><p>2.本地clone下来，将需要上传的项目文件全部放到克隆的文件夹里面。</p><p>3.cd到克隆下来的文件夹里面。</p><p>4.git add .将所有文件上传的缓存区</p><p>5.git commit -m “提交信息”提交信息自己填</p><p>6.git push -u origin main上传</p><h2 id="git-commit时报Author-identity-unknown错误"><a href="#git-commit时报Author-identity-unknown错误" class="headerlink" title="git commit时报Author identity unknown错误"></a>git commit时报Author identity unknown错误</h2><p> git config –global user.name “你的名字” </p><p> git config –global user.email “你的邮箱地址” </p><h2 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h2><h3 id="查看、添加、提交、删除、找回，重置修改文"><a href="#查看、添加、提交、删除、找回，重置修改文" class="headerlink" title="查看、添加、提交、删除、找回，重置修改文"></a>查看、添加、提交、删除、找回，重置修改文</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">git init -b main      //对本地文件创建git管理，-b创建分支  main主分支</span><br><span class="line">创建.gitignore文件，将不想进行管理的文件夹写入</span><br><span class="line">git status   //查看缓存区</span><br><span class="line">#模式匹配</span><br><span class="line">(1) 空行不匹配任何文件，因此常用作分隔符（以方便阅读）。</span><br><span class="line">(2) # 用于注释，\ 表示转义（如对 a!bc.txt，需改为 a\!bc.txt）。</span><br><span class="line">(3). * 可以匹配任何字符(0或多次)，? 可以匹配任何字符(1次)。（注意：它们都不可以匹配 / ）。</span><br><span class="line">(4) / 用于分隔目录：</span><br><span class="line">(4.1） 当 / 在开头时，表示从项目根目录开始匹配。否则，下级都将匹配。</span><br><span class="line">举例：  /abc 只能匹配 /abc，不能匹配 /x/abc 或 /x/y/abc等。</span><br><span class="line">(4.2） 当 / 在末尾时，只匹配目录，否则，则同名的目录和文件都将匹配。</span><br><span class="line">举例：  /abc/ 只能匹配 /abc目录，不能匹配/abc文件。</span><br><span class="line">举例：  abc/ 能匹配 /abc/ 或 /x/abc/ 或 /x/y/abc/等，不能匹配 /abc 或 /x/abc 等。</span><br><span class="line">(5) 原先被排除的文件，使用 ! 模式后该文件将会重新被包含。但如果了该文件的父级目录被排除了，那么使用 ! 也不会再次被包含。</span><br><span class="line">(6) [] 通常用于匹配一个字符列表，如：a[mn]z 可匹配 amz 和 anz。</span><br><span class="line">(7). ** 用于匹配多级目录，如 a/**/b 可匹配 &quot;a/b&quot;, &quot;a/x/b&quot;, &quot;a/x/y/b&quot; 等 。</span><br><span class="line"></span><br><span class="line">git check -ignore -v 文件或路径   查看是否被忽略掉</span><br><span class="line">5. 已有过版本追踪的文件如何忽略？</span><br><span class="line">方法：加入gitignore -&gt; 删除本地缓存 -&gt; 重新add 。</span><br><span class="line">·加入gitignore</span><br><span class="line">git rm -r --cached</span><br><span class="line">git add</span><br><span class="line">git status</span><br><span class="line">6. 恢复文件的版本追踪</span><br><span class="line">方法：从gitignre中移除配置 -&gt; 重新 add。 </span><br><span class="line"></span><br><span class="line">恢复被删除或修改的文件，没有add过</span><br><span class="line">git checkout &lt;file&gt;从暂缓区恢复文件</span><br><span class="line">git checkout &lt;commit id&gt; &lt;file&gt;从版本库恢复文件</span><br><span class="line"></span><br><span class="line">git branch &lt;name&gt; 创建分支</span><br><span class="line">git branch 查看分支</span><br><span class="line">git branch -m &lt;old_name&gt; &lt;new_name&gt;重命名分支</span><br><span class="line">git branch -d &lt;name&gt; 删除分支 -d只能删除已合并过的分支  -D强制删除</span><br><span class="line">git checkout &lt;name&gt;切换分支</span><br><span class="line">git merfe &lt;name&gt; 合并分支到当前分支</span><br><span class="line"></span><br><span class="line">远程仓库</span><br><span class="line">git pull 同步</span><br><span class="line">git push 提交</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="查看文件diff"><a href="#查看文件diff" class="headerlink" title="查看文件diff"></a>查看文件diff</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">git help &lt;command&gt; # 显示command的help  </span><br><span class="line"></span><br><span class="line">git show # 显示某次提交的内容 git show $id</span><br><span class="line"></span><br><span class="line">git co -- &lt;file&gt; # 抛弃工作区修改</span><br><span class="line"></span><br><span class="line">git co . # 抛弃工作区修改</span><br><span class="line"></span><br><span class="line">git add &lt;file&gt; # 将工作文件修改提交到本地暂存区</span><br><span class="line"></span><br><span class="line">git add . # 将所有修改过的工作文件提交暂存区</span><br><span class="line"></span><br><span class="line">git rm &lt;file&gt; # 从版本库中删除文件</span><br><span class="line"></span><br><span class="line">git rm &lt;file&gt; --cached # 从版本库中删除文件，但不删除文件</span><br><span class="line"></span><br><span class="line">git reset &lt;file&gt; # 从暂存区恢复到工作文件</span><br><span class="line"></span><br><span class="line">git reset -- . # 从暂存区恢复到工作文件</span><br><span class="line"></span><br><span class="line">git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</span><br><span class="line"></span><br><span class="line">git ci &lt;file&gt; git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am &quot;some comments&quot;</span><br><span class="line"></span><br><span class="line">git ci --amend # 修改最后一次提交记录</span><br><span class="line"></span><br><span class="line">git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象</span><br><span class="line"></span><br><span class="line">git revert HEAD # 恢复最后一次提交的状态</span><br></pre></td></tr></table></figure><h4 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git log git log &lt;file&gt; # 查看该文件每次提交记录</span><br><span class="line"></span><br><span class="line">git log -p &lt;file&gt; # 查看每次详细修改内容的diff</span><br><span class="line"></span><br><span class="line">git log -p -2 # 查看最近两次详细修改内容的diff</span><br><span class="line"></span><br><span class="line">git log --stat #查看提交统计信息</span><br><span class="line"></span><br><span class="line">tig</span><br><span class="line"></span><br><span class="line">Mac上可以使用tig代替diff和log，brew install tig</span><br></pre></td></tr></table></figure><h3 id="Git-本地分支管理"><a href="#Git-本地分支管理" class="headerlink" title="Git 本地分支管理"></a>Git 本地分支管理</h3><h4 id="查看、切换、创建和删除分支"><a href="#查看、切换、创建和删除分支" class="headerlink" title="查看、切换、创建和删除分支"></a>查看、切换、创建和删除分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">git br -r # 查看远程分支</span><br><span class="line"></span><br><span class="line">git br &lt;new_branch&gt; # 创建新的分支</span><br><span class="line"></span><br><span class="line">git br -v # 查看各个分支最后提交信息</span><br><span class="line"></span><br><span class="line">git br --merged # 查看已经被合并到当前分支的分支</span><br><span class="line"></span><br><span class="line">git br --no-merged # 查看尚未被合并到当前分支的分支</span><br><span class="line"></span><br><span class="line">git co &lt;branch&gt; # 切换到某个分支</span><br><span class="line"></span><br><span class="line">git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去</span><br><span class="line"></span><br><span class="line">git co -b &lt;new_branch&gt; &lt;branch&gt; # 基于branch创建新的new_branch</span><br><span class="line"></span><br><span class="line">git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span><br><span class="line"></span><br><span class="line">git co $id -b &lt;new_branch&gt; # 把某次历史提交记录checkout出来，创建成一个分支</span><br><span class="line"></span><br><span class="line">git br -d &lt;branch&gt; # 删除某个分支</span><br><span class="line"></span><br><span class="line">git br -D &lt;branch&gt; # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="分支合并和reba"><a href="#分支合并和reba" class="headerlink" title="分支合并和reba"></a>分支合并和reba</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch&gt; # 将branch分支合并到当前分支</span><br><span class="line"></span><br><span class="line">git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交</span><br><span class="line"></span><br><span class="line">git rebase master &lt;branch&gt; # 将master rebase到branch，相当于：git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Git补丁管理-方便在多台机器上开发同步时用"><a href="#Git补丁管理-方便在多台机器上开发同步时用" class="headerlink" title="Git补丁管理(方便在多台机器上开发同步时用)"></a>Git补丁管理(方便在多台机器上开发同步时用)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch&gt; # 将branch分支合并到当前分支</span><br><span class="line"></span><br><span class="line">git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交</span><br><span class="line"></span><br><span class="line">git rebase master &lt;branch&gt; # 将master rebase到branch，相当于：git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Git暂存管"><a href="#Git暂存管" class="headerlink" title="Git暂存管"></a>Git暂存管</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git stash # 暂存</span><br><span class="line"></span><br><span class="line">git stash list # 列所有stash</span><br><span class="line"></span><br><span class="line">git stash apply # 恢复暂存的内容</span><br><span class="line"></span><br><span class="line">git stash drop # 删除暂存区</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Git远程分支管理"><a href="#Git远程分支管理" class="headerlink" title="Git远程分支管理"></a>Git远程分支管理</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git pull # 抓取远程仓库所有分支更新并合并到本地</span><br><span class="line"></span><br><span class="line">git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span><br><span class="line"></span><br><span class="line">git fetch origin # 抓取远程仓库更新</span><br><span class="line"></span><br><span class="line">git merge origin/master # 将远程主分支合并到本地当前分支</span><br><span class="line"></span><br><span class="line">git co --track origin/branch # 跟踪某个远程分支创建相应的本地分支</span><br><span class="line"></span><br><span class="line">git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt; # 基于远程分支创建本地分支，功能同上</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="git-push-push所有分支"><a href="#git-push-push所有分支" class="headerlink" title="git push # push所有分支"></a>git push # push所有分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git push origin master # 将本地主分支推到远程主分支</span><br><span class="line"></span><br><span class="line">git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</span><br><span class="line"></span><br><span class="line">git push origin &lt;local_branch&gt; # 创建远程分支， origin是远程仓库名</span><br><span class="line"></span><br><span class="line">git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; # 创建远程分支</span><br><span class="line"></span><br><span class="line">git push origin :&lt;remote_branch&gt; #先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Git远程仓库管"><a href="#Git远程仓库管" class="headerlink" title="Git远程仓库管"></a>Git远程仓库管</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git remote -v # 查看远程服务器地址和仓库名称</span><br><span class="line"></span><br><span class="line">git remote show origin # 查看远程服务器仓库状态</span><br><span class="line"></span><br><span class="line">git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址</span><br><span class="line"></span><br><span class="line">git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm &lt;repository&gt; # 删除远程仓库</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库</span><br><span class="line"></span><br><span class="line">scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上</span><br><span class="line"></span><br><span class="line">mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库</span><br><span class="line"></span><br><span class="line">git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址</span><br><span class="line"></span><br><span class="line">git push -u origin master # 客户端首次提交</span><br><span class="line"></span><br><span class="line">git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track</span><br><span class="line"></span><br><span class="line">git remote set-head origin master # 设置远程仓库的HEAD指向master分支</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="也可以命令设置跟踪远程库和本地库"><a href="#也可以命令设置跟踪远程库和本地库" class="headerlink" title="也可以命令设置跟踪远程库和本地库"></a>也可以命令设置跟踪远程库和本地库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream master origin/master</span><br><span class="line"></span><br><span class="line">git branch --set-upstream develop origin/develop</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOS编程</title>
      <link href="/2023/02/27/windows/dos%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/02/27/windows/dos%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>总结DOS常见命令，及用法。简单记录，没有深入学习，知识过了一遍脑子。</p><p>头好痒啊！！！！好像要涨知识了！！！</p><span id="more"></span><h3 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h3><p>简单来说，批处理程序就是 Windows 自带的脚本，可以在 cmd | powershell 中直接运行，若写成文件，后缀为 .bat </p><ol><li>cmd 与 powershel 不区分大小写</li><li>命令行的运算操作，类似于 PHP</li><li>DOS 是磁盘操作系统；命令提示符是 DOS 系统的界面中输入 DOS 命令的提示位置；cmd 是系统运行其自带 DOS 的命令；cmd.exe 是一个 16 位的 DOS 应用程序</li><li>PID 是 processid（进程号）；IM 是 imaginename（映像名称）</li><li>在 .bat 文件开头加上 <code>@echo off</code> 代表不输出描述</li><li>设置变量 <code>set a=10</code>，输出变量 <code>echo %a%</code>，设置变量表达式 <code>set /a b=%a%+1</code></li><li>可以通过软件将bat代码转为exe文件</li></ol><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rem 判断记事本是否启动，启动了就打印2</span><br><span class="line">rem %1表示第一个运行参数</span><br><span class="line">tasklist | find /i &quot;notepad.exe&quot; &gt; nul &amp;&amp; echo 2</span><br></pre></td></tr></table></figure><h3 id="简单演示"><a href="#简单演示" class="headerlink" title="简单演示"></a>简单演示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">:: 两个冒号表示 cmd 的注释</span><br><span class="line">rem 也表示 cmd 的注释</span><br><span class="line"># 一个井号表示 powershell 的注释</span><br><span class="line"></span><br><span class="line">@echo off关闭命令</span><br><span class="line"></span><br><span class="line">@echo off</span><br><span class="line">echo &quot;hello world&quot;</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">// set /a  + - * / %运算</span><br><span class="line">@echo off</span><br><span class="line">set /a var =1+2</span><br><span class="line">echo %var%</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h3 id="覆盖与追加"><a href="#覆盖与追加" class="headerlink" title="覆盖与追加"></a>覆盖与追加</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">覆盖</span><br><span class="line">echo &quot;hello world&quot; &gt; t.txt</span><br><span class="line"></span><br><span class="line">追加</span><br><span class="line">echo &quot;hello world&quot; &gt;&gt; t.txt</span><br><span class="line"></span><br><span class="line">查看内容</span><br><span class="line">type t.txt</span><br></pre></td></tr></table></figure><h3 id="多级命令"><a href="#多级命令" class="headerlink" title="多级命令"></a>多级命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">短路</span><br><span class="line">ipconfig || net user</span><br><span class="line">从第一个执行，直到执行正确停止，只执行第一个</span><br><span class="line"></span><br><span class="line">断路</span><br><span class="line">ipconfig &amp;&amp; net user</span><br><span class="line">从第一个执行，直到执行错误停止</span><br><span class="line"></span><br><span class="line">管道命令</span><br><span class="line">A | B  将A的输出，作为B的输入</span><br><span class="line">dir | find &quot;.txt&quot;     查找当前文件下所有.txt文件</span><br><span class="line">netstat -an | find &quot;ESTABLISHED&quot;  </span><br></pre></td></tr></table></figure><h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bat 文件内容:</span><br><span class="line">echo %1 %2</span><br><span class="line"></span><br><span class="line">poweshell 运行指令:</span><br><span class="line">.\test.bat Hello World!</span><br><span class="line">输出 Hello World!</span><br><span class="line"></span><br><span class="line">net user %1 %2 /add  添加账户 密码</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cmd 运行指令:</span><br><span class="line">年月日</span><br><span class="line">date</span><br><span class="line">输出 当前日期: 2021-09-27</span><br><span class="line">date /T</span><br><span class="line">输出 2021-09-27</span><br><span class="line"></span><br><span class="line">时分秒</span><br><span class="line">time</span><br><span class="line">输出 当前时间: 23:14:16.68</span><br><span class="line">time /T</span><br><span class="line">输出 23:14</span><br><span class="line"></span><br><span class="line">poweshell 运行指令:</span><br><span class="line">date</span><br><span class="line">输出 2021年9月27日 23:14:49</span><br></pre></td></tr></table></figure><h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start /?</span><br></pre></td></tr></table></figure><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">test.bat 文件内容:</span><br><span class="line">echo &quot;Hello &quot;</span><br><span class="line">call test2.bat</span><br><span class="line"></span><br><span class="line">test2.bat 文件内容:</span><br><span class="line">echo &quot;Wordl!&quot;</span><br><span class="line"></span><br><span class="line">poweshell 运行指令:</span><br><span class="line">.\test.bat</span><br><span class="line">输出 Hello World!</span><br><span class="line">不能进行参数传递</span><br></pre></td></tr></table></figure><h3 id="tasklist-taskill"><a href="#tasklist-taskill" class="headerlink" title="tasklist | taskill"></a>tasklist | taskill</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">tasklist | taskil获取当前状态运行进程的列表</span><br><span class="line">tasklist</span><br><span class="line"></span><br><span class="line">获取指定要连接的远程系统的 tasklist</span><br><span class="line">tasklist /S 192.168.0.1 /U admin /S password</span><br><span class="line"></span><br><span class="line">其他参数：/FI 用于筛选 /FO 输出指定格数</span><br><span class="line">tasklist /FI &quot;PID eq 3232&quot; /FO csv &gt; a.csv</span><br><span class="line"></span><br><span class="line">taskkill 是关闭进程</span><br><span class="line">taskkill /IM notepad.exe</span><br><span class="line"></span><br><span class="line">PID可以通过tasklist 查看</span><br><span class="line">taskkill /s ip /u 用户名 /p 密码 /FI &quot;PID eq 860&quot; /F</span><br></pre></td></tr></table></figure><h3 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">文件生成树</span><br><span class="line">tree</span><br><span class="line">输出</span><br><span class="line">C:.</span><br><span class="line">├───a</span><br><span class="line">├───b</span><br><span class="line">└───c</span><br><span class="line"></span><br><span class="line">换一种文件生成树</span><br><span class="line">tree /A</span><br><span class="line">输出</span><br><span class="line">C:.</span><br><span class="line">+---a</span><br><span class="line">+---b</span><br><span class="line">\---c</span><br><span class="line"></span><br><span class="line">详细文件生成树</span><br><span class="line">tree /F</span><br><span class="line">输出</span><br><span class="line">C:.</span><br><span class="line">├───a</span><br><span class="line">│       a.txt</span><br><span class="line">│</span><br><span class="line">├───b</span><br><span class="line">└───c</span><br></pre></td></tr></table></figure><h3 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">打开 GUI 执行远程主机关机的操作</span><br><span class="line">shutdown /i</span><br><span class="line"></span><br><span class="line">关闭本地主机</span><br><span class="line">shutdown /p</span><br></pre></td></tr></table></figure><h3 id="at"><a href="#at" class="headerlink" title="at"></a>at</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Copy某个时间点执行某个作业</span><br><span class="line">at 21:56 &quot;notepad.exe&quot;</span><br><span class="line"></span><br><span class="line">删除某个作业  2是任务id号</span><br><span class="line">at 2 /delete</span><br><span class="line"></span><br><span class="line">每天都在某个位置执行某个作业，22:00时间和后面任务的位置是可变</span><br><span class="line">at 22:00 /every:M,T,W,Th,F,S,Su C:\Users\14805\desktop\payload.exe</span><br></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Copycmd 运行指令:</span><br><span class="line">显示当前环境变量</span><br><span class="line">set</span><br><span class="line"></span><br><span class="line">输出环境变量值</span><br><span class="line">echo %OS%</span><br><span class="line">输出 Windows_NT</span><br></pre></td></tr></table></figure><h3 id="操作文件夹"><a href="#操作文件夹" class="headerlink" title="操作文件夹"></a>操作文件夹</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">dir  查看文件夹与文件</span><br><span class="line"></span><br><span class="line">创建文件夹 mkdir</span><br><span class="line">mkdir test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">重命名文件夹 ren</span><br><span class="line">ren test test1</span><br><span class="line"></span><br><span class="line">将 a 文件夹中的文件复制到 b 文件夹</span><br><span class="line">copy a b</span><br><span class="line"></span><br><span class="line">删除文件夹 rmdir</span><br><span class="line">rmdir test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">删除文件 del 后面跟绝对路径</span><br><span class="line">del *.txt</span><br><span class="line"></span><br><span class="line">重命名文件</span><br><span class="line">move test.txt test1.txt</span><br><span class="line"></span><br><span class="line">移动文件</span><br><span class="line">move C:\a\test.txt C:\b\test.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Copy1.</span><br><span class="line">if () else ()</span><br><span class="line"></span><br><span class="line">2.</span><br><span class="line">if (</span><br><span class="line">) else (</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">3. 循环文件夹</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">for</span> /d %%名称 <span class="keyword">in</span> (路径/*) <span class="keyword">do</span> 具体操作</span></span><br><span class="line"></span><br><span class="line">.bat文件内容：打印当前文件夹下的所有文件夹</span><br><span class="line">for /d %%a in (*) do echo %%a</span><br><span class="line"></span><br><span class="line">4.循环文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">for</span> /r <span class="string">&quot;目录文件&quot;</span> %%名称 <span class="keyword">in</span> (匹配规则，例如 *.py) <span class="keyword">do</span> 具体操作</span></span><br><span class="line"></span><br><span class="line">.bat文件内容：打印当前文件夹下的所有.py文件</span><br><span class="line">for /r &quot;C:\Users\14805\Desktop\abc&quot; %%a in (*.py) do echo %%a</span><br><span class="line"></span><br><span class="line">5.循环数字</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">for</span> /L %%a <span class="keyword">in</span> (start,step,end) <span class="keyword">do</span> 具体操作</span></span><br><span class="line"></span><br><span class="line">.bat文件内容：ping 168.0.0.1 至 168.0.0.20（传入参数 %1 等于 168.0.0） </span><br><span class="line">for /L %%a in (1,1,20) do ping %1.%%a</span><br><span class="line"></span><br><span class="line">6.循环文件中的内容</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">for</span> /F %%a <span class="keyword">in</span> (文件名) <span class="keyword">do</span> 具体操作</span></span><br><span class="line"></span><br><span class="line">.bat文件内容：打印test.bat中的内容</span><br><span class="line">for /F %%a in (test.bat) do echo %%a</span><br></pre></td></tr></table></figure><h3 id="用户操作命令"><a href="#用户操作命令" class="headerlink" title="用户操作命令"></a>用户操作命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">net user 查看所有用户</span><br><span class="line">net uset 具体用户    查看对应详细信息</span><br><span class="line"></span><br><span class="line">用户组</span><br><span class="line">net localgroup </span><br></pre></td></tr></table></figure><h3 id="net-user"><a href="#net-user" class="headerlink" title="net user"></a>net user</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">查看所有用户</span><br><span class="line">net user</span><br><span class="line"></span><br><span class="line">查看帮助</span><br><span class="line">net user /?</span><br><span class="line"></span><br><span class="line">查看帮助完整版</span><br><span class="line">net user /help</span><br></pre></td></tr></table></figure><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键#"></a>常用快捷键<a href="https://www.cnblogs.com/CourserLi/p/15344685.html#309393526">#</a></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Copy清屏</span><br><span class="line">cls</span><br><span class="line"></span><br><span class="line">显示当前目录</span><br><span class="line">dir (cmd | powershell)</span><br><span class="line">ls (powershell)</span><br><span class="line"></span><br><span class="line">打开当前文件夹</span><br><span class="line">start .</span><br><span class="line"></span><br><span class="line">查找文件</span><br><span class="line">dir *.txt (cmd | powershell)</span><br><span class="line"></span><br><span class="line">显示当前路径</span><br><span class="line">pwd (powershell)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ping-telnet"><a href="#ping-telnet" class="headerlink" title="ping  telnet"></a>ping  telnet</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">检测本地网卡是否异常</span><br><span class="line">ping 127.0.0.1</span><br><span class="line">测试该ip最大缓存</span><br><span class="line">ping -l 111111111111111111111111   ip</span><br><span class="line">一直ping直到主机不在接收为止</span><br><span class="line">ping -l 65500 -t 192.168.0.1</span><br><span class="line"></span><br><span class="line">连接对应主机的端口</span><br><span class="line">telnet ip 端口号 </span><br></pre></td></tr></table></figure><h3 id="网络路由信息"><a href="#网络路由信息" class="headerlink" title="网络路由信息"></a>网络路由信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">查看本机到对应ip经过多少路由</span><br><span class="line">tracert ip</span><br><span class="line"></span><br><span class="line">查看本机ip配置信息</span><br><span class="line">ipconfig</span><br><span class="line">释放 重新获取</span><br><span class="line">ipconfig /release </span><br><span class="line">ipconfig /renew</span><br><span class="line"></span><br><span class="line">nslookup   可以看到你的默认服务器 ip 地址；</span><br><span class="line">输入ping+空格+你想要获得的域名，例如ping www.baidu.com，我们可以看到使用ping发送了探测报文，14.215.177.38回复了我们，说明该服务器ip地址离当前主机最近(主机离服务器距离越远，传输时间越长，当有多个服务器时，一般会选择最近的那一个服务器);</span><br><span class="line">输入你想要查询的域名，例如www.baidu.com，我们可以看到当前百度有两个ip地址;</span><br><span class="line"></span><br><span class="line">显示 修改ip到mac地址的地址转换表 arp协议</span><br><span class="line">arp -a</span><br></pre></td></tr></table></figure><h3 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">rem 演示if-else结构,()代表代码块</span><br><span class="line"></span><br><span class="line">set v=hello</span><br><span class="line">if %v%==hello (echo ok) else (echo no)</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h3 id="判断文件是否存在exist"><a href="#判断文件是否存在exist" class="headerlink" title="判断文件是否存在exist"></a>判断文件是否存在exist</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">if exist 文件绝对路径 () else ()</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">判断是否存在并删除</span><br><span class="line">@echo off</span><br><span class="line">if exist 文件绝对路径(</span><br><span class="line">del 文件绝对路径</span><br><span class="line">) else (</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h3 id="for遍历"><a href="#for遍历" class="headerlink" title="for遍历"></a>for遍历</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/d 针对文件夹</span><br><span class="line">@echo off</span><br><span class="line">for /d %%a in (路径) do ()</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">/r针对文件</span><br><span class="line">for /r 路径 %%v in (匹配规则) do ()</span><br><span class="line"></span><br><span class="line">/l针对数字</span><br><span class="line">for /L %%v in(start,step,end) do ()</span><br><span class="line"></span><br><span class="line">bat文件内容</span><br><span class="line">@echo off</span><br><span class="line">for /L %%v in(1,1,20) do ping %1.%%v</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">cmd 对应bat文件跟%1参数192.168.0   自动ping192.168.0.1到20</span><br><span class="line"></span><br><span class="line">/f 遍历文件，对应文件每一行</span><br><span class="line">for /f %%v in (对应文件) do (操作)</span><br></pre></td></tr></table></figure><h3 id="goto实现死循环"><a href="#goto实现死循环" class="headerlink" title="goto实现死循环"></a>goto实现死循环</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cd 指定目录</span><br><span class="line"></span><br><span class="line">:loop</span><br><span class="line">md virus</span><br><span class="line">cd virus</span><br><span class="line">goto loop</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h3 id="计算机信息展示"><a href="#计算机信息展示" class="headerlink" title="计算机信息展示"></a>计算机信息展示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">echo. &gt; log.txt</span><br><span class="line">echo Lof File &gt;&gt; log.txt</span><br><span class="line">echo. &gt; log.txt</span><br><span class="line">echo User : %username% &gt;&gt; log.txt</span><br><span class="line">Date /t &gt;&gt; log.txt</span><br><span class="line">Time /t &gt;&gt; log.txt</span><br><span class="line">echo. &gt;&gt; log.txt</span><br><span class="line">echo Process Ran by %username% &gt;&gt; log.txt</span><br><span class="line">echo. &gt;&gt; log.txt</span><br><span class="line">tasklist &gt;&gt; log.txt</span><br><span class="line">echo. &gt;&gt; log.txt</span><br><span class="line">echo Network Activities &gt;&gt; log.txt</span><br><span class="line">netstat -s &gt;&gt; log.txt</span><br><span class="line">ipconfig /all &gt;&gt; log.txt</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Log File - Lo36r<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">u</span>&gt;</span> Log File<span class="tag">&lt;/<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span>&gt;</span>This Log file is created by <span class="tag">&lt;<span class="name">b</span>&gt;</span>Lo36r<span class="tag">&lt;/<span class="name">b</span>&gt;</span> for monitoring System Actiivities!<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;log.txt&quot;</span>&gt;</span>Click here to view the Log File<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="交互操作"><a href="#交互操作" class="headerlink" title="交互操作"></a>交互操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">echo 1.a</span><br><span class="line">echo 2.b</span><br><span class="line">echo 3.c</span><br><span class="line">echo 4.d</span><br><span class="line"></span><br><span class="line">:first</span><br><span class="line">echo Enter your option:</span><br><span class="line">rem set /p 指从键盘输入</span><br><span class="line">set /p opt=</span><br><span class="line">if %opt%==1 goto one</span><br><span class="line">if %opt%==2 goto two</span><br><span class="line">if %opt%==3 goto three</span><br><span class="line">if %opt%==4 goto four</span><br><span class="line">echo Invalid option</span><br><span class="line">goto first</span><br><span class="line"></span><br><span class="line">:one</span><br><span class="line">echo you choise one</span><br><span class="line">pause</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">:two</span><br><span class="line">echo you choise two</span><br><span class="line">pause</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">:three</span><br><span class="line">echo you choise three</span><br><span class="line">pause</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">:four</span><br><span class="line">echo you choise four</span><br><span class="line">pause</span><br><span class="line">exit</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DOS编程 </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机视觉面试</title>
      <link href="/2022/09/20/%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E9%9D%A2%E8%AF%95/"/>
      <url>/2022/09/20/%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>总结面试被拷打的内容！！！！</p><span id="more"></span><p>1.IOU、GIOU、DIOU、CIOU</p><p><img src="Typora\图像\1663682184850.png" alt="1663682184850">。</p><p><img src="Typora\图像\1663682269741.png" alt="1663682269741">，C为最小包围两个框的大框的面积</p><p><img src="Typora\图像\1663683962728.png" alt="1663683962728">，最后分子是两框中心点欧式距离的平方，分母是最小包围框对角线长度的平方。</p><p><img src="Typora\图像\1663684149621.png" alt="1663684149621">，<img src="Typora\图像\1663684194203.png" alt="1663684194203">，<img src="Typora\图像\1663684220911.png" alt="1663684220911">，v度量两框宽高比的一致性，a权重函数</p><p>2.NMS</p><p>NMS就是非极大值抑制，当神经网络输出时，一个类别包含多个box，NMS就是就box按照置信度降序排序后，先保存第一个box，然后计算第一个box与后续box之间iou得分满足阈值则保留，然后对除第一个外后续保留的box重复此操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">iou</span>(<span class="params">box,boxes,isMin=<span class="literal">False</span></span>):<span class="comment">#计算两个框的交并比</span></span><br><span class="line">    <span class="comment">#box 的面积</span></span><br><span class="line">    box_area=(box[<span class="number">2</span>]-box[<span class="number">0</span>])*(box[<span class="number">3</span>]-box[<span class="number">1</span>])<span class="comment">#box以多行4列存储，分别是左上角X Y 右下角 X Y</span></span><br><span class="line">    boxes_area=(boxes[:,<span class="number">2</span>]-boxes[:,<span class="number">0</span>])*(boxes[:,<span class="number">3</span>]-boxes[:,<span class="number">1</span>])<span class="comment">#列-列，在分别相乘求</span></span><br><span class="line">    <span class="comment">#分别取两个框左上角坐标X和Y中最大的值，右下角XY最小值</span></span><br><span class="line">    <span class="comment">#交集</span></span><br><span class="line">    xx1=torch.maximum(box[<span class="number">0</span>],boxes[:,<span class="number">0</span>])</span><br><span class="line">    yy1=torch.maximum(box[<span class="number">1</span>],boxes[:,<span class="number">1</span>])</span><br><span class="line">    xx2=torch.minimum(box[<span class="number">2</span>],boxes[:,<span class="number">2</span>])</span><br><span class="line">    yy2=torch.minimum(box[<span class="number">3</span>],boxes[:,<span class="number">3</span>])</span><br><span class="line">    </span><br><span class="line">    w,h=torch.maximum(torch.Tensor([<span class="number">0</span>]),xx2-xx1),torch.maximum(torch.Tensor([<span class="number">0</span>]),yy2-yy1)</span><br><span class="line">    ovr_area=w*h</span><br><span class="line">    <span class="keyword">if</span> isMin:</span><br><span class="line">        <span class="keyword">return</span> ovr_area/torch.<span class="built_in">min</span>(box_area,boxes_area)<span class="comment">#返回的iou是通过交集/最小面积</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> ovr_area/(box_area+boxes_area-ovr_area)<span class="comment">#交集/并集</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#nms</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nms</span>(<span class="params">boxes,thresh=<span class="number">0.3</span>,isMin=<span class="literal">False</span></span>):<span class="comment">#神经网络输出包含的box包含5个值，有一个置信度</span></span><br><span class="line">    new_boxes=boxes[boxes[:,<span class="number">0</span>].argsort(descending=<span class="literal">True</span>)]<span class="comment">#将置信度按降序排序</span></span><br><span class="line">    keep_boxes=[]</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(new_boxes)&gt;<span class="number">0</span>:</span><br><span class="line">        _box=new_boxes[<span class="number">0</span>]</span><br><span class="line">        keep_boxes.append(_box)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(new_boxes)&gt;<span class="number">1</span>:</span><br><span class="line">            _boxes=new_boxes[<span class="number">1</span>:]</span><br><span class="line">            new_boxes=_boxes[torch.where(iou(_box,_boxes,isMin)&lt;thresh)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> torch.stack(keep_boxes)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">        <span class="comment">#box=torch.tensor([0,0,4,4])</span></span><br><span class="line">        <span class="comment">#boxes=torch.tensor([[4,4,5,5],[1,1,5,5]])</span></span><br><span class="line">        <span class="comment">#print(iou(box,boxes))</span></span><br><span class="line"></span><br><span class="line">        boxes=torch.tensor([[<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">10</span>],[<span class="number">0.9</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">11</span>],[<span class="number">0.4</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">12</span>]])</span><br><span class="line">        <span class="built_in">print</span>(nms(boxes,<span class="number">0.1</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LC刷题</title>
      <link href="/2022/08/08/%E9%9D%A2%E8%AF%95/LC%E5%88%B7%E9%A2%98/"/>
      <url>/2022/08/08/%E9%9D%A2%E8%AF%95/LC%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>LeetCode刷题，遇到的知识点与解题。</p><p>牛客刷题，遇到的知识点与解题。</p><span id="more"></span><h2 id="73-矩阵置零"><a href="#73-矩阵置零" class="headerlink" title="73.矩阵置零"></a>73.矩阵置零</h2><p> 给定一个M*N的矩阵，如果一个元素为 <strong>0</strong> ，则将其所在行和列的所有元素都设为 <strong>0</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历标记出现0的行和列，然后遍历对有零所在的行或列所有元素置零。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setZeroes</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> col = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> row = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">y</span><span class="params">(row)</span>, <span class="title">x</span><span class="params">(col)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;row;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;col;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j]==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    x[j]=<span class="number">1</span>;</span><br><span class="line">                    y[i]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;row;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;col;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(x[j]||y[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    matrix[i][j]=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="543-二叉树的直径"><a href="#543-二叉树的直径" class="headerlink" title="543.二叉树的直径"></a>543.二叉树的直径</h2><p>二叉树直径长度&#x3D;树中任意两结点最短路径的最大值。</p><p>树的深度即是层数。</p><p>两结点之间的路径长度&#x3D;他们之间边的数目。</p><p>递归函数三要素：1.子问题与原问题做同样的事。2.需要一个让递归结束的出口。3.递归表达式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用到深度优先搜索</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> ans;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">depth</span><span class="params">(TreeNode* rt)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rt==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> L=<span class="built_in">depth</span>(rt-&gt;left);</span><br><span class="line">        <span class="type">int</span> R=<span class="built_in">depth</span>(rt-&gt;right);</span><br><span class="line">        ans = <span class="built_in">max</span>(ans,L+R+<span class="number">1</span>);#记录最大的路径长度</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(L,R)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">diameterOfBinaryTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        ans =<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">depth</span>(root);</span><br><span class="line">        <span class="keyword">return</span> ans<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20.有效的括号"></a>20.有效的括号</h2><p>()[]{}</p><p>后进的左括号先匹配右括号。</p><blockquote><p>涉及栈和unordered_map的使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isValid(string s) &#123;</span><br><span class="line">        if(s.size()%2==1)</span><br><span class="line">        &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125; </span><br><span class="line">        unordered_map&lt;char,char&gt;pairs=</span><br><span class="line">        &#123;</span><br><span class="line">            &#123;&#x27;)&#x27;,&#x27;(&#x27;&#125;,</span><br><span class="line">            &#123;&#x27;]&#x27;,&#x27;[&#x27;&#125;,</span><br><span class="line">            &#123;&#x27;&#125;&#x27;,&#x27;&#123;&#x27;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        stack&lt;char&gt;stk;</span><br><span class="line">        for(char ch:s)</span><br><span class="line">        &#123;</span><br><span class="line">            if(pairs.count(ch))//判断ch是不是pairs中的键</span><br><span class="line">            &#123;</span><br><span class="line">                if(stk.empty() || stk.top()!=pairs[ch])</span><br><span class="line">                &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">                stk.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                stk.push(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return stk.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21.合并两个有序链表"></a>21.合并两个有序链表</h2><blockquote><p>涉及</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* preHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">        ListNode* prev = preHead;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">nullptr</span> &amp;&amp; l2 != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) &#123;</span><br><span class="line">                prev-&gt;next = l1;</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                prev-&gt;next = l2;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = prev-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合并后 l1 和 l2 最多只有一个还未被合并完，我们直接将链表末尾指向未合并完的链表即可</span></span><br><span class="line">        prev-&gt;next = l1 == <span class="literal">nullptr</span> ? l2 : l1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> preHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26.删除有序数组中的重复项"></a>26.删除有序数组中的重复项</h3><blockquote><p>原数组升序排列但是有重复项，把重复的删除，保持升序。返回不重复的数字个数k，数组前k项就是升序不重复数组。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int removeDuplicates(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int size=nums.size();</span><br><span class="line">        if(size==0)</span><br><span class="line">        &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        int left=1;</span><br><span class="line">        for(int i=1;i&lt;size;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(nums[i-1]!=nums[i])</span><br><span class="line">            &#123;</span><br><span class="line">                nums[left]=nums[i];</span><br><span class="line">                ++left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：最长公共子串"><a href="#题：最长公共子串" class="headerlink" title="题：最长公共子串"></a>题：最长公共子串</h2><p> 动态规划算法的基本思想是：将待求解的问题分解成若干个相互联系的子问题，先求解子问题，然后从这些子问题的解得到原问题的解；对于重复出现的子问题，只在第一次遇到的时候对它进行求解，并把答案保存起来，让以后再次遇到时直接引用答案，不必重新求解。</p><p><img src="Typora\图像\1659983809704.png" alt="1659983809704"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//blog.csdn.net/BShanj/article/details/113817328</span></span><br><span class="line"><span class="comment">//二维容器  </span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">table</span>(size1, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(size2, <span class="number">0</span>));<span class="comment">//行:size1,列:size2用0填充</span></span><br><span class="line"><span class="comment">//三维 容器</span></span><br><span class="line"><span class="comment">//长宽高：2*3*5 </span></span><br><span class="line">vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; <span class="built_in">cube</span>(<span class="number">5</span>, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(<span class="number">3</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>, <span class="number">0</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态规划</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">LCS</span><span class="params">(string str1, string str2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//dp[i][j]表示到str1第i个个到str2第j个为止的公共子串长度</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">dp</span>(str1.<span class="built_in">length</span>() + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(str2.<span class="built_in">length</span>() + <span class="number">1</span>, <span class="number">0</span>)); </span><br><span class="line">        <span class="type">int</span> max = <span class="number">0</span>;<span class="comment">//记录最大长度</span></span><br><span class="line">        <span class="type">int</span> pos = <span class="number">0</span>;<span class="comment">//记录最大长度子串的最后一个元素下标</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= str1.<span class="built_in">length</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= str2.<span class="built_in">length</span>(); j++)&#123;</span><br><span class="line">                <span class="comment">//如果该两位相同</span></span><br><span class="line">                <span class="keyword">if</span>(str1[i - <span class="number">1</span>] == str2[j - <span class="number">1</span>])&#123; </span><br><span class="line">                    <span class="comment">//则增加长度 dp[0][0] = 0</span></span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>; </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123; </span><br><span class="line">                    <span class="comment">//该位置为0</span></span><br><span class="line">                    dp[i][j] = <span class="number">0</span>; </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//更新最大长度</span></span><br><span class="line">                <span class="keyword">if</span>(dp[i][j] &gt; max)&#123; </span><br><span class="line">                    max = dp[i][j];</span><br><span class="line">                    pos = i - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str1.<span class="built_in">substr</span>(pos - max + <span class="number">1</span>, max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  双指针  先用str1中第一个元素开始长度为1的子串  去str2中查找  找到了子串元素个数+1，还是str1中的第一个元素开始  继续查找··· </span></span><br><span class="line"><span class="comment">           没找到用str1中第二个元素开始的长度为前一次匹配长度-1，为0时长度为1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">string <span class="title">LCS</span><span class="params">(string str1, string str2)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> first = <span class="number">0</span>, second = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">string res;</span><br><span class="line"><span class="keyword">while</span> (second &lt; str1.<span class="built_in">size</span>()) &#123;</span><br><span class="line">string subStr = str1.<span class="built_in">substr</span>(first, second - first + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//string::npos  表示不存在的位置，在此处就是表示str2没有与substr相同的子串。</span></span><br><span class="line"><span class="keyword">if</span> (str2.<span class="built_in">find</span>(subStr) != string::npos) &#123;</span><br><span class="line"><span class="keyword">if</span> (subStr.<span class="built_in">size</span>() &gt; maxLen) &#123;</span><br><span class="line">maxLen = subStr.<span class="built_in">size</span>();</span><br><span class="line">res = subStr;</span><br><span class="line">&#125;</span><br><span class="line">second++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (second == first) &#123;</span><br><span class="line">second ++;</span><br><span class="line">first ++;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (first &lt; second) &#123;</span><br><span class="line">first ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题：数组中重复的数字"><a href="#题：数组中重复的数字" class="headerlink" title="题：数组中重复的数字"></a>题：数组中重复的数字</h2><p> 哈希表是一种根据关键码（key）直接访问值（value）的一种数据结构。而这种直接访问意味着只要知道key就能在O(1)时间内得到value，因此哈希表常用来统计频率、快速检验某个元素是否出现过等。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param numbers int整型vector </span></span><br><span class="line"><span class="comment">     * @return int整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">duplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; numbers)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 哈希表</span></span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="comment">//遍历数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numbers.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="comment">//如果没有出现过就加入哈希表</span></span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">find</span>(numbers[i]) == mp.<span class="built_in">end</span>())</span><br><span class="line">                mp[numbers[i]]++;</span><br><span class="line">            <span class="comment">//否则就是重复数字</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> numbers[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有重复</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：二维数组中查找是否存在数字"><a href="#题：二维数组中查找是否存在数字" class="headerlink" title="题：二维数组中查找是否存在数字"></a>题：二维数组中查找是否存在数字</h2><p>二维数组从左到右 从上到下  依次增大</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> target, vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(array.<span class="built_in">size</span>()==<span class="number">0</span> || array[<span class="number">0</span>].<span class="built_in">size</span>()==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = array.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span> &amp;&amp; j&lt;=array[<span class="number">0</span>].<span class="built_in">size</span>()<span class="number">-1</span>;)&#123;</span><br><span class="line">            <span class="comment">//从数组的最左下角开始查找，大了向上移动，小了向右移动</span></span><br><span class="line">            <span class="keyword">if</span>(array[i][j] &gt; target) i--; </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(array[i][j]&lt;target) j++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：替换字符串中的空格"><a href="#题：替换字符串中的空格" class="headerlink" title="题：替换字符串中的空格"></a>题：替换字符串中的空格</h2><p>将字符串中的空格替换成%20</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">replaceSpace</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//查找字符串中的空格   将空格位置的一个元素替换成%20</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">&#x27; &#x27;</span>)s.<span class="built_in">replace</span>(i, <span class="number">1</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">replaceSpace</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//查找字符串中的空格  将空格替换成%   并在后面插入20</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span>(s[i]==<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               s[i]=<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">               s.<span class="built_in">insert</span>(i+<span class="number">1</span>, <span class="string">&quot;20&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：从尾到头打印单链表"><a href="#题：从尾到头打印单链表" class="headerlink" title="题：从尾到头打印单链表"></a>题：从尾到头打印单链表</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span>) <span class="keyword">return</span> &#123;&#125;;<span class="comment">//判断特殊情况</span></span><br><span class="line">        ListNode* p=head;</span><br><span class="line">        <span class="comment">//统计链表元素的个数</span></span><br><span class="line">        <span class="keyword">while</span> (p)&#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从头到尾方向填入数组</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(len)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            arr[i] = head-&gt;val;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：重建二叉树"><a href="#题：重建二叉树" class="headerlink" title="题：重建二叉树"></a>题：重建二叉树</h2><p>根据二叉树的前序遍历序列和中序遍历序列，重建该二叉树，并返回根节点</p><p>两个遍历都没有重复的元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前序遍历第一个元素即是根节点，中序遍历根节点左边即是根节点的左子树，右边是右子树</span></span><br><span class="line"><span class="comment">//将前序和中序遍历结果   不断分为左右子树   填进新二叉树</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">reConstructBinaryTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt; pre,vector&lt;<span class="type">int</span>&gt; vin)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> vinlen = vin.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(vinlen == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; pre_left, pre_right, vin_left, vin_right;</span><br><span class="line">        <span class="comment">//创建根节点</span></span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(pre[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">//找到根节点再中序遍历中的位置</span></span><br><span class="line">        <span class="type">int</span> gen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; vinlen; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vin[i] == pre[<span class="number">0</span>])&#123;</span><br><span class="line">                gen = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到在左边的结点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; gen; i++)&#123;</span><br><span class="line">            vin_left.<span class="built_in">push_back</span>(vin[i]);</span><br><span class="line">            pre_left.<span class="built_in">push_back</span>(pre[i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到在右边的结点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = gen + <span class="number">1</span>; i &lt; vinlen; i++)&#123;</span><br><span class="line">            vin_right.<span class="built_in">push_back</span>(vin[i]);</span><br><span class="line">            pre_right.<span class="built_in">push_back</span>(pre[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//递归,利用返回值来插入，妙的离谱</span></span><br><span class="line">        root-&gt;left = <span class="built_in">reConstructBinaryTree</span>(pre_left, vin_left);</span><br><span class="line">        root-&gt;right = <span class="built_in">reConstructBinaryTree</span>(pre_right, vin_right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：反转链表"><a href="#题：反转链表" class="headerlink" title="题：反转链表"></a>题：反转链表</h2><p>没有头结点的单链表，将它方向</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList</span><span class="params">(ListNode* pHead)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pHead==<span class="literal">NULL</span> || pHead-&gt;next==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> pHead;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* ans = <span class="built_in">ReverseList</span>(pHead-&gt;next);</span><br><span class="line">        pHead-&gt;next-&gt;next=pHead;</span><br><span class="line">        pHead-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：找到二叉树指定结点在中序结果的下一结点位置"><a href="#题：找到二叉树指定结点在中序结果的下一结点位置" class="headerlink" title="题：找到二叉树指定结点在中序结果的下一结点位置"></a>题：找到二叉树指定结点在中序结果的下一结点位置</h2><p>二叉树不仅有左右儿子指针，还拥有返回父节点的指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中序遍历结果，下一元素位置一定在当前元素第一个右儿子（如果右儿子存在）的最左边的元素</span></span><br><span class="line"><span class="comment">//当前结点在其父节点左边，则是当前元素的第一个父节点</span></span><br><span class="line"><span class="comment">//当前结点在其父节点右边，则是最上面的父节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeLinkNode* <span class="title">GetNext</span><span class="params">(TreeLinkNode* pNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pNode == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        TreeLinkNode* pret = pNode;</span><br><span class="line">        <span class="keyword">if</span> (pNode-&gt;right)&#123;</span><br><span class="line">            pret = pNode-&gt;right;</span><br><span class="line">            <span class="keyword">while</span>(pret-&gt;left)&#123;</span><br><span class="line">                pret = pret-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> pret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(pNode-&gt;next)&#123;</span><br><span class="line">            pret = pNode-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(pret-&gt;left == pNode)</span><br><span class="line">                <span class="keyword">return</span> pret;</span><br><span class="line">            pNode = pNode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：用两个栈实现队列操作"><a href="#题：用两个栈实现队列操作" class="headerlink" title="题：用两个栈实现队列操作"></a>题：用两个栈实现队列操作</h2><p>栈：先进后出；队列：先进先出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先将所有元素写进stack1，再将全部元素取出放入stack2，并将stack2的第一个元素返回并删除</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> node)</span> </span>&#123;</span><br><span class="line">        stack1.<span class="built_in">push</span>(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stack2.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                <span class="type">int</span> tem = stack1.<span class="built_in">top</span>();</span><br><span class="line">                stack1.<span class="built_in">pop</span>();</span><br><span class="line">                stack2.<span class="built_in">push</span>(tem);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = stack2.<span class="built_in">top</span>();</span><br><span class="line">        stack2.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stack1;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stack2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：-斐波那契数列"><a href="#题：-斐波那契数列" class="headerlink" title="题： 斐波那契数列"></a>题： 斐波那契数列</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//暴力递归</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span> || n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">Fibonacci</span>(n<span class="number">-1</span>)+<span class="built_in">Fibonacci</span>(n<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//使用两个变量记录当值和前一个值</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span> || n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> dp1=<span class="number">1</span>,dp2=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="comment">//通过位运算判断奇偶性,奇数的二进制码最后一位为1，与i%2!=0相同</span></span><br><span class="line">            <span class="keyword">if</span>((i&amp;<span class="number">1</span>)==<span class="number">1</span>)  dp1+=dp2;</span><br><span class="line">            <span class="keyword">else</span>  dp2+=dp1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((n &amp; <span class="number">1</span>)==<span class="number">1</span>) <span class="keyword">return</span> dp1;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> dp2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：旋转数组中的最小数字"><a href="#题：旋转数组中的最小数字" class="headerlink" title="题：旋转数组中的最小数字"></a>题：旋转数组中的最小数字</h2><p>有一个长度为 n 的非降序数组，比如[1,2,3,4,5]，将它进行旋转，即把一个数组最开始的若干个元素搬到数组的末尾，变成一个旋转数组，比如变成了[3,4,5,1,2]，或者[4,5,1,2,3]这样的。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用二分法，由于是通过升序数组旋转得到，若第一个元素大于最后一个元素，则最小数字就是第一个元素</span></span><br><span class="line"><span class="comment">//通过中间数字与末尾数字比较，中间数字大，则将答案锁定在中间以后的元素中</span></span><br><span class="line"><span class="comment">//中间数字下，则把答案定位在第一个元素到中间元素之间</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minNumberInRotateArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt; rotateArray)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rotateArray.<span class="built_in">size</span>()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>,right=rotateArray.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(rotateArray[left]&lt;rotateArray[right])&#123;</span><br><span class="line">                <span class="keyword">return</span> rotateArray[left];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> mid = left + (right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(rotateArray[mid]&lt;rotateArray[right])&#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(rotateArray[mid]&gt;rotateArray[right])&#123;</span><br><span class="line">                left = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rotateArray[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：矩阵中的路径"><a href="#题：矩阵中的路径" class="headerlink" title="题：矩阵中的路径"></a>题：矩阵中的路径</h2><p> 用来判断在一个n乘m的矩阵中是否存在一条包含某长度为len的字符串所有字符的路径 。输入：[[a,b,c,e],[s,f,c,s],[a,d,e,e]],”abcced”  返回值为true</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param matrix char字符型vector&lt;vector&lt;&gt;&gt; </span></span><br><span class="line"><span class="comment">     * @param word string字符串 </span></span><br><span class="line"><span class="comment">     * @return bool布尔型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">hasPath</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt; &gt;&amp; matrix, string word)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span> (word == <span class="string">&quot;&quot;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> m = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = m &gt; <span class="number">0</span> ? matrix[<span class="number">0</span>].<span class="built_in">size</span>() : <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">memo</span>(m, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">false</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i ) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j ) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">hasPath</span>(matrix, memo, word, <span class="number">0</span>, i, j)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasPath</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; matrix, vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt;&amp; memo, string word, <span class="type">int</span> index, <span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (word[index] != matrix[i][j]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (index + <span class="number">1</span> == word.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        memo[i][j] = <span class="literal">true</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; direction = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">bool</span> res = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 四个方向</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">            <span class="type">int</span> x = i + direction[k];</span><br><span class="line">            <span class="type">int</span> y = j + direction[k + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= matrix.<span class="built_in">size</span>()) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (y &lt; <span class="number">0</span> || y &gt;= matrix[<span class="number">0</span>].<span class="built_in">size</span>()) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (!memo[x][y]) &#123;</span><br><span class="line">                res |= <span class="built_in">hasPath</span>(matrix, memo, word, index + <span class="number">1</span>, x, y);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (res) <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        memo[i][j] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：机器人的运动范围"><a href="#题：机器人的运动范围" class="headerlink" title="题：机器人的运动范围"></a>题：机器人的运动范围</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//记录遍历的四个方向，上下左右</span></span><br><span class="line">    <span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="comment">//记录答案</span></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//计算一个数字的每个数之和</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//连除法算出每一位</span></span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            sum += (n % <span class="number">10</span>);</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//深度优先搜索dfs</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> rows, <span class="type">int</span> cols, <span class="type">int</span> threshold, vector&lt;vector&lt;<span class="type">bool</span>&gt; &gt;&amp; vis)</span></span>&#123;</span><br><span class="line">        <span class="comment">//越界或者已经访问过</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= rows || j &lt; <span class="number">0</span> || j &gt;= cols || !vis[i][j])</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//行列和数字相加大于threshold，不可取</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">cal</span>(i) + <span class="built_in">cal</span>(j) &gt; threshold)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        res += <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//标记经过的位置</span></span><br><span class="line">        vis[i][j] = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//上下左右四个方向搜索</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">            <span class="built_in">dfs</span>(i + dir[k][<span class="number">0</span>], j + dir[k][<span class="number">1</span>], rows, cols, threshold, vis);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">movingCount</span><span class="params">(<span class="type">int</span> threshold, <span class="type">int</span> rows, <span class="type">int</span> cols)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断特殊情况</span></span><br><span class="line">        <span class="keyword">if</span>(threshold &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//标记某个格子没有被访问过</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt; &gt; <span class="built_in">vis</span>(rows, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(cols, <span class="literal">true</span>));</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>, rows, cols, threshold, vis);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：最小数组最大值"><a href="#题：最小数组最大值" class="headerlink" title="题：最小数组最大值"></a>题：最小数组最大值</h2><p> 小红拿到了一个数组 a, 每次操作小红可以选择数组中的任意一个数减去 x, 小红一共能进行k次， 小红想在 <img src="Typora\图像\equation-1660758548083.svg" alt="k"> 次操作之后，数组的最大值尽可能小。请你返回这个最大值 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    /**</span><br><span class="line">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="line">     *</span><br><span class="line">     *</span><br><span class="line">     * @param a int整型vector</span><br><span class="line">     * @param k int整型</span><br><span class="line">     * @param x int整型</span><br><span class="line">     * @return int整型</span><br><span class="line">     */</span><br><span class="line">    int minMax(vector&lt;int&gt;&amp; a, int k, int x) &#123;</span><br><span class="line">        priority_queue&lt;int&gt; q;</span><br><span class="line">        for(auto i:a)&#123;</span><br><span class="line">            q.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        while(k--)&#123;</span><br><span class="line">            int todo = q.top();</span><br><span class="line">            q.pop();</span><br><span class="line">            todo = todo - x;</span><br><span class="line">            q.push(todo);</span><br><span class="line">        &#125;</span><br><span class="line">        return q.top();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：返回字符串中最长同一字符子字符串"><a href="#题：返回字符串中最长同一字符子字符串" class="headerlink" title="题：返回字符串中最长同一字符子字符串"></a>题：返回字符串中最长同一字符子字符串</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">strmax</span><span class="params">(string S)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> size = S.<span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> max = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (S[i - <span class="number">1</span>] == S[i]) &#123;</span><br><span class="line">a++;</span><br><span class="line"><span class="keyword">if</span> (a &gt; max) &#123;</span><br><span class="line">max = a;</span><br><span class="line">pos = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; a = <span class="number">1</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> S.<span class="built_in">substr</span>(pos - max + <span class="number">1</span>, max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题：剪绳子"><a href="#题：剪绳子" class="headerlink" title="题：剪绳子"></a>题：剪绳子</h2><p> 例如，当绳子的长度是 8 时，我们把它剪成长度分别为 2、3、3 的三段，此时得到的最大乘积是 18 。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">cutRope</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">3</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> length = n % <span class="number">3</span> == <span class="number">0</span> ? n / <span class="number">3</span> : n / <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> length1 = n % <span class="number">3</span> == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">3</span> - n%<span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> result=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;length1;i++) &#123;</span><br><span class="line">            result=result*<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;length-length1;i++)&#123;</span><br><span class="line">            result=result*<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：给定一个数判断其二进制数中1的个数"><a href="#题：给定一个数判断其二进制数中1的个数" class="headerlink" title="题：给定一个数判断其二进制数中1的个数"></a>题：给定一个数判断其二进制数中1的个数</h2><p> 输入一个整数 n ，输出该数32位二进制表示中1的个数。其中负数用补码表示。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="function"><span class="type">int</span>  <span class="title">NumberOf1</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">         <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">         <span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">             ++ans;</span><br><span class="line">             n=n &amp; (n<span class="number">-1</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> ans;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：数值的整数次方"><a href="#题：数值的整数次方" class="headerlink" title="题：数值的整数次方"></a>题：数值的整数次方</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">Power</span><span class="params">(<span class="type">double</span> base, <span class="type">int</span> exponent)</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> ans=<span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">if</span>(base==<span class="number">0.0</span>) <span class="keyword">return</span> base;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(exponent==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;exponent;i++)&#123;</span><br><span class="line">                ans*=base;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&gt;exponent;i--)&#123;</span><br><span class="line">                ans/=base;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题-打印从1到n位最大数的整数"><a href="#题-打印从1到n位最大数的整数" class="headerlink" title="题:打印从1到n位最大数的整数"></a>题:打印从1到n位最大数的整数</h2><p>输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">printNumbers</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="type">int</span> maxnum = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            maxnum*=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        maxnum-=<span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(maxnum)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;maxnum;i++)&#123;</span><br><span class="line">            ans[i]=i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：删除单链表的节点"><a href="#题：删除单链表的节点" class="headerlink" title="题：删除单链表的节点"></a>题：删除单链表的节点</h2><p>给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。返回删除后的链表的头节点。</p><p>1.此题对比原题有改动</p><p>2.题目保证链表中节点的值互不相同</p><p>3.该题只会输出返回的链表和结果做对比，所以若使用 C 或 C++ 语言，你不需要 free 或 delete 被删除的节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteNode</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(head-&gt;val==val) <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">        ListNode* myHead=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        myHead-&gt;next=head;</span><br><span class="line">        ListNode* pre=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        pre = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pre-&gt;val==val)&#123;</span><br><span class="line">                head-&gt;next=head-&gt;next-&gt;next;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head=head-&gt;next;</span><br><span class="line">            pre=pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> myHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：正则表达式匹配"><a href="#题：正则表达式匹配" class="headerlink" title="题：正则表达式匹配"></a>题：正则表达式匹配</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">match</span><span class="params">(string str, string pattern)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n1 = str.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> n2 = pattern.<span class="built_in">length</span>();</span><br><span class="line">        <span class="comment">// dp[i][j]表示str[0:i]与pattern[0:j]是否匹配</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">dp</span>(n1+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n2+<span class="number">1</span>, <span class="literal">false</span>));</span><br><span class="line">        <span class="comment">// 边界初始化</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>; <span class="comment">// 空串匹配</span></span><br><span class="line">        <span class="comment">// 初始化第一行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">2</span>; i&lt;=n2; i++)&#123;</span><br><span class="line">            <span class="comment">// 遇到*</span></span><br><span class="line">            <span class="keyword">if</span> (pattern[i<span class="number">-1</span>] == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i<span class="number">-2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n1; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=n2; j++)&#123;</span><br><span class="line">                <span class="comment">// 当遇到的字符不为*，判断是否匹配</span></span><br><span class="line">                <span class="keyword">if</span>(pattern[j<span class="number">-1</span>] != <span class="string">&#x27;*&#x27;</span> &amp;&amp; (pattern[j<span class="number">-1</span>] == str[i<span class="number">-1</span>] || pattern[j<span class="number">-1</span>] == <span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j&gt;=<span class="number">2</span> &amp;&amp; pattern[j<span class="number">-1</span>] == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                    <span class="comment">// 若前一位字符为.或者字符匹配的</span></span><br><span class="line">                    <span class="keyword">if</span>(pattern[j<span class="number">-2</span>] == <span class="string">&#x27;.&#x27;</span> || pattern[j<span class="number">-2</span>] == str[i<span class="number">-1</span>])</span><br><span class="line">                        dp[i][j] = dp[i][j<span class="number">-2</span>] || dp[i<span class="number">-1</span>][j];</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        dp[i][j] = dp[i][j<span class="number">-2</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n1][n2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">match</span><span class="params">(string str, string pattern)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">partMatch</span>(str,pattern, <span class="number">0</span>,str.<span class="built_in">length</span>(), <span class="number">0</span>, pattern.<span class="built_in">length</span>());   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">partMatch</span><span class="params">(string str, string pattern,<span class="type">int</span> str_index,<span class="type">int</span> str_size,<span class="type">int</span> pattern_index,<span class="type">int</span> pattern_size)</span></span>&#123;</span><br><span class="line">        <span class="comment">//return situation</span></span><br><span class="line">        <span class="keyword">if</span>(str_index==str_size)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pattern_index==pattern_size) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(pattern_index==pattern_size<span class="number">-2</span>&amp;&amp;pattern[pattern_index+<span class="number">1</span>]==<span class="string">&#x27;*&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pattern_index==pattern_size) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//char+char/. no *</span></span><br><span class="line">        <span class="keyword">if</span>(str[str_index]==pattern[pattern_index]||pattern[pattern_index]==<span class="string">&#x27;.&#x27;</span>)&#123;<span class="comment">//第一位相同  或者  模式为 ‘.’</span></span><br><span class="line">            <span class="keyword">if</span>(pattern_index&lt;pattern_size<span class="number">-1</span>&amp;&amp;pattern[pattern_index+<span class="number">1</span>]==<span class="string">&#x27;*&#x27;</span>)&#123;<span class="comment">//模式不止1位，同时第二位为‘*’</span></span><br><span class="line">                <span class="comment">//find the last same *</span></span><br><span class="line">                <span class="type">int</span> offset=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(pattern_index+<span class="number">1</span>+offset&lt;pattern_size<span class="number">-1</span>&amp;&amp;pattern[pattern_index+<span class="number">1</span>+offset]==<span class="string">&#x27;*&#x27;</span>&amp;&amp;pattern[pattern_index+offset]==pattern[pattern_index])&#123;</span><br><span class="line">                    offset+=<span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                offset-=<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">partMatch</span>(str,pattern,str_index+<span class="number">1</span>,str.<span class="built_in">length</span>(), pattern_index+offset, pattern.<span class="built_in">length</span>())||<span class="built_in">partMatch</span>(str,pattern,str_index+<span class="number">1</span>,str.<span class="built_in">length</span>(), pattern_index+offset+<span class="number">2</span>, pattern.<span class="built_in">length</span>())||<span class="built_in">partMatch</span>(str,pattern,str_index,str.<span class="built_in">length</span>(), pattern_index+offset+<span class="number">2</span>, pattern.<span class="built_in">length</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">partMatch</span>(str,pattern,str_index+<span class="number">1</span>,str.<span class="built_in">length</span>(), pattern_index+<span class="number">1</span>, pattern.<span class="built_in">length</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(pattern_index&lt;pattern_size<span class="number">-2</span>&amp;&amp;pattern[pattern_index+<span class="number">1</span>]==<span class="string">&#x27;*&#x27;</span>) <span class="keyword">return</span> <span class="built_in">partMatch</span>(str,pattern,str_index,str.<span class="built_in">length</span>(), pattern_index+<span class="number">2</span>, pattern.<span class="built_in">length</span>());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：最长重复子串（red）百度笔试题"><a href="#题：最长重复子串（red）百度笔试题" class="headerlink" title="题：最长重复子串（red）百度笔试题"></a>题：最长重复子串（red）百度笔试题</h2><p>n表示矩阵的行 m表示矩阵的列</p><p>接下来n行 输入一个长为m的”red”字符串</p><p>“red”字符串是指所有字符均为”r”或”e”或”d”</p><p>你可以在矩阵中上下左右移动</p><p>但是r不能移动到d e不能移动到r d不能移动到e</p><p>输出从左上角走到右下角最少需要多长时间</p><p>如无法到达输出-1</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主成分分析 PCA</title>
      <link href="/2022/06/13/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90-PCA/"/>
      <url>/2022/06/13/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90-PCA/</url>
      
        <content type="html"><![CDATA[<p>主成分分析是一个分析多维分布并且从中提取出带有最多信息的维度自己的方法。</p><span id="more"></span><p>学习链接：</p><p> <a href="https://www.bilibili.com/video/BV1E5411E71z?spm_id_from=333.337.search-card.all.click&vd_source=aa67ec1c08f743d3564f0d6bd14952f0">用最直观的方式告诉你：什么是主成分分析PCA_哔哩哔哩_bilibili</a> </p><p>1.将原始数据去中心化，将新坐标系的原点放在数据中心。</p><p>2.找坐标系，找到数据方差最大的方向。</p><p><img src="1655103554994.png" alt="1655103554994"></p><p><img src="1655104316263.png" alt="1655104316263"></p><p><img src="1655104961278.png" alt="1655104961278"></p><p><img src="1655105602068.png" alt="1655105602068"></p><p><img src="1655105679409.png" alt="1655105679409"></p><p><img src="1655105835751.png" alt="1655105835751"></p><p>使用SVD分解能产生PCA的R矩阵。</p>]]></content>
      
      
      <categories>
          
          <category> opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -opencv </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
