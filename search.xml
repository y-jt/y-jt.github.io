<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pthon_leran</title>
      <link href="/2023/04/26/python/Python%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/04/26/python/Python%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>没有系统学习python，记录使用过程中遇到的小知识点。</p><span id="more"></span><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>查看一个方法的使用：</p><ul><li>关注输入输出类型</li><li>看官方文档&gt;大于百度</li><li>查看需要的参数</li></ul><p>不知道返回类型时，可以通过debug，或者print(type())</p><h3 id="python类"><a href="#python类" class="headerlink" title="python类"></a>python类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#__init__相当于构造函数，实例化时会默认执行</span></span><br><span class="line"><span class="comment">#self相当于this</span></span><br><span class="line"><span class="comment">#__call__调用对象时默认函数，可以不用通过class.function调用</span></span><br><span class="line"><span class="comment">#子类__init__中使用super().__int__()，首先执行父类的__init__,然后接自定义操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__int__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="built_in">super</span>().__int__()</span><br><span class="line">    ···</span><br></pre></td></tr></table></figure><h3 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种直接赋值，第二种缩放</span></span><br><span class="line">trans_resize = transforms.Resize((<span class="number">512</span>, <span class="number">512</span>))</span><br><span class="line">trans_resize1 = transforms.Resize(<span class="number">200</span>)</span><br><span class="line"><span class="comment"># compose相当于组合，前一个函数的输出与后一个函数的输入必须相同</span></span><br><span class="line"><span class="comment"># 等价于  temp = trans_resize1(img)</span></span><br><span class="line"><span class="comment">#        img_resize = tensor(temp)</span></span><br><span class="line">trans_compose = transforms.Compose([trans_resize1,tensor])</span><br><span class="line">img_resize = trans_compose(img)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -python -教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dnn推理</title>
      <link href="/2023/04/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv_dnn_%E6%8E%A8%E7%90%86%E5%8A%A0%E9%80%9F/"/>
      <url>/2023/04/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/opencv_dnn_%E6%8E%A8%E7%90%86%E5%8A%A0%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<p>使用OpenCV dnn模块推理，并使用cuda加速。</p><span id="more"></span><h2 id="1-模型转换"><a href="#1-模型转换" class="headerlink" title="1.模型转换"></a>1.模型转换</h2><p>通过YOLOv5提供的模型转换代码export.py。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install onnx</span><br><span class="line">pip install onnxruntime</span><br><span class="line"></span><br><span class="line">注意修改--weights 和 --include参数</span><br></pre></td></tr></table></figure><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h2><p>在实例化DNN::Net net后，通过下面代码启用duda加速。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net.<span class="built_in">setPreferableBackend</span>(DNN_BACKEND_CUDA);</span><br><span class="line">net.<span class="built_in">setPreferableTarget</span>(DNN_TARGET_CUDA);</span><br></pre></td></tr></table></figure><p>对于报错Could not load library cudnn_cnn_infer64_8.dll. Error code 126。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">进入https://docs.nvidia.com/deeplearning/cudnn/install-guide/index.html#install-zlib-windows</span><br><span class="line">下载Zlib文件</span><br><span class="line">将dll_x64文件夹下的zlibwapi.dll文件剪切到c:/window/system32下</span><br></pre></td></tr></table></figure><p>下面代码是通过opencv dnn推理onnx模型。(通过yolo的detect50ms左右，在opencv dnn cuda加速下只有80ms左右，不知道为什么！！！)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;Winmm.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;opencv2/dnn.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/core/utils/logger.hpp&gt;</span><span class="comment">//包含头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;timeapi.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> dnn;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Net_config</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> confThreshold; <span class="comment">// Confidence threshold</span></span><br><span class="line"><span class="type">float</span> nmsThreshold;  <span class="comment">// Non-maximum suppression threshold</span></span><br><span class="line"><span class="type">float</span> objThreshold;  <span class="comment">//Object Confidence threshold</span></span><br><span class="line">string modelpath;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">endsWith</span><span class="params">(string s, string sub)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s.<span class="built_in">rfind</span>(sub) == (s.<span class="built_in">length</span>() - sub.<span class="built_in">length</span>()) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> anchors_640[<span class="number">3</span>][<span class="number">6</span>] = &#123; &#123;<span class="number">10.0</span>,  <span class="number">13.0</span>, <span class="number">16.0</span>,  <span class="number">30.0</span>,  <span class="number">33.0</span>,  <span class="number">23.0</span>&#125;,</span><br><span class="line"> &#123;<span class="number">30.0</span>,  <span class="number">61.0</span>, <span class="number">62.0</span>,  <span class="number">45.0</span>,  <span class="number">59.0</span>,  <span class="number">119.0</span>&#125;,</span><br><span class="line"> &#123;<span class="number">116.0</span>, <span class="number">90.0</span>, <span class="number">156.0</span>, <span class="number">198.0</span>, <span class="number">373.0</span>, <span class="number">326.0</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> anchors_1280[<span class="number">4</span>][<span class="number">6</span>] = &#123; &#123;<span class="number">19</span>, <span class="number">27</span>, <span class="number">44</span>, <span class="number">40</span>, <span class="number">38</span>, <span class="number">94</span>&#125;,&#123;<span class="number">96</span>, <span class="number">68</span>, <span class="number">86</span>, <span class="number">152</span>, <span class="number">180</span>, <span class="number">137</span>&#125;,&#123;<span class="number">140</span>, <span class="number">301</span>, <span class="number">303</span>, <span class="number">264</span>, <span class="number">238</span>, <span class="number">542</span>&#125;,</span><br><span class="line">   &#123;<span class="number">436</span>, <span class="number">615</span>, <span class="number">739</span>, <span class="number">380</span>, <span class="number">925</span>, <span class="number">792</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YOLO</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">YOLO</span>(Net_config config);</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">detect</span><span class="params">(Mat&amp; frame)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">float</span>* anchors;</span><br><span class="line"><span class="type">int</span> num_stride;</span><br><span class="line"><span class="type">int</span> inpWidth;</span><br><span class="line"><span class="type">int</span> inpHeight;</span><br><span class="line">vector&lt;string&gt; class_names;</span><br><span class="line"><span class="type">int</span> num_class;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> confThreshold;</span><br><span class="line"><span class="type">float</span> nmsThreshold;</span><br><span class="line"><span class="type">float</span> objThreshold;</span><br><span class="line"><span class="type">const</span> <span class="type">bool</span> keep_ratio = <span class="literal">true</span>;</span><br><span class="line">Net net;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawPred</span><span class="params">(<span class="type">float</span> conf, <span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom, Mat&amp; frame, <span class="type">int</span> classid)</span></span>;</span><br><span class="line"><span class="function">Mat <span class="title">resize_image</span><span class="params">(Mat srcimg, <span class="type">int</span>* newh, <span class="type">int</span>* neww, <span class="type">int</span>* top, <span class="type">int</span>* left)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">YOLO::<span class="built_in">YOLO</span>(Net_config config)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;confThreshold = config.confThreshold;</span><br><span class="line"><span class="keyword">this</span>-&gt;nmsThreshold = config.nmsThreshold;</span><br><span class="line"><span class="keyword">this</span>-&gt;objThreshold = config.objThreshold;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;net = <span class="built_in">readNet</span>(config.modelpath);</span><br><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;class.names&quot;</span>)</span></span>;</span><br><span class="line">string line;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(ifs, line)) <span class="keyword">this</span>-&gt;class_names.<span class="built_in">push_back</span>(line);</span><br><span class="line"><span class="keyword">this</span>-&gt;num_class = class_names.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">endsWith</span>(config.modelpath, <span class="string">&quot;6.onnx&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">anchors = (<span class="type">float</span>*)anchors_1280;</span><br><span class="line"><span class="keyword">this</span>-&gt;num_stride = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;inpHeight = <span class="number">1280</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;inpWidth = <span class="number">1280</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">anchors = (<span class="type">float</span>*)anchors_640;</span><br><span class="line"><span class="keyword">this</span>-&gt;num_stride = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;inpHeight = <span class="number">640</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;inpWidth = <span class="number">640</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Mat <span class="title">YOLO::resize_image</span><span class="params">(Mat srcimg, <span class="type">int</span>* newh, <span class="type">int</span>* neww, <span class="type">int</span>* top, <span class="type">int</span>* left)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> srch = srcimg.rows, srcw = srcimg.cols;</span><br><span class="line">*newh = <span class="keyword">this</span>-&gt;inpHeight;</span><br><span class="line">*neww = <span class="keyword">this</span>-&gt;inpWidth;</span><br><span class="line">Mat dstimg;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;keep_ratio &amp;&amp; srch != srcw) &#123;</span><br><span class="line"><span class="type">float</span> hw_scale = (<span class="type">float</span>)srch / srcw;</span><br><span class="line"><span class="keyword">if</span> (hw_scale &gt; <span class="number">1</span>) &#123;</span><br><span class="line">*newh = <span class="keyword">this</span>-&gt;inpHeight;</span><br><span class="line">*neww = <span class="built_in">int</span>(<span class="keyword">this</span>-&gt;inpWidth / hw_scale);</span><br><span class="line"><span class="built_in">resize</span>(srcimg, dstimg, <span class="built_in">Size</span>(*neww, *newh), INTER_AREA);</span><br><span class="line">*left = <span class="built_in">int</span>((<span class="keyword">this</span>-&gt;inpWidth - *neww) * <span class="number">0.5</span>);</span><br><span class="line"><span class="built_in">copyMakeBorder</span>(dstimg, dstimg, <span class="number">0</span>, <span class="number">0</span>, *left, <span class="keyword">this</span>-&gt;inpWidth - *neww - *left, BORDER_CONSTANT, <span class="number">114</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">*newh = (<span class="type">int</span>)<span class="keyword">this</span>-&gt;inpHeight * hw_scale;</span><br><span class="line">*neww = <span class="keyword">this</span>-&gt;inpWidth;</span><br><span class="line"><span class="built_in">resize</span>(srcimg, dstimg, <span class="built_in">Size</span>(*neww, *newh), INTER_AREA);</span><br><span class="line">*top = (<span class="type">int</span>)(<span class="keyword">this</span>-&gt;inpHeight - *newh) * <span class="number">0.5</span>;</span><br><span class="line"><span class="built_in">copyMakeBorder</span>(dstimg, dstimg, *top, <span class="keyword">this</span>-&gt;inpHeight - *newh - *top, <span class="number">0</span>, <span class="number">0</span>, BORDER_CONSTANT, <span class="number">114</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">resize</span>(srcimg, dstimg, <span class="built_in">Size</span>(*neww, *newh), INTER_AREA);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dstimg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">YOLO::drawPred</span><span class="params">(<span class="type">float</span> conf, <span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom, Mat&amp; frame, <span class="type">int</span> classid)</span>   <span class="comment">// Draw the predicted bounding box</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Draw a rectangle displaying the bounding box</span></span><br><span class="line"><span class="built_in">rectangle</span>(frame, <span class="built_in">Point</span>(left, top), <span class="built_in">Point</span>(right, bottom), <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Get the label for the class name and its confidence</span></span><br><span class="line">string label = format(<span class="string">&quot;%.2f&quot;</span>, conf);</span><br><span class="line">label = <span class="keyword">this</span>-&gt;class_names[classid] + <span class="string">&quot;:&quot;</span> + label;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Display the label at the top of the bounding box</span></span><br><span class="line"><span class="type">int</span> baseLine;</span><br><span class="line">Size labelSize = <span class="built_in">getTextSize</span>(label, FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span>, <span class="number">1</span>, &amp;baseLine);</span><br><span class="line">top = <span class="built_in">max</span>(top, labelSize.height);</span><br><span class="line"><span class="comment">//rectangle(frame, Point(left, top - int(1.5 * labelSize.height)), Point(left + int(1.5 * labelSize.width), top + baseLine), Scalar(0, 255, 0), FILLED);</span></span><br><span class="line"><span class="built_in">putText</span>(frame, label, <span class="built_in">Point</span>(left<span class="number">-3</span>, top<span class="number">-3</span>), FONT_HERSHEY_SIMPLEX, <span class="number">0.75</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">YOLO::detect</span><span class="params">(Mat&amp; frame)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">net.<span class="built_in">setPreferableBackend</span>(DNN_BACKEND_CUDA);</span><br><span class="line">net.<span class="built_in">setPreferableTarget</span>(DNN_TARGET_CUDA);</span><br><span class="line"><span class="type">int</span> newh = <span class="number">0</span>, neww = <span class="number">0</span>, padh = <span class="number">0</span>, padw = <span class="number">0</span>;</span><br><span class="line">Mat dstimg = <span class="keyword">this</span>-&gt;<span class="built_in">resize_image</span>(frame, &amp;newh, &amp;neww, &amp;padh, &amp;padw);</span><br><span class="line">Mat blob = <span class="built_in">blobFromImage</span>(dstimg, <span class="number">1</span> / <span class="number">255.0</span>, <span class="built_in">Size</span>(<span class="keyword">this</span>-&gt;inpWidth, <span class="keyword">this</span>-&gt;inpHeight), <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">this</span>-&gt;net.<span class="built_in">setInput</span>(blob);</span><br><span class="line">vector&lt;Mat&gt; outs;</span><br><span class="line"><span class="keyword">this</span>-&gt;net.forward(outs, <span class="keyword">this</span>-&gt;net.<span class="built_in">getUnconnectedOutLayersNames</span>());</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num_proposal = outs[<span class="number">0</span>].size[<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> nout = outs[<span class="number">0</span>].size[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">if</span> (outs[<span class="number">0</span>].dims &gt; <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">outs[<span class="number">0</span>] = outs[<span class="number">0</span>].<span class="built_in">reshape</span>(<span class="number">0</span>, num_proposal);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/////generate proposals</span></span><br><span class="line">vector&lt;<span class="type">float</span>&gt; confidences;</span><br><span class="line">vector&lt;Rect&gt; boxes;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; classIds;</span><br><span class="line"><span class="type">float</span> ratioh = (<span class="type">float</span>)frame.rows / newh, ratiow = (<span class="type">float</span>)frame.cols / neww;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>, q = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>, row_ind = <span class="number">0</span>; <span class="comment">///xmin,ymin,xamx,ymax,box_score,class_score</span></span><br><span class="line"><span class="type">float</span>* pdata = (<span class="type">float</span>*)outs[<span class="number">0</span>].data;</span><br><span class="line"><span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; <span class="keyword">this</span>-&gt;num_stride; n++)   <span class="comment">///特征图尺度</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">float</span> stride = <span class="built_in">pow</span>(<span class="number">2</span>, n + <span class="number">3</span>);</span><br><span class="line"><span class="type">int</span> num_grid_x = (<span class="type">int</span>)<span class="built_in">ceil</span>((<span class="keyword">this</span>-&gt;inpWidth / stride));</span><br><span class="line"><span class="type">int</span> num_grid_y = (<span class="type">int</span>)<span class="built_in">ceil</span>((<span class="keyword">this</span>-&gt;inpHeight / stride));</span><br><span class="line"><span class="keyword">for</span> (q = <span class="number">0</span>; q &lt; <span class="number">3</span>; q++)    <span class="comment">///anchor</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">float</span> anchor_w = <span class="keyword">this</span>-&gt;anchors[n * <span class="number">6</span> + q * <span class="number">2</span>];</span><br><span class="line"><span class="type">const</span> <span class="type">float</span> anchor_h = <span class="keyword">this</span>-&gt;anchors[n * <span class="number">6</span> + q * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_grid_y; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; num_grid_x; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> box_score = pdata[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">if</span> (box_score &gt; <span class="keyword">this</span>-&gt;objThreshold)</span><br><span class="line">&#123;</span><br><span class="line">Mat scores = outs[<span class="number">0</span>].<span class="built_in">row</span>(row_ind).<span class="built_in">colRange</span>(<span class="number">5</span>, nout);</span><br><span class="line">Point classIdPoint;</span><br><span class="line"><span class="type">double</span> max_class_socre;</span><br><span class="line"><span class="comment">// Get the value and location of the maximum score</span></span><br><span class="line"><span class="built_in">minMaxLoc</span>(scores, <span class="number">0</span>, &amp;max_class_socre, <span class="number">0</span>, &amp;classIdPoint);</span><br><span class="line">max_class_socre *= box_score;</span><br><span class="line"><span class="keyword">if</span> (max_class_socre &gt; <span class="keyword">this</span>-&gt;confThreshold)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> class_idx = classIdPoint.x;</span><br><span class="line"><span class="comment">//float cx = (pdata[0] * 2.f - 0.5f + j) * stride;  ///cx</span></span><br><span class="line"><span class="comment">//float cy = (pdata[1] * 2.f - 0.5f + i) * stride;   ///cy</span></span><br><span class="line"><span class="comment">//float w = powf(pdata[2] * 2.f, 2.f) * anchor_w;   ///w</span></span><br><span class="line"><span class="comment">//float h = powf(pdata[3] * 2.f, 2.f) * anchor_h;  ///h</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> cx = pdata[<span class="number">0</span>];</span><br><span class="line"><span class="type">float</span> cy = pdata[<span class="number">1</span>];</span><br><span class="line"><span class="type">float</span> w = pdata[<span class="number">2</span>];</span><br><span class="line"><span class="type">float</span> h = pdata[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> left = <span class="built_in">int</span>((cx - padw - <span class="number">0.5</span> * w) * ratiow);</span><br><span class="line"><span class="type">int</span> top = <span class="built_in">int</span>((cy - padh - <span class="number">0.5</span> * h) * ratioh);</span><br><span class="line"></span><br><span class="line">confidences.<span class="built_in">push_back</span>((<span class="type">float</span>)max_class_socre);</span><br><span class="line">boxes.<span class="built_in">push_back</span>(<span class="built_in">Rect</span>(left, top, (<span class="type">int</span>)(w * ratiow), (<span class="type">int</span>)(h * ratioh)));</span><br><span class="line">classIds.<span class="built_in">push_back</span>(class_idx);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">row_ind++;</span><br><span class="line">pdata += nout;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Perform non maximum suppression to eliminate redundant overlapping boxes with</span></span><br><span class="line"><span class="comment">// lower confidences</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; indices;</span><br><span class="line">dnn::<span class="built_in">NMSBoxes</span>(boxes, confidences, <span class="keyword">this</span>-&gt;confThreshold, <span class="keyword">this</span>-&gt;nmsThreshold, indices);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; indices.<span class="built_in">size</span>(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> idx = indices[i];</span><br><span class="line">Rect box = boxes[idx];</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">drawPred</span>(confidences[idx], box.x, box.y,</span><br><span class="line">box.x + box.width, box.y + box.height, frame, classIds[idx]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">DWORD t1, t2;</span><br><span class="line">cv::utils::logging::<span class="built_in">setLogLevel</span>(utils::logging::LOG_LEVEL_SILENT);<span class="comment">//关闭日志</span></span><br><span class="line"></span><br><span class="line">Net_config yolo_nets = &#123; <span class="number">0.75</span>, <span class="number">0.45</span>, <span class="number">0.3</span>, <span class="string">&quot;weights/best.onnx&quot;</span> &#125;;</span><br><span class="line"><span class="function">YOLO <span class="title">yolo_model</span><span class="params">(yolo_nets)</span></span>;</span><br><span class="line"></span><br><span class="line">string path_image = <span class="string">&quot;D:\\A_project\\PythonApplication1\\PythonApplication1\\out\\*.*&quot;</span>;</span><br><span class="line">vector&lt;cv::String&gt;file_names;</span><br><span class="line">cv::<span class="built_in">glob</span>(path_image, file_names);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; file_names.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">string file_name = <span class="string">&quot;./out/&quot;</span>;</span><br><span class="line">Mat srcimg = <span class="built_in">imread</span>(file_names[i]);</span><br><span class="line">t1 = <span class="built_in">timeGetTime</span>();</span><br><span class="line">yolo_model.<span class="built_in">detect</span>(srcimg);</span><br><span class="line">t2 = <span class="built_in">timeGetTime</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;img%d:%f\n&quot;</span>,i+<span class="number">1</span>, (t2 - t1) * <span class="number">1.0</span> / <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">9</span>)  file_name += <span class="string">&#x27;0&#x27;</span> + <span class="built_in">to_string</span>(i+<span class="number">1</span>) + <span class="string">&quot;.bmp&quot;</span>;</span><br><span class="line"><span class="keyword">else</span>  file_name +=  <span class="built_in">to_string</span>(i) + <span class="string">&quot;.bmp&quot;</span>;</span><br><span class="line"><span class="built_in">imwrite</span>(file_name, srcimg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//string imgpath = &quot;images/53.bmp&quot;;</span></span><br><span class="line"><span class="comment">//Mat srcimg = imread(imgpath);</span></span><br><span class="line"><span class="comment">//t1 = timeGetTime();</span></span><br><span class="line"><span class="comment">//yolo_model.detect(srcimg);</span></span><br><span class="line"><span class="comment">//t2 = timeGetTime();</span></span><br><span class="line"><span class="comment">//printf(&quot;Use Time:%f\n&quot;, (t2 - t1) * 1.0 / 1000);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//static const string kWinName = &quot;Deep learning object detection in OpenCV&quot;;</span></span><br><span class="line"><span class="comment">//namedWindow(kWinName, WINDOW_NORMAL);</span></span><br><span class="line"><span class="comment">//imshow(kWinName, srcimg);</span></span><br><span class="line"><span class="comment">//waitKey(0);</span></span><br><span class="line"><span class="comment">//destroyAllWindows();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -DeepLearn -OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识OpenCV.md</title>
      <link href="/2023/04/24/opencv/%E5%88%9D%E8%AF%86OpenCV/"/>
      <url>/2023/04/24/opencv/%E5%88%9D%E8%AF%86OpenCV/</url>
      
        <content type="html"><![CDATA[<p>OpenCV是一个计算机视觉开源库，提供了处理图像和视频的能力。</p><span id="more"></span><p>OpenCV的影响力非常大，有超过47 000的社区用户，以及超过1400万次的下载量。其应用领域横跨图像处理、交互式艺术、视频监督、地图拼接和高级机器人等。作为一个有十几年历史的开源项目，OpenCV拥有广大的用户群体和开发者群体。</p><p>在数字的世界中，一幅图像由多个<strong>点</strong>（像素）组成。图像处理就是对其中一个像素或者一个区域内的像素（块）进行处理。无论是初学者还是富有经验的研发人员，他们都需要借助软件工具来分析这些像素和图像块，<strong>OpenCV则是其中最常用、最重要的一个软件工具。</strong></p><p>OpenCV成为最主要的图像处理工具包，是因为它功能齐全，支持目前主流的图像、视频处理算法，而且对外提供C++、Python和Java的接口，用户调用方便。本书的代码分析、示例程序及环境搭建基于OpenCV 4.1版本，源代码位于GitHub的OpenCV仓库。</p><h2 id="01-OpenCV库"><a href="#01-OpenCV库" class="headerlink" title="01 OpenCV库"></a><strong>01 OpenCV库</strong></h2><p>OpenCV由各种不同组件组成。OpenCV源代码主要由OpenCV core（核心库）、opencv_contrib和opencv_extra等子仓库组成。近些年，OpenCV的主仓库增加了深度学习相关的子仓库：OpenVINO（即DLDT, Deep Learning Deployment Toolkit）、open_model_zoo，以及标注工具CVAT等。</p><p>下面分别介绍<strong>3个主要的代码库</strong>：OpenCV core、opencv_contrib、opencv_extra。</p><h3 id="1-核心库OpenCV-core"><a href="#1-核心库OpenCV-core" class="headerlink" title="1. 核心库OpenCV core"></a><strong>1. 核心库OpenCV core</strong></h3><p>核心库是OpenCV的主要算法来源。OpenCV采用模块化结构设计，包含了多个共享或者静态库。目前OpenCV核心库提供了很多组件，如下所示。</p><ul><li><strong>核心功能模块：</strong>这是一个小巧而高效的模块，定义了基础的数据结构，包含紧密多尺度向量矩阵和一些供其他模块使用的基础函数</li><li><strong>图像处理模块：</strong>它包括了线性和非线性的图像滤波、几何图像变换（图像缩放、仿射变换、透视矫正、通用的基于表格的像素映射）、色域变换及直方图生成与分析等</li><li><strong>视频：</strong>这是一个视频分析模块，包含运动检测、背景减除和对象追踪等算法</li><li><strong>calib3d：</strong>包含基础的多视角几何算法、单个和立体相机标定算法、对象姿势预测算法、立体一致性算法，以及3D元素重建</li><li><strong>Features2d：</strong>图像显著特征检测、特征点描述和匹配</li><li><strong>Objdetect：</strong>对象检测和预先定义的类别检测（如脸、眼、杯子、人、车等）</li><li><strong>Highgui：</strong>提供了比较容易使用的UI接口</li><li><strong>Video I&#x2F;O：</strong>提供了基本的视频存取访问和编解码功能</li><li><strong>GPU：</strong>为不同的OpenCV算法模块提供GPU加速算法</li><li><strong>其他：</strong>如FLANN和Google测试封装层、Python绑定等</li></ul><h3 id="2-opencv-contrib"><a href="#2-opencv-contrib" class="headerlink" title="2. opencv_contrib"></a><strong>2. opencv_contrib</strong></h3><p><strong>opencv_contrib代码库主要用于管理新功能模块的开发。</strong>该库的设计主要基于以下考虑：处于初始开发阶段的功能模块，它的API定义会经常变化，各种测试也不够全面。</p><p>为了不影响OpenCV核心模块的稳定性，这些新功能模块会发布到opencv_contrib中。等到模块足够成熟并且在社区得到了足够的关注和使用之后，这个模块便会被移到OpenCV核心库，这意味着核心库开发团队将会对该模块进行全面的测试，保证这个模块具有产品级的质量。</p><p>例如，对于DNN这个模块，OpenCV 3.1开始出现在opencv_contrib中，到了3.3版本才移到了OpenCV核心库。</p><p>opencv_contrib需要和OpenCV核心库一同编译。下载好opencv_contrib的源代码并在CMake执行时传入参数：-DOPENCV_EXTRA_MODULES_PATH&#x3D;&lt;opencv_contrib源码路径&gt;&#x2F;modules。</p><p>如果编译时遇到问题，则可以在OpenCV核心库和opencv_contrib库的问题汇报页面,查看一下是否有现成的解决方案，如果没有，则读者可新建一个问题。OpenCV是一个活跃的社区，只要问题描述清晰、完整，一般会很快得到反馈。</p><h3 id="3-opencv-extra"><a href="#3-opencv-extra" class="headerlink" title="3. opencv_extra"></a><strong>3. opencv_extra</strong></h3><p><strong>opencv_extra仓库存放了运行测试和示例程序时需要使用的一些测试数据和脚本。</strong>例如，运行DNN模块测试程序或者示例程序时需要用到预训练模型，这些模型可以通过opencv_extra中的脚本来自动下载。近些年添加的opencv&#x2F;open_model_zoo仓库也增加了很多预训练好的深度学习模型，这些模型大多做过性能和速度上的调优。</p><h2 id="02-OpenCV深度学习应用的典型流程"><a href="#02-OpenCV深度学习应用的典型流程" class="headerlink" title="02 OpenCV深度学习应用的典型流程"></a><strong>02 OpenCV深度学习应用的典型流程</strong></h2><p>OpenCV是一个自包含库，可以不依赖于任何第三方库而运行，这个特性给开发调试带来了很大的便利。另外，OpenCV还提供了硬件加速功能，使得算法能够在各种平台高效地执行。</p><p>下面以一个识别性别和年龄的深度学习应用为例，展现OpenCV深度学习应用的典型流程。该应用使用C++语言，总共只需要百来行代码便可实现人脸检测、性别和年龄的识别功能，还可以方便地使用硬件的加速能力，提高程序的运行效率。此处展示核心流程，故以伪代码为例，完整的源代码由本书的参考代码库提供。</p><p><strong>该应用的核心流程如下：</strong>首先读取两个网络模型参数（分别是性别和年龄），然后检测人脸，转换输入图像，最后运行网络前向预测。伪代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入OpenCV DNN模块的命名空间</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv：：dnn;</span><br><span class="line"><span class="comment">// 创建人脸检测器</span></span><br><span class="line">CascadeClassifier cascade；</span><br><span class="line"><span class="comment">// 导入性别和年龄深度神经网络模型</span></span><br><span class="line">Net gender_net=dnn：：readNetFromCaffe（gender_modelTxt， gender_modelBin）；</span><br><span class="line">Net age_net=dnn：：readNetFromCaffe（age_modelTxt， age_modelBin）；</span><br><span class="line"><span class="comment">// 人脸检测</span></span><br><span class="line">cascade.load（cascadeName）；</span><br><span class="line">cascade.detectMultiScale（input_gray_file， output_faces_data）；</span><br><span class="line"><span class="comment">// 准备深度神经网络的输入数据</span></span><br><span class="line">Mat inputBlob=blobFromImage（input.getMat（ACCESS_READ））；</span><br><span class="line">gender_net.setInput（inputBlob, <span class="string">&quot;data&quot;</span>）；</span><br><span class="line">age_net.setInput（inputBlob, <span class="string">&quot;data&quot;</span>）；</span><br><span class="line"><span class="comment">// 执行模型的前向运算，即模型推理</span></span><br><span class="line">Mat gender_prob=gender_net.forward（<span class="string">&quot;prob&quot;</span>）；</span><br><span class="line">Mat age_prob=age_net.forward（<span class="string">&quot;prob&quot;</span>）；</span><br></pre></td></tr></table></figure><p>应用识别效果如图1-1所示。</p><p>▲图1-1 应用识别效果图</p><p> <img src="/y-jt/y-jt.github.io/2023/04/24/opencv/%E5%88%9D%E8%AF%86OpenCV/640.png" alt="图片"> </p><p>以上伪代码很好地展示了OpenCV深度学习应用的典型流程，如图1-2所示。</p><p> <img src="/y-jt/y-jt.github.io/2023/04/24/opencv/%E5%88%9D%E8%AF%86OpenCV/640-1682322916257.png" alt="图片"> </p><p>▲图1-2 OpenCV深度学习应用的典型流程</p><h2 id="03-OpenCV深度学习模块"><a href="#03-OpenCV深度学习模块" class="headerlink" title="03 OpenCV深度学习模块"></a><strong>03 OpenCV深度学习模块</strong></h2><p>深度学习模块是OpenCV为支持基于深度学习的计算机视觉应用所加入的新特性。OpenCV DNN模块于OpenCV 3.1版本开始出现在opencv_contrib库中，从3.3版本开始被纳入OpenCV核心库。</p><p>本节主要讲解OpenCV深度学习模块的实现原理和主要特性，通过这些内容，读者可以对OpenCV DNN有一个总体了解，并对OpenCV深度学习模块的应用代码有一个初步的印象。</p><p>作为计算机视觉领域的“标准库”，OpenCV为用户提供深度学习的支持是题中应有之义。OpenCV选择重新实现一个深度学习框架而不是直接调用现有的各种框架（如TensorFlow、Caffe等），有如下几点原因。</p><ul><li><strong>轻量：</strong>OpenCV的深度学习模块只实现了模型推理功能，这使得相关代码非常精简，加速了安装和编译过程。</li><li><strong>最少的外部依赖：</strong>重新实现一遍深度学习框架使得对外部依赖减到最小，大大方便了深度学习应用的部署。</li><li><strong>方便集成：</strong>①如果原来的应用是基于OpenCV开发的，通过深度学习模块可以非常方便地加入对神经网络推理的支持；②如果网络模型来自多个框架，如一个来自TensorFlow，一个来自Caffe，则深度学习模块可以方便整合网络运算结果。</li><li><strong>通用性：</strong>①提供统一的接口来操作网络模型；②内部所做的优化和加速对所有网络模型格式都适用；③支持多种设备和操作系统。</li></ul><h3 id="1-主要特性"><a href="#1-主要特性" class="headerlink" title="1. 主要特性"></a><strong>1. 主要特性</strong></h3><p><strong>OpenCV深度学习模块只提供网络推理功能，不支持网络训练。</strong>像所有的推理框架一样，加载和运行网络模型是基本的功能。深度学习模块支持TensorFlow、Caffe、Torch、DarkNet、ONNX和OpenVINO格式的网络模型，用户无须考虑原格式的差异。在加载过程中，各种格式的模型被转换成统一的内部网络结构。</p><p>深度学习模块支持所有的基本网络层类型和子结构，包括AbsVal、AveragePooling、BatchNormalization、Concatenation、Convolution (with DILATION)、Crop、DetectionOutput、Dropout、Eltwise、Flatten、FullConvolution、FullyConnected、LRN、LSTM、MaxPooling、MaxUnpooling、MVN、NormalizeBBox、Padding、Permute、Power、PReLU、PriorBox、Relu、RNN、Scale、Shift、Sigmoid、Slice、Softmax、Split和Tanh。</p><p>如果需要的层类型不在这个支持列表之内，则可以通过脚注中的申请链接来请求新的层类型的支持，OpenCV的开发者们有可能会在将来加入对该层类型的支持。<strong>读者也可以自己动手实现新的层类型，并把代码反馈回社区，参与到深度学习模块的开发中来。</strong></p><p>除了实现基本的层类型，支持常见的网络架构也很重要，经过严格测试，深度学习模块支持的网络架构如下所示。</p><h4 id="图像分类网络"><a href="#图像分类网络" class="headerlink" title="图像分类网络"></a><strong>图像分类网络</strong></h4><ul><li>Caffe：AlexNet、GoogLeNet、VGG、ResNet、SqueezeNet、DenseNet、ShuffleNet</li><li>TensorFlow：Inception、MobileNet</li><li>Darknet：darknet-imagenet</li><li>ONNX：AlexNet、GoogleNet、CaffeNet、RCNN_ILSVRC13、ZFNet512、VGG16、VGG16_bn、ResNet-18v1、ResNet-50v1、CNN Mnist、MobileNetv2、LResNet100E-IR、Emotion FERPlus、Squeezenet、DenseNet121、Inception-v1&#x2F;v2、ShuffleNet</li></ul><h4 id="对象检测网络"><a href="#对象检测网络" class="headerlink" title="对象检测网络"></a><strong>对象检测网络</strong></h4><ul><li><p>Caffe：SSD、VGG、MobileNet-SSD、Faster-RCNN、R-FCN、OpenCV face detector</p></li><li><p>TensorFlow：SSD、Faster-RCNN、Mask-RCNN、EAST</p></li><li><p>Darknet：YOLOv2、Tiny YOLO、YOLOv3</p></li><li><p>ONNX：TinyYOLOv2</p></li><li><p><strong>语义分割网络：</strong>FCN（Caffe）、ENet（Torch）、ResNet101_DUC_HDC（ONNX）</p></li><li><p><strong>姿势估计网络：</strong>openpose（Caffe）</p></li><li><p><strong>图像处理网络：</strong>Colorization（Caffe）、Fast-Neural-Style（Torch）</p></li><li><p><strong>人脸识别网络：</strong>openface（Torch）</p></li></ul><h3 id="2-OpenCV-DNN图像分类举例（Python）"><a href="#2-OpenCV-DNN图像分类举例（Python）" class="headerlink" title="2. OpenCV DNN图像分类举例（Python）"></a><strong>2. OpenCV DNN图像分类举例（Python）</strong></h3><p>C++和Python是OpenCV应用开发的主要语言，1.1.2节介绍了一个基于C++语言的深度学习应用，本节继续介绍一个基于Python的图像分类示例。</p><p>首先引入必要的Python库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># 引入numpy库</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv <span class="comment"># 引入OpenCV库，深度学习模块包含在其中</span></span><br></pre></td></tr></table></figure><p>读入类别文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(&#x27;synset_words.txt&#x27;) as f:</span><br><span class="line">  classes=[x[x.find(&#x27; &#x27;) + 1:] for x in f]</span><br></pre></td></tr></table></figure><p>读入待分类的图片：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image=cv.imread(&#x27;space_shuttle.jpg&#x27;)</span><br></pre></td></tr></table></figure><p>调用深度学习模块的blobFromImage方法将图片对象转换成网络模型的输入张量（tensor）。该张量的大小是224×224，参数中的(104,117,123)表示需要从输入张量减掉的均值，它是从训练网络模型时用到的数据集计算出来的，这里直接使用即可。第二个参数“1”表示将OpenCV的默认通道顺序BGR转换成网络模型要求的RGB通道顺序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input=cv.dnn.blobFromImage(image, 1, (224, 224), (104, 117, 123))</span><br></pre></td></tr></table></figure><p>下面来加载Caffe网络模型。注意，相关的模型参数和配置文件可在这里下载：</p><p><a href="http://dl.caffe.berkeleyvision.org/bvlc_googlenet.caffemodel">http://dl.caffe.berkeleyvision.org/bvlc_googlenet.caffemodel</a></p><p><a href="https://github.com/opencv/opencv_extra/blob/4.1.0/testdata/dnn/bvlc_googlenet.prototxt">https://github.com/opencv/opencv_extra/blob/4.1.0/testdata/dnn/bvlc_googlenet.prototxt</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net=cv.dnn.readNetFromCaffe(&#x27;bvlc_googlenet.prototxt&#x27;,</span><br><span class="line">              &#x27;bvlc_googlenet.caffemodel&#x27;)</span><br></pre></td></tr></table></figure><p>设置网络模型输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.setInput(input)</span><br></pre></td></tr></table></figure><p>执行网络推理并得到输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out=net.forward()</span><br></pre></td></tr></table></figure><p>从网络输出中获取最大的5个可能种类的索引值并输出类别名称和概率值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">indexes=np.argsort(out[0])[-5:]</span><br><span class="line">for i in reversed(indexes):</span><br><span class="line">　print (&#x27;class:&#x27;, classes[i], &#x27; probability:&#x27;, out[0][i])</span><br></pre></td></tr></table></figure><p>通过这个例子，我们可以看到一个基于深度学习模型的分类应用并不复杂，<strong>主要分3部分：模型导入、网络执行和结果解析。</strong> </p>]]></content>
      
      
      <categories>
          
          <category> -OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>torch_leran</title>
      <link href="/2023/04/05/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/torch%E6%95%99%E7%A8%8B/"/>
      <url>/2023/04/05/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/torch%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>跟随B站土堆up主的 <a href="https://www.bilibili.com/video/BV1hE411t7RN?p=6&vd_source=aa67ec1c08f743d3564f0d6bd14952f0">torch教程</a> ，学习torch的使用。</p><span id="more"></span><h2 id="touch下载"><a href="#touch下载" class="headerlink" title="touch下载"></a>touch下载</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install torch==1.9.0+cu111 torchvision==0.10.0+cu111 torchaudio===0.9.0 -f https://download.pytorch.org/whl/torch_stable.html -i https://pypi.douban.com/simple</span><br><span class="line">注意显卡和cuda版本对应，cuda和cudnn版本对应，torch和cuda版本对应</span><br></pre></td></tr></table></figure><h2 id="dataset和dataloader类。"><a href="#dataset和dataloader类。" class="headerlink" title="dataset和dataloader类。"></a>dataset和dataloader类。</h2><p>dataset主要是获取数据及其对应的label，并统计总共有多少个数据。</p><p>dataloader为网络提供不同的数据形式，如bachsize等。</p><h3 id="torchversion-dataset"><a href="#torchversion-dataset" class="headerlink" title="torchversion.dataset"></a>torchversion.dataset</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pytorch官网-&gt;Docs-&gt;torchvison下</span></span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line">dataset_tensor = torchvision.transforms.ToTensor()</span><br><span class="line"></span><br><span class="line">train_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../dataset_cifar10&quot;</span>, train=<span class="literal">True</span>, transform=dataset_tensor, download=<span class="literal">True</span>)</span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../dataset_cifar10&quot;</span>, train=<span class="literal">False</span>, transform=dataset_tensor, download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># img,target = test_set[0]</span></span><br><span class="line"><span class="comment"># print(test_set.classes)</span></span><br><span class="line"><span class="comment"># print(img)</span></span><br><span class="line"><span class="comment"># print(target)</span></span><br><span class="line"><span class="comment"># print(test_set[0])</span></span><br><span class="line"><span class="comment"># img.show()</span></span><br><span class="line"></span><br><span class="line">write = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    img,target1 = test_set[i]</span><br><span class="line">    write.add_image(<span class="string">&quot;data&quot;</span>, img, i)</span><br><span class="line">write.close()</span><br></pre></td></tr></table></figure><h3 id="torch-utils-data-DataLoader"><a href="#torch-utils-data-DataLoader" class="headerlink" title="torch.utils.data.DataLoader"></a>torch.utils.data.DataLoader</h3><blockquote><blockquote><p>batch_size #一次传入网络数据量<br>shuffle #数据是否打乱<br>sampler<br>batch_sampler<br>num_workers #是否多进程加载数据<br>collate_fn<br>pin_memory<br>drop_last #对于不能整除的数据量，最后一次是否舍弃<br>timeout<br>worker_init_fn<br>generator<br>prefetch_factor<br>persistent_workers<br>pin_memory_device </p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../dataset_cifar10&quot;</span>, train=<span class="literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line">test_loader = DataLoader(dataset=test_data,batch_size=<span class="number">64</span>,shuffle=<span class="literal">False</span>,num_workers=<span class="number">0</span>,drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">write = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    step = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">        img,target = data</span><br><span class="line">        write.add_images(<span class="string">&quot;loader:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(epoch),img,step)</span><br><span class="line">        step = step+<span class="number">1</span></span><br><span class="line">write.close()</span><br><span class="line"><span class="comment"># tensorboard显示不连续问题，使用如下：</span></span><br><span class="line"><span class="comment"># tensorboard --logdir=./src/logs --port=6007 --samples_per_plugin=images=10000</span></span><br></pre></td></tr></table></figure><h3 id="dataset实践代码"><a href="#dataset实践代码" class="headerlink" title="dataset实践代码"></a>dataset实践代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment">#__init__初始化类变量，相当于构造函数，实例化时就把对应的参数传入</span></span><br><span class="line"><span class="comment">#self相当于类的this指针</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyData</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,root_dir,label_dir</span>):</span><br><span class="line">        self.root_dir=root_dir</span><br><span class="line">        self.label_dir=label_dir</span><br><span class="line">        <span class="comment">#os.path.join（）自动拼接路径，按照对应的系统</span></span><br><span class="line">        self.path=os.path.join(self.root_dir,self.label_dir)</span><br><span class="line">        <span class="comment">#os.listdir()将对应路径下的文件生成列表</span></span><br><span class="line">        self.img_path=os.listdir(self.path)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self,idx</span>):</span><br><span class="line">        img_name=self.img_path[idx]</span><br><span class="line">        img_item_path=os.path.join(self.root_dir,self.label_dir,img_name)</span><br><span class="line">        img=cv2.imread(img_item_path)</span><br><span class="line">        label=self.label_dir</span><br><span class="line">        <span class="keyword">return</span> img,label</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.img_path)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">root_dir=<span class="string">&quot;D:\\A_project\\1dataset\\train&quot;</span></span><br><span class="line">ants_label_dir=<span class="string">&quot;ants_image&quot;</span></span><br><span class="line">bees_label_dir=<span class="string">&quot;bees_image&quot;</span></span><br><span class="line">ants_dataset=MyData(root_dir,ants_label_dir)</span><br><span class="line">bees_dataset=MyData(root_dir,bees_label_dir)</span><br><span class="line">img,label=ants_dataset[<span class="number">0</span>]</span><br><span class="line">img1,label1=bees_dataset[<span class="number">0</span>]</span><br><span class="line">cv2.imshow(<span class="string">&quot;1&quot;</span>,img)</span><br><span class="line">cv2.imshow(<span class="string">&quot;2&quot;</span>,img1)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"><span class="comment">#可以直接通过  +  拼接数据集</span></span><br><span class="line">train_dataset=ants_dataset+bees_dataset</span><br><span class="line"><span class="built_in">len</span>(train_dataset)</span><br><span class="line">img,label=train_dataset[<span class="number">123</span>]</span><br><span class="line">img1,label1=train_dataset[<span class="number">124</span>]</span><br><span class="line">cv2.imshow(<span class="string">&quot;1&quot;</span>,img)</span><br><span class="line">cv2.imshow(<span class="string">&quot;2&quot;</span>,img1)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="根据data生成对应的label-txt文件"><a href="#根据data生成对应的label-txt文件" class="headerlink" title="根据data生成对应的label.txt文件"></a>根据data生成对应的label.txt文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建于数据集对应的label  txt文件</span></span><br><span class="line">root_dir=<span class="string">&quot;D:\\A_project\\1dataset\\train&quot;</span></span><br><span class="line">ants_label_dir=<span class="string">&quot;bees_image&quot;</span></span><br><span class="line">img_path=os.listdir(os.path.join(root_dir,ants_label_dir))</span><br><span class="line">label=ants_label_dir.split(<span class="string">&#x27;_&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">out_dir=<span class="string">&quot;bees_label&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> img_path:</span><br><span class="line">    file_name=i.split(<span class="string">&#x27;.jpg&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(root_dir,out_dir,<span class="string">&quot;&#123;&#125;.txt&quot;</span>.<span class="built_in">format</span>(file_name)),<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(label)</span><br></pre></td></tr></table></figure><h2 id="TensorBoard的使用"><a href="#TensorBoard的使用" class="headerlink" title="TensorBoard的使用"></a>TensorBoard的使用</h2><p>TensorBoard用于可视化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 保存位置</span></span><br><span class="line"><span class="comment">#展示一张图片</span></span><br><span class="line">write = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">img_path = <span class="string">&quot;C:\\Users\\yjt\\Desktop\\1.jpg&quot;</span></span><br><span class="line">img = cv2.imread(img_path)</span><br><span class="line"><span class="comment">#标签框title 数据 位置(通过滑块展示) 类型</span></span><br><span class="line">write.add_image(<span class="string">&quot;test&quot;</span>, img, <span class="number">1</span>, dataformats=<span class="string">&#x27;HWC&#x27;</span>)</span><br><span class="line"><span class="comment">#输出一个函数图y=2*x</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    write.add_scalar(<span class="string">&quot;y=2x&quot;</span>, <span class="number">2</span> * i, i)</span><br><span class="line">write.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># --port=6007 指定端口号</span></span><br><span class="line"><span class="comment"># tensorboard --logdir=./src/logs --port=6007</span></span><br></pre></td></tr></table></figure><h2 id="transform使用"><a href="#transform使用" class="headerlink" title="transform使用"></a>transform使用</h2><p>transform主要用于图像变换,其中最常用的就是Totensor类，将数据转为tensor类型。</p><p>tensor数据类型包含了许多神经网络需要的参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line">img_path = <span class="string">&quot;../1dataset/train/ants_image/0013035.jpg&quot;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line"></span><br><span class="line">write = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line"><span class="comment"># Totensor</span></span><br><span class="line">tensor = transforms.ToTensor()</span><br><span class="line">img_tensor = tensor(img)</span><br><span class="line">write.add_image(<span class="string">&quot;tensor_img&quot;</span>, img_tensor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># normalize </span></span><br><span class="line"><span class="built_in">print</span>(img_tensor[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">norm = transforms.Normalize([<span class="number">9</span>,<span class="number">3</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>])</span><br><span class="line">img_norm = norm(img_tensor)</span><br><span class="line"><span class="built_in">print</span>(img_norm[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">write.add_image(<span class="string">&quot;norm_img&quot;</span>, img_norm,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># resize</span></span><br><span class="line"><span class="built_in">print</span>(img.size)</span><br><span class="line"><span class="comment"># 第一种直接赋值，第二种缩放</span></span><br><span class="line">trans_resize = transforms.Resize((<span class="number">512</span>, <span class="number">512</span>))</span><br><span class="line">trans_resize1 = transforms.Resize(<span class="number">200</span>)</span><br><span class="line"><span class="comment"># compose相当于组合，前一个函数的输出与后一个函数的输入必须相同</span></span><br><span class="line">trans_compose = transforms.Compose([trans_resize1,tensor])</span><br><span class="line">img_resize = trans_compose(img)</span><br><span class="line"></span><br><span class="line"><span class="comment"># randomcrop</span></span><br><span class="line">trans_rcrop = transforms.RandomCrop(<span class="number">200</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    img_crop = trans_rcrop(img)</span><br><span class="line">    img_crop_t = tensor(img_crop)</span><br><span class="line">    write.add_image(<span class="string">&quot;img_crop&quot;</span>, img_crop_t, i)</span><br><span class="line">write.close()</span><br></pre></td></tr></table></figure><h2 id="nn-module"><a href="#nn-module" class="headerlink" title="nn.module"></a>nn.module</h2><p>torch官网，看module例程。</p><ul><li><a href="https://pytorch.org/docs/stable/nn.html#containers">Containers</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myModule</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__int__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__int__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,<span class="built_in">input</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">input</span> + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">mc = myModule()</span><br><span class="line">input1 = torch.tensor(<span class="number">1.0</span>)</span><br><span class="line">output1 = mc(input1)</span><br><span class="line"><span class="built_in">print</span>(output1)</span><br></pre></td></tr></table></figure><h2 id="nn-convolution"><a href="#nn-convolution" class="headerlink" title="nn.convolution"></a>nn.convolution</h2><ul><li><a href="https://pytorch.org/docs/stable/nn.html#convolution-layers">Convolution Layers</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../dataset_cifar10&quot;</span>, train=<span class="literal">False</span>,</span><br><span class="line">                                         transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line">test_loader = DataLoader(test_data,batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_class</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(in_channels=<span class="number">3</span>,out_channels=<span class="number">6</span>,kernel_size=<span class="number">3</span>,stride=<span class="number">1</span>,padding=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.conv1(x)</span><br><span class="line">step = <span class="number">0</span></span><br><span class="line">write = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">ml = my_class()</span><br><span class="line"><span class="built_in">print</span>(ml)</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">    imgs ,target = data</span><br><span class="line">    write.add_images(<span class="string">&quot;img&quot;</span>,imgs,step)</span><br><span class="line">    outs = ml(imgs)</span><br><span class="line">    outs = torch.reshape(outs,(-<span class="number">1</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">32</span>))</span><br><span class="line">    write.add_images(<span class="string">&quot;conv&quot;</span>,outs,step)</span><br><span class="line">    step = step + <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="maxpool"><a href="#maxpool" class="headerlink" title="maxpool"></a>maxpool</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../dataset_cifar10&quot;</span>, train=<span class="literal">False</span>,</span><br><span class="line">                                         transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line">test_loader = DataLoader(test_data,batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_class</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment">#步长默认等于kernel_size</span></span><br><span class="line">        self.maxpool = nn.MaxPool2d(kernel_size=<span class="number">3</span>,ceil_mode=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.maxpool(x)</span><br><span class="line">step = <span class="number">0</span></span><br><span class="line">write = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">ml = my_class()</span><br><span class="line"><span class="built_in">print</span>(ml)</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">    imgs ,target = data</span><br><span class="line">    write.add_images(<span class="string">&quot;img&quot;</span>,imgs,step)</span><br><span class="line">    outs = ml(imgs)</span><br><span class="line">    write.add_images(<span class="string">&quot;pool&quot;</span>,outs,step)</span><br><span class="line">    step = step + <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="linear"><a href="#linear" class="headerlink" title="linear"></a>linear</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../dataset_cifar10&quot;</span>, train=<span class="literal">False</span>,transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line">test_loader = DataLoader(test_data,batch_size=<span class="number">64</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_class</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.linear1 = nn.Linear(<span class="number">196608</span>,<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.linear1(x)</span><br><span class="line">step = <span class="number">0</span></span><br><span class="line">write = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">ml = my_class()</span><br><span class="line"><span class="built_in">print</span>(ml)</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">    imgs ,target = data</span><br><span class="line">    outs = torch.reshape(imgs,(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>))</span><br><span class="line">    <span class="built_in">print</span>(outs.shape)</span><br><span class="line">    <span class="comment"># torch.flatten(tensor) 就是 torch.reshape(tensor,(1,1,1,-1))</span></span><br><span class="line">    <span class="comment">#outs1 = torch.flatten(imgs)</span></span><br><span class="line">    outs = ml(outs)</span><br><span class="line">    <span class="built_in">print</span>(outs.shape)</span><br><span class="line">    step = step + <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="网络搭建"><a href="#网络搭建" class="headerlink" title="网络搭建"></a>网络搭建</h2><p> <img src="/y-jt/y-jt.github.io/2023/04/05/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/torch%E6%95%99%E7%A8%8B/Structure-of-CIFAR10-quick-model.png" alt="Structure of CIFAR10-quick model.  "> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_class</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(in_channels=<span class="number">3</span>,out_channels=<span class="number">32</span>,kernel_size=<span class="number">5</span>,stride=<span class="number">1</span>,padding=<span class="number">2</span>)</span><br><span class="line">        self.maxpool2=nn.MaxPool2d(<span class="number">2</span>)</span><br><span class="line">        self.conv3 = nn.Conv2d(in_channels=<span class="number">32</span>,out_channels=<span class="number">32</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>)</span><br><span class="line">        self.maxpool4 = nn.MaxPool2d(<span class="number">2</span>)</span><br><span class="line">        self.conv5 = nn.Conv2d(in_channels=<span class="number">32</span>,out_channels=<span class="number">64</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>)</span><br><span class="line">        self.maxpool6 = nn.MaxPool2d(<span class="number">2</span>)</span><br><span class="line">        self.flatten7 = nn.Flatten()</span><br><span class="line">        <span class="comment"># 线性层的输入不知道的时候可以pritf(flatten层查看)</span></span><br><span class="line">        self.linear8 = nn.Linear(<span class="number">1024</span>,<span class="number">64</span>)</span><br><span class="line">        self.linear9 = nn.Linear(<span class="number">64</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="built_in">input</span> = self.conv1(<span class="built_in">input</span>)</span><br><span class="line">        <span class="built_in">input</span> = self.maxpool2(<span class="built_in">input</span>)</span><br><span class="line">        <span class="built_in">input</span> = self.conv3(<span class="built_in">input</span>)</span><br><span class="line">        <span class="built_in">input</span> = self.maxpool4(<span class="built_in">input</span>)</span><br><span class="line">        <span class="built_in">input</span> = self.conv5(<span class="built_in">input</span>)</span><br><span class="line">        <span class="built_in">input</span> = self.maxpool6(<span class="built_in">input</span>)</span><br><span class="line">        <span class="built_in">input</span> = self.flatten7(<span class="built_in">input</span>)</span><br><span class="line">        <span class="built_in">input</span> = self.linear8(<span class="built_in">input</span>)</span><br><span class="line">        <span class="built_in">input</span> = self.linear9(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">input</span></span><br><span class="line"></span><br><span class="line">mc = my_class()</span><br><span class="line"><span class="comment"># 通过下面代码测试网络输出是否想要的</span></span><br><span class="line">input1 = torch.ones(<span class="number">64</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">32</span>)</span><br><span class="line">outs = mc(input1)</span><br><span class="line"><span class="built_in">print</span>(outs.shape)</span><br><span class="line"><span class="comment"># 采用tensorboard也可以查看网络结构 </span></span><br><span class="line">write = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">write.add_graph(mc,input1)</span><br><span class="line">write.close()</span><br></pre></td></tr></table></figure><h2 id="sequential"><a href="#sequential" class="headerlink" title="sequential"></a>sequential</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">my_class</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.module1 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">3</span>,out_channels=<span class="number">32</span>,kernel_size=<span class="number">5</span>,stride=<span class="number">1</span>,padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            nn.Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="keyword">return</span> self.module1(<span class="built_in">input</span>)</span><br></pre></td></tr></table></figure><h2 id="损失函数与反向传播"><a href="#损失函数与反向传播" class="headerlink" title="损失函数与反向传播"></a>损失函数与反向传播</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> L1Loss,MSELoss</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../dataset_cifar10&quot;</span>, train=<span class="literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line">test_loader = DataLoader(dataset=test_data,batch_size=<span class="number">1</span>,shuffle=<span class="literal">False</span>,num_workers=<span class="number">0</span>,drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_class</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.module1 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">3</span>,out_channels=<span class="number">32</span>,kernel_size=<span class="number">5</span>,stride=<span class="number">1</span>,padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            nn.Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="keyword">return</span> self.module1(<span class="built_in">input</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input1 = torch.Tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">target1 = torch.Tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>])</span><br><span class="line">input1 = torch.reshape(input1,(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>))</span><br><span class="line">target1 = torch.reshape(target1,(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>))</span><br><span class="line">loss1 = L1Loss(reduction=<span class="string">&#x27;mean&#x27;</span>)</span><br><span class="line">loss2 = L1Loss(reduction=<span class="string">&#x27;sum&#x27;</span>)</span><br><span class="line">loss_mse = MSELoss()</span><br><span class="line"></span><br><span class="line">result1 = loss1(input1,target1)</span><br><span class="line">result2 = loss2(input1,target1)</span><br><span class="line">result3 = loss_mse(input1,target1)</span><br><span class="line"></span><br><span class="line">x = torch.tensor([<span class="number">0.1</span>,<span class="number">0.2</span>,<span class="number">0.3</span>])</span><br><span class="line">y = torch.tensor([<span class="number">1</span>])</span><br><span class="line">x = torch.reshape(x,(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">loss_cross = nn.CrossEntropyLoss()</span><br><span class="line">result4 = loss_cross(x,y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result1)</span><br><span class="line"><span class="built_in">print</span>(result2)</span><br><span class="line"><span class="built_in">print</span>(result3)</span><br><span class="line"><span class="built_in">print</span>(result4)</span><br><span class="line"></span><br><span class="line">mc = my_class()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">    imgs,targets = data</span><br><span class="line">    outs = mc(imgs)</span><br><span class="line">    loss_cross_result = loss_cross(outs,targets)</span><br><span class="line">    loss_cross_result.backward()</span><br><span class="line">    <span class="built_in">print</span>(loss_cross_result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> L1Loss,MSELoss</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../dataset_cifar10&quot;</span>, train=<span class="literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line">test_loader = DataLoader(dataset=test_data,batch_size=<span class="number">1</span>,shuffle=<span class="literal">False</span>,num_workers=<span class="number">0</span>,drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_class</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.module1 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">3</span>,out_channels=<span class="number">32</span>,kernel_size=<span class="number">5</span>,stride=<span class="number">1</span>,padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            nn.Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="keyword">return</span> self.module1(<span class="built_in">input</span>)</span><br><span class="line"></span><br><span class="line">loss_cross = nn.CrossEntropyLoss()</span><br><span class="line">mc = my_class()</span><br><span class="line">optim = torch.optim.SGD(mc.parameters(), lr=<span class="number">0.01</span>)</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    running_loss = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">        imgs,targets = data</span><br><span class="line">        outs = mc(imgs)</span><br><span class="line">        loss_cross_result = loss_cross(outs,targets)</span><br><span class="line">        optim.zero_grad()</span><br><span class="line">        loss_cross_result.backward()</span><br><span class="line">        optim.step()</span><br><span class="line">        running_loss = running_loss + loss_cross_result</span><br><span class="line">    <span class="built_in">print</span>(running_loss)</span><br></pre></td></tr></table></figure><h2 id="官网模型导入及修改-保存-读取"><a href="#官网模型导入及修改-保存-读取" class="headerlink" title="官网模型导入及修改,保存 读取"></a>官网模型导入及修改,保存 读取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line">vgg16_false = torchvision.models.vgg16(pretrained= <span class="literal">False</span>)</span><br><span class="line">vgg16_true = torchvision.models.vgg16(pretrained= <span class="literal">True</span>)</span><br><span class="line">vgg16_true1 = torchvision.models.vgg16()</span><br><span class="line"><span class="comment"># 添加网络层</span></span><br><span class="line">vgg16_true.classifier.add_module(<span class="string">&quot;add_linear&quot;</span>,nn.Linear(<span class="number">1000</span>,<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(vgg16_true)</span><br><span class="line"><span class="comment"># 修改网络层</span></span><br><span class="line">vgg16_false.classifier[<span class="number">6</span>]=nn.Linear(<span class="number">4096</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(vgg16_false)</span><br><span class="line"><span class="comment"># 保存 网络结构与参数</span></span><br><span class="line">torch.save(vgg16_false, <span class="string">&#x27;../models/vgg16_f.pt&#x27;</span>)</span><br><span class="line"><span class="comment"># 读取</span></span><br><span class="line">vgg16 = torch.load(<span class="string">&#x27;../models/vgg16_f.pt&#x27;</span>)</span><br><span class="line"><span class="comment"># 保存方式2 只保存参数</span></span><br><span class="line">torch.save(vgg16_true1.state_dict(),<span class="string">&#x27;../models/vgg16_f1.pt&#x27;</span>)</span><br><span class="line"><span class="comment"># 读取方式2</span></span><br><span class="line">vgg161 = torchvision.models.vgg16()</span><br><span class="line">vgg161.load_state_dict(torch.load(<span class="string">&#x27;../models/vgg16_f1.pt&#x27;</span>))</span><br><span class="line"><span class="comment"># torch.load(&#x27;../models/vgg16_f1.pt&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># *****注意</span></span><br><span class="line"><span class="comment"># *****</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myclass</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">3</span>,<span class="number">64</span>,kernel_size=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"><span class="comment"># mc = myclass()</span></span><br><span class="line"><span class="comment"># torch.save(mc,&#x27;../models/mc.pt&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果直接读取模型会报错，必须导入模型的定义1.ctrl c v模型的定义到本文件  或  2.import 定义的文件</span></span><br><span class="line">mc1 = torch.load(<span class="string">&#x27;../models/mc.pt&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="完整模型训练过程"><a href="#完整模型训练过程" class="headerlink" title="完整模型训练过程"></a>完整模型训练过程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="comment"># 模型定义</span></span><br><span class="line"><span class="keyword">from</span> module <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../dataset_cifar10&quot;</span>, train=<span class="literal">True</span>, transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../dataset_cifar10&quot;</span>, train=<span class="literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">train_data_len = <span class="built_in">len</span>(train_data)</span><br><span class="line">test_data_len = <span class="built_in">len</span>(test_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;训练集长度:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_len))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;测试集长度:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(test_data_len))</span><br><span class="line"></span><br><span class="line">train_dataloader = DataLoader(train_data,batch_size=<span class="number">64</span>)</span><br><span class="line">test_dataloader = DataLoader(test_data,batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型单独一个py文件，并通过main测试模型的输出</span></span><br><span class="line">mc = my_class()</span><br><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line">loss_f = nn.CrossEntropyLoss()</span><br><span class="line"><span class="comment"># 优化器</span></span><br><span class="line">learing_rate = <span class="number">0.01</span></span><br><span class="line">optinizer = torch.optim.SGD(mc.parameters(),lr=learing_rate)</span><br><span class="line"></span><br><span class="line">write = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line"><span class="comment"># 设置训练网络的参数</span></span><br><span class="line"><span class="comment"># 记录训练的次数</span></span><br><span class="line">total_train_step = <span class="number">0</span></span><br><span class="line"><span class="comment"># 记录测试的次数</span></span><br><span class="line">total_test_step = <span class="number">0</span></span><br><span class="line"><span class="comment"># 训练轮数</span></span><br><span class="line">epoch = <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----第 &#123;&#125; 轮训练开始-----&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>))</span><br><span class="line">    mc.train()</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> train_dataloader:</span><br><span class="line">        imgs,target = data</span><br><span class="line">        output = mc(imgs)</span><br><span class="line">        loss = loss_f(output,target)</span><br><span class="line">        <span class="comment"># 优化模型</span></span><br><span class="line">        optinizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optinizer.step()</span><br><span class="line"></span><br><span class="line">        total_train_step = total_train_step+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> total_train_step % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># loss.item()将tensor转为int</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;训练次数:&#123;&#125;  ,loss:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step,loss.item()))</span><br><span class="line">        write.add_scalar(<span class="string">&quot;train_loss&quot;</span>,loss.item(),total_train_step)</span><br><span class="line">    <span class="comment"># 测试</span></span><br><span class="line">    total_test_loss = <span class="number">0</span></span><br><span class="line">    total_accuracy = <span class="number">0</span></span><br><span class="line">    mc.<span class="built_in">eval</span>()</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> test_dataloader:</span><br><span class="line">            imgs,target = data</span><br><span class="line">            output = mc(imgs)</span><br><span class="line">            loss = loss_f(output,target)</span><br><span class="line">            total_test_loss = loss + total_test_loss</span><br><span class="line">            <span class="comment"># .argmax 参数0，操作列，1操作行，取行或列中最大数的下标。[0.2.0.4,0.3,0.1]结果是1</span></span><br><span class="line">            <span class="comment"># ==直接将结果与target比较，相同即为正确为true，然后.sum求和，除以test_data_size即为正确率</span></span><br><span class="line">            accuracy = (output.argmax(<span class="number">1</span>) == target).<span class="built_in">sum</span>()</span><br><span class="line">            total_accuracy = total_accuracy+accuracy</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试集误差：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_loss))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试集整体正确率:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_accuracy/test_data_len))</span><br><span class="line">    write.add_scalar(<span class="string">&quot;test_loss&quot;</span>, loss.item(), total_test_step)</span><br><span class="line">    total_test_step = total_test_step+<span class="number">1</span></span><br><span class="line">    write.add_scalar(<span class="string">&quot;test_accuracy&quot;</span>,total_accuracy/test_data_len,total_test_step)</span><br><span class="line">    torch.save(mc,<span class="string">&quot;../model_&#123;&#125;.pt&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">    <span class="comment"># torch.save(mc.state_dict(),&quot;tuidui_&#123;&#125;.pt&quot;.format(i))</span></span><br><span class="line">write.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_class</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.module1 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">3</span>,out_channels=<span class="number">32</span>,kernel_size=<span class="number">5</span>,stride=<span class="number">1</span>,padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            nn.Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="keyword">return</span> self.module1(<span class="built_in">input</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    mc = my_class()</span><br><span class="line">    <span class="built_in">input</span> = torch.ones(<span class="number">64</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">32</span>)</span><br><span class="line">    output = mc(<span class="built_in">input</span>)</span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 并不是用了才能训练，只针对某些特定的网络层，具体介绍查看pytorch官网model</span><br><span class="line">mc.train()</span><br><span class="line">mv.eval()</span><br><span class="line"></span><br><span class="line">device = torch.device(&quot;cuda&quot; if torch.cuda.is_available() else &quot;cpu&quot;)</span><br></pre></td></tr></table></figure><h2 id="gpu加速"><a href="#gpu加速" class="headerlink" title="gpu加速"></a>gpu加速</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">11111111111111111111111111111111</span><br><span class="line">在模型实例化后 mc=mc.cuda()</span><br><span class="line">在损失函数后 loss_f = loss_f.cuda()</span><br><span class="line">在从dataloader中取出数据后.cuda</span><br><span class="line"></span><br><span class="line">if torch.cuda.is_available()</span><br><span class="line">mc=mc.cuda()</span><br><span class="line"></span><br><span class="line">222222222222222222222222222222222</span><br><span class="line">如果没有gpu，可使用google colab</span><br><span class="line"></span><br><span class="line">33333333333333333333333333333333</span><br><span class="line">还是第一种三个地方</span><br><span class="line">.to（device）</span><br><span class="line">device = torch.device(&quot;cpu&quot;)</span><br><span class="line">device = torch.device(&quot;cuda&quot;)</span><br><span class="line">device = torch.device(&quot;cuda:1&quot;)多显卡</span><br><span class="line">device = torch.device(&quot;cuda&quot; if torch.cuda.is_avaliable() else &quot;cpu&quot;)</span><br></pre></td></tr></table></figure><h2 id="验证测试模型"><a href="#验证测试模型" class="headerlink" title="验证测试模型"></a>验证测试模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line">img_path = <span class="string">&quot;../images/dog.png&quot;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line"><span class="comment"># 保留rgb三通道  不要透明度通道</span></span><br><span class="line">img = img.convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line"><span class="comment"># 大小 格式转换</span></span><br><span class="line">transform = torchvision.transforms.Compose([torchvision.transforms.Resize((<span class="number">32</span>,<span class="number">32</span>)),</span><br><span class="line">                                            torchvision.transforms.ToTensor()])</span><br><span class="line">img = transform(img)</span><br><span class="line"></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_class</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.module1 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">3</span>,out_channels=<span class="number">32</span>,kernel_size=<span class="number">5</span>,stride=<span class="number">1</span>,padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            nn.Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="keyword">return</span> self.module1(<span class="built_in">input</span>)</span><br><span class="line"><span class="comment"># 模型读取</span></span><br><span class="line">model = torch.load(<span class="string">&quot;../models/model_27.pt&quot;</span>)</span><br><span class="line">img = torch.reshape(img,(<span class="number">1</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">32</span>))</span><br><span class="line">img = img.to(device)</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    output = model(img)</span><br><span class="line"><span class="built_in">print</span>(output.argmax(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="跑项目时"><a href="#跑项目时" class="headerlink" title="跑项目时"></a>跑项目时</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">required  替换为  default</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> torch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> torch </tag>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取豆瓣top250</title>
      <link href="/2023/03/20/python/%E7%88%AC%E8%99%AB/"/>
      <url>/2023/03/20/python/%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<p>通过python爬取豆瓣网top250的电影信息，熟悉爬虫的实现原理与过程。</p><span id="more"></span><h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>就是模拟浏览器访问网址，并将有用的数据保存到本地数据库。</p><p>headers是浏览器向服务器发送的消息。包括：response headers即服务器地址访问时间等等。cookie：浏览器访问记录、登录信息等，若访问需要登录的网站可以修改cookie而不登录访问。 </p><p>User-Agent：包含计算机、浏览器版本信息等。</p><p>计算机网络，html，json，数据库。</p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p><img src="/y-jt/y-jt.github.io/2023/03/20/python/%E7%88%AC%E8%99%AB/1657525467851.png" alt="1657525467851"></p><p><img src="/y-jt/y-jt.github.io/2023/03/20/python/%E7%88%AC%E8%99%AB/1657525695322.png" alt="1657525695322"></p><p><img src="/y-jt/y-jt.github.io/2023/03/20/python/%E7%88%AC%E8%99%AB/1657525905894.png" alt="1657525905894"></p><p><img src="/y-jt/y-jt.github.io/2023/03/20/python/%E7%88%AC%E8%99%AB/1657526025951.png" alt="1657526025951"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- codeing = utf-8 -*-</span></span><br><span class="line"><span class="comment">#@Time:2022.7.10</span></span><br><span class="line"><span class="comment">#@Author:涛</span></span><br><span class="line"><span class="comment">#@File:spider_douban</span></span><br><span class="line"><span class="comment">#@Software:jupyter notebook</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup      <span class="comment">#网页及解析，获取数据</span></span><br><span class="line"><span class="keyword">import</span> re       <span class="comment">#正则表达式，进行文字匹配</span></span><br><span class="line"><span class="keyword">import</span> urllib   <span class="comment">#制定url，获取网页数据</span></span><br><span class="line"><span class="keyword">import</span> xlwt     <span class="comment">#进行excel操作</span></span><br><span class="line"><span class="keyword">import</span> sqlite3  <span class="comment">#进行sqlite数据库操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#正则表达式的全局变量，&#x27;&#x27;号中间（）号中的内容即是所需要的内容</span></span><br><span class="line">findlink = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;a href=&quot;(.*?)&quot;&gt;&#x27;</span>)<span class="comment">#影片详情链接的正则表达式</span></span><br><span class="line">findImgSrc = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;img.*src=&quot;(.*?)&quot;&#x27;</span>,re.S) <span class="comment">#re.S让换行符包含在字符中</span></span><br><span class="line">findTitle = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span class=&quot;title&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)</span><br><span class="line">findRating = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span class=&quot;rating_num&quot; property=&quot;v:average&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)</span><br><span class="line">findJudge = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span&gt;(\d*)人评价&lt;/span&gt;&#x27;</span>)</span><br><span class="line">findInq = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span class=&quot;inq&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)<span class="comment">#概述</span></span><br><span class="line">findBd = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;p class=&quot;&quot;&gt;(.*?)&lt;/p&gt;&#x27;</span>,re.S)<span class="comment">#详细信息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    baseurl = <span class="string">&quot;https://movie.douban.com/top250?start=&quot;</span></span><br><span class="line">    datalist = getData(baseurl)</span><br><span class="line">    <span class="comment">#savepath = &quot;豆瓣电影Top250.xls&quot;</span></span><br><span class="line">    <span class="comment">#saveData(datalist,savepath)</span></span><br><span class="line">    </span><br><span class="line">    dbpath = <span class="string">&quot;movie.db&quot;</span></span><br><span class="line">    saveDataDb(datalist,dbpath)</span><br><span class="line">    print_movie_db(dbpath)</span><br><span class="line"></span><br><span class="line"><span class="comment">#爬取网页</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getData</span>(<span class="params">baseurl</span>):</span><br><span class="line">    datalist = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">        url = baseurl + <span class="built_in">str</span>(i*<span class="number">25</span>)</span><br><span class="line">        html = askURL(url)</span><br><span class="line">        <span class="comment">#逐一解析数据</span></span><br><span class="line">        soup = BeautifulSoup(html,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;div&#x27;</span>,class_=<span class="string">&quot;item&quot;</span>):<span class="comment">#查找符合要求的字符串，形成列表</span></span><br><span class="line">            <span class="comment">#print(item)</span></span><br><span class="line">            data = []</span><br><span class="line">            item = <span class="built_in">str</span>(item)<span class="comment">#转为字符串使用re正则表达式查找</span></span><br><span class="line">            <span class="comment">#在所有字符串中 找到满足要求的  影片详情链接</span></span><br><span class="line">            link = re.findall(findlink,item)[<span class="number">0</span>]<span class="comment">#findall 找到所有的，并保留第一个</span></span><br><span class="line">            data.append(link)</span><br><span class="line">            </span><br><span class="line">            imgSrc = re.findall(findImgSrc,item)[<span class="number">0</span>]</span><br><span class="line">            data.append(imgSrc)</span><br><span class="line">            </span><br><span class="line">            title = re.findall(findTitle,item)<span class="comment">#片名会有外国名  分别保存</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">len</span>(title)==<span class="number">2</span>):</span><br><span class="line">                ctitle = title[<span class="number">0</span>]</span><br><span class="line">                data.append(ctitle)</span><br><span class="line">                otitle = title[<span class="number">1</span>].replace(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;&quot;</span>)<span class="comment">#外国名 前面有一个/需要去掉，replace就是用后一个代替前一个</span></span><br><span class="line">                data.append(otitle)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data.append(title[<span class="number">0</span>])</span><br><span class="line">                data.append(<span class="string">&#x27; &#x27;</span>)        <span class="comment">#如果没有外国名，就将名字留空，不然表格会乱            </span></span><br><span class="line">            </span><br><span class="line">            Rating = re.findall(findRating,item)[<span class="number">0</span>]</span><br><span class="line">            data.append(Rating)</span><br><span class="line">            </span><br><span class="line">            Judge = re.findall(findJudge,item)[<span class="number">0</span>]</span><br><span class="line">            data.append(Judge)</span><br><span class="line">            </span><br><span class="line">            Inq = re.findall(findInq,item)   <span class="comment">#概述可能没有</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(Inq) != <span class="number">0</span>:</span><br><span class="line">                Inq= Inq[<span class="number">0</span>].replace(<span class="string">&quot;。&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">                data.append(Inq)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data.append(<span class="string">&quot; &quot;</span>)</span><br><span class="line">            </span><br><span class="line">            Bd = re.findall(findBd,item)[<span class="number">0</span>]</span><br><span class="line">            Bd = re.sub(<span class="string">&#x27;&lt;br(\s+)?/&gt;(\s+)?&#x27;</span>,<span class="string">&quot; &quot;</span>,Bd)  <span class="comment">#替换没必要的内容</span></span><br><span class="line">            Bd = re.sub(<span class="string">&#x27;/&#x27;</span>,<span class="string">&quot; &quot;</span>,Bd)</span><br><span class="line">            Bd = Bd.strip()<span class="comment">#  strip 去掉空格</span></span><br><span class="line">            data.append(Bd)</span><br><span class="line">            datalist.append(data)</span><br><span class="line">    <span class="keyword">return</span> datalist</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#用户代理，告诉服务器我们能接受  解析什么样的数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">askURL</span>(<span class="params">url</span>):</span><br><span class="line">    head = &#123;<span class="comment">#模拟浏览器头部信息，向豆瓣服务器发送消息。</span></span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.49&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    request = urllib.request.Request(url,headers=head)</span><br><span class="line">    html = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = urllib.request.urlopen(request)</span><br><span class="line">        html = response.read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="comment">#print(html)</span></span><br><span class="line">    <span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(e,<span class="string">&quot;code&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(e.code)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(e,<span class="string">&quot;reason&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(e.reason)</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line">    </span><br><span class="line"><span class="comment">#保存数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">saveData</span>(<span class="params">datalist,savepath</span>):</span><br><span class="line">    book = xlwt.Workbook(encoding=<span class="string">&quot;utf-8&quot;</span>,style_compression=<span class="number">0</span>)</span><br><span class="line">    sheet = book.add_sheet(<span class="string">&#x27;豆瓣电影top250&#x27;</span>,cell_overwrite_ok=<span class="literal">True</span>)</span><br><span class="line">    col=(<span class="string">&quot;电影详情链接&quot;</span>,<span class="string">&quot;图片链接&quot;</span>,<span class="string">&quot;影片中文名&quot;</span>,<span class="string">&quot;影片外国名&quot;</span>,<span class="string">&quot;评分&quot;</span>,<span class="string">&quot;评分人数&quot;</span>,<span class="string">&quot;概述&quot;</span>,<span class="string">&quot;相关信息&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">8</span>):</span><br><span class="line">        sheet.write(<span class="number">0</span>,i,col[i])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">250</span>):</span><br><span class="line">        <span class="comment">#print(&#x27;第%d条&#x27;%(i))</span></span><br><span class="line">        data = datalist[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">8</span>):</span><br><span class="line">            sheet.write(i+<span class="number">1</span>,j,data[j])</span><br><span class="line">    book.save(savepath)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">saveDataDb</span>(<span class="params">datalist,dbpath</span>):</span><br><span class="line">    init_db(dbpath)</span><br><span class="line">    conn = sqlite3.connect(dbpath)</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datalist:</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">            <span class="keyword">if</span> index == <span class="number">4</span> <span class="keyword">or</span> index == <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            data[index] = <span class="string">&#x27;&quot;&#x27;</span>+data[index]+<span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">        sql=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            insert into movie250(</span></span><br><span class="line"><span class="string">            info_link,pic_link,cname,ename,score,rated,instroduction,info)</span></span><br><span class="line"><span class="string">            values(%s)</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span>%<span class="string">&quot;,&quot;</span>.join(data)<span class="comment">#用，将字符串分割</span></span><br><span class="line">        <span class="comment">#print(sql)</span></span><br><span class="line">        cur.execute(sql)</span><br><span class="line">        conn.commit()</span><br><span class="line">    cur.close()</span><br><span class="line">    conn.close()</span><br><span class="line">            </span><br><span class="line"><span class="comment">#数据库建表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_db</span>(<span class="params">dbpath</span>):</span><br><span class="line">    sql = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        create table movie250</span></span><br><span class="line"><span class="string">        (</span></span><br><span class="line"><span class="string">        id integer primary key autoincrement,</span></span><br><span class="line"><span class="string">        info_link text,</span></span><br><span class="line"><span class="string">        pic_link text,</span></span><br><span class="line"><span class="string">        cname varchar,</span></span><br><span class="line"><span class="string">        ename varchar,</span></span><br><span class="line"><span class="string">        score numeric,</span></span><br><span class="line"><span class="string">        rated numeric,</span></span><br><span class="line"><span class="string">        instroduction text,</span></span><br><span class="line"><span class="string">        info text</span></span><br><span class="line"><span class="string">        )</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    conn = sqlite3.connect(dbpath)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    conn.commit()</span><br><span class="line">    conn.close()</span><br><span class="line">    </span><br><span class="line"><span class="comment">#查看数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_movie_db</span>(<span class="params">dbpath</span>):</span><br><span class="line">    conn = sqlite3.connect(dbpath)</span><br><span class="line">    c= conn.cursor()       <span class="comment">#获取游标</span></span><br><span class="line">    <span class="comment">#sql 语句</span></span><br><span class="line">    sql = <span class="string">&quot;select id,info_link,pic_link,cname,ename,score,rated,instroduction,info from movie250&quot;</span></span><br><span class="line"></span><br><span class="line">    cursor = c.execute(sql)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> cursor:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;id=&quot;</span>,row[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;info_link=&quot;</span>,row[<span class="number">1</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;pic_link=&quot;</span>,row[<span class="number">2</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;cname=&quot;</span>,row[<span class="number">3</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ename=&quot;</span>,row[<span class="number">4</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;score=&quot;</span>,row[<span class="number">5</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;rated=&quot;</span>,row[<span class="number">6</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;instroduction=&quot;</span>,row[<span class="number">7</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;info=&quot;</span>,row[<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">    conn.close()<span class="comment">#关闭数据库链接</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#调用函数</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment">#链接数据库</span></span><br><span class="line"><span class="comment"># conn = sqlite3.connect(&quot;test.db&quot;)</span></span><br><span class="line"><span class="comment"># print(&quot;opend database successfully&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#链接数据库，并建表</span></span><br><span class="line"><span class="comment"># conn = sqlite3.connect(&quot;test.db&quot;)</span></span><br><span class="line"><span class="comment"># c= conn.cursor()       #获取游标</span></span><br><span class="line"><span class="comment"># #sql 语句</span></span><br><span class="line"><span class="comment"># sql = &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#     create table company</span></span><br><span class="line"><span class="comment">#     (id int primary key not null,</span></span><br><span class="line"><span class="comment">#     name text not null,</span></span><br><span class="line"><span class="comment">#     age int not null,</span></span><br><span class="line"><span class="comment">#     address char(50),</span></span><br><span class="line"><span class="comment">#     salary real);</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># c.execute(sql)#执行sql语句</span></span><br><span class="line"><span class="comment"># conn.commit()#提交数据库操作</span></span><br><span class="line"><span class="comment"># conn.close()#关闭数据库链接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># conn = sqlite3.connect(&quot;test.db&quot;)</span></span><br><span class="line"><span class="comment"># c= conn.cursor()       #获取游标</span></span><br><span class="line"><span class="comment"># #sql 语句</span></span><br><span class="line"><span class="comment"># sql1 = &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#     insert into company (id,name,age,address,salary)</span></span><br><span class="line"><span class="comment">#     values(1,&#x27;张三&#x27;,32,&#x27;成都&#x27;,8000)</span></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># sql2 = &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#     insert into company (id,name,age,address,salary)</span></span><br><span class="line"><span class="comment">#     values(2,&#x27;李四&#x27;,30,&#x27;重庆&#x27;,10000)</span></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># c.execute(sql1)#执行sql语句</span></span><br><span class="line"><span class="comment"># c.execute(sql2)</span></span><br><span class="line"><span class="comment"># conn.commit()#提交数据库操作</span></span><br><span class="line"><span class="comment"># conn.close()#关闭数据库链接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询数据</span></span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">&quot;test.db&quot;</span>)</span><br><span class="line">c= conn.cursor()       <span class="comment">#获取游标</span></span><br><span class="line"><span class="comment">#sql 语句</span></span><br><span class="line">sql = <span class="string">&quot;select id,name,address,salary from company&quot;</span></span><br><span class="line"></span><br><span class="line">cursor = c.execute(sql)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> cursor:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;id=&quot;</span>,row[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;name=&quot;</span>,row[<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;address=&quot;</span>,row[<span class="number">2</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;salary=&quot;</span>,row[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">conn.close()<span class="comment">#关闭数据库链接</span></span><br></pre></td></tr></table></figure><h3 id="网址访问get请求"><a href="#网址访问get请求" class="headerlink" title="网址访问get请求"></a>网址访问get请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># #获取一个get请求</span></span><br><span class="line"><span class="comment"># response = urllib.request.urlopen(&quot;http://www.baidu.com&quot;)</span></span><br><span class="line"><span class="comment"># print(response.read().decode(&#x27;utf-8&#x27;))#访问网址，将所有信息保存到一个类，通过read读取</span></span><br><span class="line"><span class="comment"># #使用ytf-8解码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># #还可以使用post请求     需要服务器代码，可以使用网址       httpbin.org  网址</span></span><br><span class="line"><span class="comment"># #通过post访问时，必须需要一个表单才能访问，即下面的data</span></span><br><span class="line"><span class="comment"># import urllib.parse</span></span><br><span class="line"><span class="comment"># #bytes 转为字节数据</span></span><br><span class="line"><span class="comment"># data = bytes(urllib.parse.urlencode(&#123;&quot;hello&quot;:&quot;world&quot;&#125;),encoding=&quot;utf-8&quot;)</span></span><br><span class="line"><span class="comment"># response = urllib.request.urlopen(&quot;http://httpbin.org/post&quot;,data = data)</span></span><br><span class="line"><span class="comment"># print(response.read().decode(&quot;utf-8&quot;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># try:</span></span><br><span class="line"><span class="comment">#     #timeout 即访问等待时间，超时返回异常</span></span><br><span class="line"><span class="comment">#     response = urllib.request.urlopen(&quot;http://httpbin.org/get&quot;,timeout=0.01)</span></span><br><span class="line"><span class="comment">#     print(response.read().decode(&quot;utf-8&quot;))</span></span><br><span class="line"><span class="comment"># except urllib.error.URLError as e:</span></span><br><span class="line"><span class="comment">#     print(&quot;time out!!!&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># response = urllib.request.urlopen(&quot;http://httpbin.org/get&quot;,timeout=1)</span></span><br><span class="line"><span class="comment"># #status  即访问网址的状态码，如httpbin.org，访问成功返回状态码为200</span></span><br><span class="line"><span class="comment"># #当爬取，douban网时，会识别为爬虫，返回418，禁止爬取</span></span><br><span class="line"><span class="comment"># print(response.status)</span></span><br><span class="line"><span class="comment"># #getheaders获取所有headers，可以使用具体名字访问一部分</span></span><br><span class="line"><span class="comment"># print(response.getheaders())</span></span><br><span class="line"><span class="comment"># print(response.getheader(&quot;Content-Type&quot;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># url = &quot;http://httpbin.org/post&quot;</span></span><br><span class="line"><span class="comment"># #headers 可以使用浏览器访问网址获取</span></span><br><span class="line"><span class="comment"># headers = &#123;</span></span><br><span class="line"><span class="comment">#     &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.49&quot;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># data = bytes(urllib.parse.urlencode(&#123;&#x27;name&#x27;:&#x27;eric&#x27;&#125;),encoding = &#x27;utf-8&#x27;)</span></span><br><span class="line"><span class="comment"># req = urllib.request.Request(url = url,data=data,headers=headers,method=&quot;POST&quot;)</span></span><br><span class="line"><span class="comment"># response = urllib.request.urlopen(req)</span></span><br><span class="line"><span class="comment"># print(response.read().decode(&quot;utf-8&quot;))</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.douban.com&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.49&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">req  =  urllib.request.Request(url=url,headers=headers)</span><br><span class="line">response = urllib.request.urlopen(req)</span><br><span class="line"><span class="built_in">print</span>(response.read().decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="Excel表格创建写入"><a href="#Excel表格创建写入" class="headerlink" title="Excel表格创建写入"></a>Excel表格创建写入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line">workbook = xlwt.Workbook(encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">worksheet = workbook.add_sheet(<span class="string">&#x27;sheet1&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,i+<span class="number">1</span>):</span><br><span class="line">        worksheet.write(i,j,<span class="string">&quot;%d * %d = %d&quot;</span>%(i+<span class="number">1</span>,j+<span class="number">1</span>,(i+<span class="number">1</span>)*(j+<span class="number">1</span>)))</span><br><span class="line">workbook.save(<span class="string">&#x27;student.xls&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="正则表达式-1"><a href="#正则表达式-1" class="headerlink" title="正则表达式"></a>正则表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#title：python  re模块   正则表达式</span></span><br><span class="line"><span class="comment">#time 2022.7.11</span></span><br><span class="line"><span class="comment">#author：涛</span></span><br><span class="line"><span class="comment">#software：jupyter notebook</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pat = re.<span class="built_in">compile</span>(<span class="string">&quot;AA&quot;</span>)<span class="comment">#此处为正则表达式，去检验其他字符串</span></span><br><span class="line"><span class="comment">#m=pat.search(&quot;CA&quot;)#search字符串被检验的内容,找到第一个匹配字符串的位置</span></span><br><span class="line"><span class="comment">#m= pat.search(&quot;ACA&quot;)</span></span><br><span class="line"><span class="comment">#m= pat.search(&quot;ACAA&quot;)</span></span><br><span class="line">m= pat.search(<span class="string">&quot;ACAABAACAA&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line">a = re.search(<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;ACAABAACAA&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">b= re.findall(<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;ACAABAACAA&quot;</span>)<span class="comment">#findall 找到满足字符串，并提取出来</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line">c= re.findall(<span class="string">&quot;[A-Z]&quot;</span>,<span class="string">&quot;ACAABAACAA&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line">d= re.findall(<span class="string">&quot;[A-Z]+&quot;</span>,<span class="string">&quot;ACAAaBAACAA&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(re.sub(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;A&quot;</span>,<span class="string">&quot;abcdaaAAbA&quot;</span>))<span class="comment">#找到第三个字符串中满足第一个字符串的内容，并用第二个字符串替换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#建议在正则表达式中，被比较的字符串前面加上r，不用担心转义字符的问题</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\aabd-\&#x27;&quot;</span>) <span class="comment">#比如  \a 和 \&#x27;  会被转义为其他的东西</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&quot;\aabd-\&#x27;&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见图像变换</title>
      <link href="/2023/03/16/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/"/>
      <url>/2023/03/16/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/%E5%9B%BE%E5%83%8F%E5%8F%98%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>常见图像变换的实现原理及源码。</p><span id="more"></span><h2 id="图像线性变换"><a href="#图像线性变换" class="headerlink" title="图像线性变换"></a>图像线性变换</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>图像的线性变换是图像处理的基本运算，通常应用在调整图像的画面质量方面，如图像对比度、亮度及反转等操作。对于输入图像f(x,y)，输出图像g(x,y)，其线性变换表达式为：<br>$$<br>g(x, y)&#x3D;a f(x, y)+b<br>$$<br>$g(x, y)&#x3D;a f(x, y)+b$</p><p>其中参数a表示图像对比度变化，b表示图像亮度变化。</p><p>当a&lt;0时，图像变换代表反转操作，如a&#x3D;-1、b&#x3D;255，（255-$f(x, y)$）这是常见的8位灰度图像的反转操作设置参数；<br>当|a|&gt;1时，图像变换代表对比度增加操作；当|a|&lt;1时，图像变换代表对比度减少操作。<br>当b&gt;0时，表示图像变换操作是亮度增加操作；b&lt;0时，表示图像变换操作是亮度减少操作。</p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/core/core.hpp&gt;</span>        </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/highgui/highgui.hpp&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="comment">// 图像线性变换操作</span></span><br><span class="line"><span class="function">cv::Mat <span class="title">linearTransform</span><span class="params">(cv::Mat srcImage, <span class="type">float</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(srcImage.<span class="built_in">empty</span>())&#123;  </span><br><span class="line">        std::cout&lt;&lt; <span class="string">&quot;No data!&quot;</span> &lt;&lt;std::endl;  </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> nRows = srcImage.rows;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> nCols = srcImage.cols;</span><br><span class="line">    cv::Mat resultImage = </span><br><span class="line">        cv::Mat::<span class="built_in">zeros</span>(srcImage.<span class="built_in">size</span>(), srcImage.<span class="built_in">type</span>());</span><br><span class="line">    <span class="comment">// 图像元素遍历</span></span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">0</span>; i &lt; nRows; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="type">int</span> j = <span class="number">0</span>; j &lt; nCols; j++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>( <span class="type">int</span> c = <span class="number">0</span>; c &lt; <span class="number">3</span>; c++ )<span class="comment">//如果源图像是灰度图,那么把这里改为c&lt;1即可</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 矩阵at操作，检查下标防止越界</span></span><br><span class="line">                resultImage.<span class="built_in">at</span>&lt;Vec3b&gt;(i,j)[c] = </span><br><span class="line">                  <span class="built_in">saturate_cast</span>&lt;uchar&gt;(a * </span><br><span class="line">                  (srcImage.<span class="built_in">at</span>&lt;Vec3b&gt;(i,j)[c]) + b);</span><br><span class="line">    <span class="comment">//只有当a=-1,b=255,等效255-像素值，反转图像！！！！</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultImage;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 图像获取及验证</span></span><br><span class="line">    cv::Mat srcImage = cv::<span class="built_in">imread</span>(<span class="string">&quot;lakeWater.jpg&quot;</span>); </span><br><span class="line">    <span class="keyword">if</span>(!srcImage.data) </span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    cv::<span class="built_in">imshow</span>(<span class="string">&quot;srcImage&quot;</span>, srcImage);</span><br><span class="line">    <span class="comment">//cv::waitKey(0);</span></span><br><span class="line">    <span class="comment">// 线性变换</span></span><br><span class="line">    <span class="type">float</span> a = <span class="number">1.2</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">50</span>;</span><br><span class="line">    cv::Mat new_image  = <span class="built_in">linearTransform</span>(srcImage, a, b);  </span><br><span class="line">    cv::<span class="built_in">imshow</span>(<span class="string">&quot;dst&quot;</span>, new_image);</span><br><span class="line">    cv::<span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像处理 </tag>
            
            <tag> 线性变换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo配置使用</title>
      <link href="/2023/03/14/%E6%95%99%E7%A8%8B/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/03/14/%E6%95%99%E7%A8%8B/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>使用Hexo+GitHub完成部署。</p><span id="more"></span><p>1.下载node.js,Git。</p><p>2.使用cmd node -v，npm -v，git –version，分别出现对应版本信息，安装成功。</p><p>3.npm install hexo-cli -g安装hexo。hexo -v查看版本信息。</p><p>4.登录GitHub，创建一个仓库，仓库名必须与GitHub注册名一致并且加上.github.io。</p><p>5.打开Git bash，通过ssh检测是否安装ssh，并通过ssh -keygen -t -rsa -C “加上GitHub注册邮箱”    点击4次回车。在C盘\用户\你的id\ .ssh文件夹下找到id_rsa.pub文件，复制里面所有内容。打开GitHub，setting，SSH，新建一个SSH。ssh -T <a href="mailto:&#103;&#105;&#x74;&#64;&#x67;&#105;&#x74;&#104;&#117;&#x62;&#x2e;&#99;&#x6f;&#109;">&#103;&#105;&#x74;&#64;&#x67;&#105;&#x74;&#104;&#117;&#x62;&#x2e;&#99;&#x6f;&#109;</a>测试是否绑定成功。</p><p>6.本地创建博客，在本地创建一个文件夹，在这儿打开Git bash，输入hexo init#初始化hexo。</p><p>7.打开hexo文件夹下config文件，最后替换成</p><p>deploy:<br>  type: git<br>  repository: 新建github仓库的地址，点击code就有。<br>  branch: main</p><p>通过npm install hexo-deployer-git –save   ,安装工具。</p><p>上传成功后，点击仓库，setting，找到github pages的链接，就是github里面博客内容的链接。</p><p>8.新建一篇  hexo new “name”</p><h6 id="hexo-clean-清理-hexo-g生成-hexo-s本地发布-hexo-d-上传github"><a href="#hexo-clean-清理-hexo-g生成-hexo-s本地发布-hexo-d-上传github" class="headerlink" title="hexo clean 清理    hexo g生成  hexo s本地发布  hexo d  上传github"></a>hexo clean 清理    hexo g生成  hexo s本地发布  hexo d  上传github</h6><h2 id="hexo-s后图像无法显示"><a href="#hexo-s后图像无法显示" class="headerlink" title="hexo s后图像无法显示"></a>hexo s后图像无法显示</h2><p>1.首先打开typora设置图片的保存位置。</p><p><img src="/y-jt/y-jt.github.io/2023/03/14/%E6%95%99%E7%A8%8B/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/1678785047227.png" alt="1678785047227"></p><p>2.打开博客根目录下的_config.yml文件，将其中post_asset_folder设置为true，post_asset_folder: true。</p><p>3.安装npm install <a href="https://github.com/CodeFalling/hexo-asset-image">https://github.com/CodeFalling/hexo-asset-image</a> –save这个插件</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈夫曼编码</title>
      <link href="/2023/03/14/%E7%AE%97%E6%B3%95/%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/"/>
      <url>/2023/03/14/%E7%AE%97%E6%B3%95/%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>数据无损压缩——哈夫曼编码。学习及简单实现过程。</p><span id="more"></span><h2 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h2><p>​数据压缩技术通过重新编码将数据进行压缩存储，从而减少数据占用的存储空间。使用时，再进行解压缩。压缩方法主要有无损压缩和有损压缩。无损压缩的原理是统计被压缩数据中重复数据的出现次数来进行编码。无损压缩能确保解压后的数据不失真，压缩比为 2∶1～5∶1，适用于文本、图像的压缩，不适合实时处理图像、视频和音频数据。 </p><p>​ASCII 码是最常用的一种定长编码方案，一个字符由 8 位二进制数表示。ASCII 码中每个字符的编码与字符的使用频率无关。在实际应用中，各字符的使用频率不同，如字母 a 的使用频率明显高于字母 z。同样，图像中的数据也有不同的使用频率。 </p><p>​哈夫曼编码是一种变长的编码方案，字符的编码根据使用频率的不同而长短不一，使用频率高的字符其编码较短，使用频率低的字符其编码较长，从而使所有字符的编码总长度为最短。 </p><p><strong>例如字符串[AAAABBBCDDBBAAA]采用不同的编码方式：</strong></p><ol><li>采用ASCII码存储，15个字符占用15字节，公120位。</li><li>采用哈夫曼编码存储。已知字符集为{A， B， C， D}，统计各字符在指定字符串中的出现次数分别为{7， 5， 1， 2}，求得哈夫曼树和哈夫曼编码如图所示。</li></ol><p><img src="/y-jt/y-jt.github.io/2023/03/14/%E7%AE%97%E6%B3%95/%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/1678170420790.png" alt="1678170420790"></p><p>根据哈夫曼编码，将指定字符串压缩如下：</p><p>AAAABBBCDDBBAAA</p><p>0000   1111   11  100  101  101  11   11    0    0    0 </p><p>压缩后数据共26位，采用哈夫曼编码压缩后，数据信息没有损失，因此哈夫曼编码是一种无损压缩。</p><p><strong>变长编码方案必须满足这样一条基本要求：任何一个字符的编码都不是另一个字符编码的前缀。</strong>这样才能保证译码的唯一性。哈夫曼编码满足这一基本要求。</p><h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2><h3 id="1-二叉树的路径长度"><a href="#1-二叉树的路径长度" class="headerlink" title="1.二叉树的路径长度"></a>1.二叉树的路径长度</h3><p>​与树的边、路径、路径长度等概念相同，在二叉树中，从结点 X 到 Y 所经过的结点序列称为从结点 X 到 Y 的一条路径，路径长度为路径上的边数。从根结点到所有结点的路径长度之和称为该二叉树的路径长度（Path Length，PL）。</p><p>​从根到结点 X 有且仅有一条路径，路径长度为结点 X 的层次减 1。n个结点的不同形态的二叉树，其路径长度也不同，完全二叉树的路径长度最短，但路径长度最短的二叉树不只完全二叉树一种。8 个结点的多棵二叉树及其路径长度如图所示。 </p><p><img src="/y-jt/y-jt.github.io/2023/03/14/%E7%AE%97%E6%B3%95/%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/1678171562217.png" alt="1678171562217"></p><h3 id="2-二叉树的外路径长度"><a href="#2-二叉树的外路径长度" class="headerlink" title="2.二叉树的外路径长度"></a>2.二叉树的外路径长度</h3><p>​一棵二叉树，从根结点到所有叶子结点的路径长度之和称为该二叉树的外路径长度。 </p><p>​一种编码方案可由一棵二叉树表示，每条边表示一个二进制位 0 或 1，左子树的边表示 0，右子树的边表示 1，每个叶子结点表示一个字符。从根到叶子结点的一条路径上所有边的值组成该字符的编码。表示编码的二叉树中只有 2 度结点和叶子结点，没有 1 度结点。 </p><p>​一种编码方案的编码总长度为对应编码二叉树的外路径长度，完全二叉树的外路径长度最短。例如，四进制的定长编码对应 7 个结点的满二叉树，如图 6.31（a）所示，其外路径长度为 8，这是所有 7 个结点二叉树中外路径长度最短的。 </p><p>​同理，可画出八进制和十六进制的编码二叉树。以上讨论的是等概率情况，即编码方案中每个字符的使用概率相等。那么，如果考虑字符的使用概率不相等情况，该如何编码呢？ </p><p><img src="/y-jt/y-jt.github.io/2023/03/14/%E7%AE%97%E6%B3%95/%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/1678178268876.png" alt="1678178268876"></p><h3 id="3-哈夫曼编码"><a href="#3-哈夫曼编码" class="headerlink" title="3.哈夫曼编码"></a>3.哈夫曼编码</h3><ul><li>统计文本中字符出现的次数</li><li>将字符按照频数升序排序</li><li>将频数最小的两个叶子结点结合成树，看作一个整体，整体的频数是叶子结点频数和</li><li>把这个树看作整体和其他的一起也进行升序排序</li><li>重复上述过程知道生成整棵树</li></ul><h2 id="BMP图像文件的读写"><a href="#BMP图像文件的读写" class="headerlink" title="BMP图像文件的读写"></a>BMP图像文件的读写</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 数据压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中值阈值和otsu</title>
      <link href="/2023/03/14/%E7%AE%97%E6%B3%95/%E4%B8%AD%E5%80%BC%E9%98%88%E5%80%BC%E5%92%8Cotsu/"/>
      <url>/2023/03/14/%E7%AE%97%E6%B3%95/%E4%B8%AD%E5%80%BC%E9%98%88%E5%80%BC%E5%92%8Cotsu/</url>
      
        <content type="html"><![CDATA[<p>中值阈值和大津算法的原理及手动实现。</p><span id="more"></span><h2 id="OTSU"><a href="#OTSU" class="headerlink" title="OTSU"></a>OTSU</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>大津法（OTSU）又名最大类间差法，由日本学者大津于1979年提出。被认为是图像分割中阈值选取的最佳算法，计算简单，不受图像亮度和对比度的影响。</p><p>大津法是按图像的灰度特征，把图像分成前景和背景两部分。因方差是灰度分布均匀性的一种度量,背景和前景之间的类间方差越大,说明构成图像的两部分的差别越大,当部分前景错分为背景或部分背景错分为前景都会导致两部分差别变小。因此使用类间方差最大的分割意味着错分概率最小。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">对于图像I(x,y)，前景(即目标)和背景的分割阈值记作T，</span><br><span class="line">属于前景的像素点数占整幅图像的比例记为ω0，其平均灰度μ0；</span><br><span class="line">背景像素点数占整幅图像的比例为ω1，其平均灰度为μ1。</span><br><span class="line">图像的总平均灰度记为μ，类间方差记为g。</span><br><span class="line">假设图像的背景较暗，并且图像的大小为M×N，</span><br><span class="line">图像中像素的灰度值小于阈值T的像素个数记作N0，</span><br><span class="line">像素灰度大于阈值T的像素个数记作N1，则有：</span><br><span class="line">　　　　　　ω0=N0/ M×N (1)</span><br><span class="line">　　　　　　ω1=N1/ M×N (2)</span><br><span class="line">　　　　　　N0+N1=M×N (3)</span><br><span class="line">　　　　　　ω0+ω1=1　　　 (4)</span><br><span class="line">　　　　　　μ=ω0*μ0+ω1*μ1 (5)</span><br><span class="line">　　　　　　g=ω0(μ0-μ)^2+ω1(μ1-μ)^2 (6)</span><br><span class="line">将式(5)代入式(6),得到等价公式:</span><br><span class="line">　　　　　　g=ω0ω1(μ0-μ1)^2 　　 (7)　</span><br><span class="line">这就是类间方差采用遍历的方法得到使类间方差g最大的阈值T,即为所求。</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用大津法Mat的阈值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetMatOTSU</span><span class="params">(Mat&amp; img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//判断如果不是单通道直接返回128</span></span><br><span class="line">  <span class="keyword">if</span> (img.<span class="built_in">channels</span>() &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">128</span>;</span><br><span class="line">  <span class="type">int</span> rows = img.rows;</span><br><span class="line">  <span class="type">int</span> cols = img.cols;</span><br><span class="line">  <span class="comment">//定义数组</span></span><br><span class="line">  <span class="type">float</span> mathists[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">  <span class="comment">//遍历计算0-255的个数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> row = <span class="number">0</span>; row &lt; rows; ++row) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> col = <span class="number">0</span>; col &lt; cols; ++col) &#123;</span><br><span class="line">      <span class="type">int</span> val = img.<span class="built_in">at</span>&lt;uchar&gt;(row, col);</span><br><span class="line">      mathists[val]++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//定义灰度级像素在整个图像中的比例</span></span><br><span class="line">  <span class="type">float</span> grayPro[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">  <span class="type">int</span> matSize = rows * cols;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i) &#123;</span><br><span class="line">    grayPro[i] = (<span class="type">float</span>)mathists[i] / (<span class="type">float</span>)matSize;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//大津法OTSU，前景与背景分割，计算出方差最大的灰度值</span></span><br><span class="line">  <span class="type">int</span> calcval;</span><br><span class="line">  <span class="type">int</span> calcMax = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i) &#123;</span><br><span class="line">    <span class="type">float</span> w0 = <span class="number">0</span>, w1 = <span class="number">0</span>, u0tmp = <span class="number">0</span>, u1tmp = <span class="number">0</span>, u0 = <span class="number">0</span>, u1 = <span class="number">0</span>, u = <span class="number">0</span>, calctmp = <span class="number">0</span>;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">256</span>; ++k) &#123;</span><br><span class="line">      <span class="type">float</span> curGray = grayPro[k];</span><br><span class="line">      <span class="comment">//计算背景部分</span></span><br><span class="line">      <span class="keyword">if</span> (k &lt;= i) &#123;</span><br><span class="line">        <span class="comment">//以i为阈值分类，第一类总的概率</span></span><br><span class="line">        w0 += curGray;</span><br><span class="line">        u0tmp += curGray * k;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//计算前景部分</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//以i为阈值分类，第一类总的概率</span></span><br><span class="line">        w1 += curGray;</span><br><span class="line">        u1tmp += curGray * k;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//求出第一类和第二类的平均灰度</span></span><br><span class="line">    u0 = u0tmp / w0;</span><br><span class="line">    u1 = u1tmp / w1;</span><br><span class="line">    <span class="comment">//求出整幅图像的平均灰度</span></span><br><span class="line">    u = u0tmp + u1tmp;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//计算类间方差</span></span><br><span class="line">    calctmp = w0 * <span class="built_in">pow</span>((u0 - u), <span class="number">2</span>) + w1 * <span class="built_in">pow</span>((u1 - u), <span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//更新最大类间方差，并设置阈值</span></span><br><span class="line">    <span class="keyword">if</span> (calctmp &gt; calcMax) &#123;</span><br><span class="line">      calcMax = calctmp;</span><br><span class="line">      calcval = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> calcval;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中值阈值"><a href="#中值阈值" class="headerlink" title="中值阈值"></a>中值阈值</h2><p>要实现自动阈值，方法就是求出图像的灰度直方图，直方图中找出中位数，然后根据中位数值设定一个标准差值，用中位数的值加上标准差来求出高低阈值。</p><p>实现思路：</p><ul><li>图像转灰度图</li><li>求出灰度直方图，并找到中位数</li><li>根据中位数和设定的sigma值求出高低阈值</li><li>使用Canny边缘检测</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求Mat的中位数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CvUtils::GetMatMidVal</span><span class="params">(Mat&amp; img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//判断如果不是单通道直接返回128</span></span><br><span class="line">  <span class="keyword">if</span> (img.<span class="built_in">channels</span>() &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">128</span>;</span><br><span class="line">  <span class="type">int</span> rows = img.rows;</span><br><span class="line">  <span class="type">int</span> cols = img.cols;</span><br><span class="line">  <span class="comment">//定义数组</span></span><br><span class="line">  <span class="type">float</span> mathists[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">  <span class="comment">//遍历计算0-255的个数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> row = <span class="number">0</span>; row &lt; rows; ++row) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> col = <span class="number">0</span>; col &lt; cols; ++col) &#123;</span><br><span class="line">      <span class="type">int</span> val = img.<span class="built_in">at</span>&lt;uchar&gt;(row, col);</span><br><span class="line">      mathists[val]++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> calcval = rows * cols / <span class="number">2</span>;</span><br><span class="line">  <span class="type">int</span> tmpsum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">255</span>; ++i) &#123;</span><br><span class="line">    tmpsum += mathists[i];</span><br><span class="line">    <span class="keyword">if</span> (tmpsum &gt; calcval) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高低阈值"><a href="#高低阈值" class="headerlink" title="高低阈值"></a>高低阈值</h2><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><p>通过设定默认sigma的值，求出高低阈值进行canny。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">GetMinMaxthreshold</span><span class="params">(Mat&amp; img, <span class="type">int</span>&amp; minval, <span class="type">int</span>&amp; maxval,<span class="type">int</span> type, <span class="type">float</span> sigma)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> midval;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">midval = <span class="built_in">getmatmidval</span>(img);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">midval = <span class="built_in">GetMatOTSU</span>(img);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算低阈值</span></span><br><span class="line">minval = <span class="built_in">saturate_cast</span>&lt;uchar&gt;((<span class="number">1.0</span> - sigma) * midval);</span><br><span class="line"><span class="comment">//计算高阈值</span></span><br><span class="line">maxval = <span class="built_in">saturate_cast</span>&lt;uchar&gt;((<span class="number">1.0</span> + sigma) * midval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getmatmidval</span><span class="params">(Mat&amp; img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (img.<span class="built_in">channels</span>() &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">int</span> rows = img.rows;</span><br><span class="line"><span class="type">int</span> cols = img.cols;</span><br><span class="line"><span class="comment">//定义数组</span></span><br><span class="line"><span class="type">float</span> mathists[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//遍历计算0-255的个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> row = <span class="number">0</span>; row &lt; rows; ++row) &#123;</span><br><span class="line">uchar* ptr = img.<span class="built_in">ptr</span>&lt;uchar&gt;(row);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> col = <span class="number">0</span>; col &lt; cols; ++col) &#123;</span><br><span class="line"><span class="type">int</span> val = *ptr;</span><br><span class="line">mathists[val]++;</span><br><span class="line">ptr++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> calval = rows * cols / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> tempsum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">255</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">tempsum += mathists[i];</span><br><span class="line"><span class="keyword">if</span> (tempsum &gt; calval) <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetMatOTSU</span><span class="params">(Mat&amp; img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (img.<span class="built_in">channels</span>() &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">int</span> rows = img.rows;</span><br><span class="line"><span class="type">int</span> cols = img.cols;</span><br><span class="line"><span class="comment">//定义数组</span></span><br><span class="line"><span class="type">float</span> mathists[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//遍历计算0-255的个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> row = <span class="number">0</span>; row &lt; rows; ++row) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> col = <span class="number">0</span>; col &lt; cols; ++col) &#123;</span><br><span class="line"><span class="type">int</span> val = img.<span class="built_in">at</span>&lt;uchar&gt;(row, col);</span><br><span class="line">mathists[val]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义灰度级像素在整个图像中的比例</span></span><br><span class="line"><span class="type">float</span> grayPro[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> matSize = rows * cols;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i) &#123;</span><br><span class="line">grayPro[i] = (<span class="type">float</span>)mathists[i] / (<span class="type">float</span>)matSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//大津法OTSU，前景与背景分割，计算出方差最大的灰度值</span></span><br><span class="line"><span class="type">int</span> calcval;</span><br><span class="line"><span class="type">int</span> calcMax = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i) &#123;</span><br><span class="line"><span class="type">float</span> w0 = <span class="number">0</span>, w1 = <span class="number">0</span>, u0tmp = <span class="number">0</span>, u1tmp = <span class="number">0</span>, u0 = <span class="number">0</span>, u1 = <span class="number">0</span>, u = <span class="number">0</span>, calctmp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">256</span>; ++k) &#123;</span><br><span class="line"><span class="type">float</span> curGray = grayPro[k];</span><br><span class="line"><span class="comment">//计算背景部分</span></span><br><span class="line"><span class="keyword">if</span> (k &lt;= i) &#123;</span><br><span class="line"><span class="comment">//以i为阈值分类，第一类总的概率</span></span><br><span class="line">w0 += curGray;</span><br><span class="line">u0tmp += curGray * k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算前景部分</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//以i为阈值分类，第一类总的概率</span></span><br><span class="line">w1 += curGray;</span><br><span class="line">u1tmp += curGray * k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求出第一类和第二类的平均灰度</span></span><br><span class="line">u0 = u0tmp / w0;</span><br><span class="line">u1 = u1tmp / w1;</span><br><span class="line"><span class="comment">//求出整幅图像的平均灰度</span></span><br><span class="line">u = u0tmp + u1tmp;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算类间方差</span></span><br><span class="line">calctmp = w0 * <span class="built_in">pow</span>((u0 - u), <span class="number">2</span>) + w1 * <span class="built_in">pow</span>((u1 - u), <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新最大类间方差，并设置阈值</span></span><br><span class="line"><span class="keyword">if</span> (calctmp &gt; calcMax) &#123;</span><br><span class="line">calcMax = calctmp;</span><br><span class="line">calcval = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> calcval;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GetMinMaxthreshold</span><span class="params">(Mat&amp; img, <span class="type">int</span>&amp; minval, <span class="type">int</span>&amp; maxval,<span class="type">int</span> type, <span class="type">float</span> sigma)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> midval;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">midval = <span class="built_in">getmatmidval</span>(img);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">midval = <span class="built_in">GetMatOTSU</span>(img);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算低阈值</span></span><br><span class="line">minval = <span class="built_in">saturate_cast</span>&lt;uchar&gt;((<span class="number">1.0</span> - sigma) * midval);</span><br><span class="line"><span class="comment">//计算高阈值</span></span><br><span class="line">maxval = <span class="built_in">saturate_cast</span>&lt;uchar&gt;((<span class="number">1.0</span> + sigma) * midval);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Mat src = <span class="built_in">imread</span>(<span class="string">&quot;1.png&quot;</span>, <span class="number">1</span>);</span><br><span class="line">Mat gray;</span><br><span class="line"><span class="built_in">cvtColor</span>(src, gray, COLOR_BGR2GRAY);</span><br><span class="line"><span class="built_in">GaussianBlur</span>(gray, gray, <span class="built_in">Size</span>(<span class="number">3</span>, <span class="number">3</span>), <span class="number">0.5</span>, <span class="number">0.5</span>);</span><br><span class="line"><span class="type">int</span> minthreshold, maxthreshold;</span><br><span class="line"><span class="built_in">GetMinMaxthreshold</span>(gray, minthreshold, maxthreshold,<span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line"><span class="type">int</span> minthreshold1, maxthreshold1;</span><br><span class="line"><span class="built_in">GetMinMaxthreshold</span>(gray, minthreshold1, maxthreshold1, <span class="number">1</span>, <span class="number">0.3</span>);</span><br><span class="line">Mat dst1, dst2;</span><br><span class="line"><span class="built_in">Canny</span>(gray, dst1, minthreshold, maxthreshold);</span><br><span class="line"><span class="built_in">Canny</span>(gray, dst2, minthreshold1, maxthreshold1);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;1&quot;</span>, dst1);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;2&quot;</span>, dst2);</span><br><span class="line"><span class="built_in">waitKey</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阈值 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的使用</title>
      <link href="/2023/03/13/%E6%95%99%E7%A8%8B/git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/03/13/%E6%95%99%E7%A8%8B/git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>git的简单使用，如何克隆、上传、创建分支、合并以及常见指令。</p><span id="more"></span><h2 id="上传的简单流程："><a href="#上传的简单流程：" class="headerlink" title="上传的简单流程："></a>上传的简单流程：</h2><p>1.登录github，创建一个仓库。</p><p>2.本地clone下来，将需要上传的项目文件全部放到克隆的文件夹里面。</p><p>3.cd到克隆下来的文件夹里面。</p><p>4.git add .将所有文件上传的缓存区</p><p>5.git commit -m “提交信息”提交信息自己填</p><p>6.git push -u origin main上传</p><h2 id="git-commit时报Author-identity-unknown错误"><a href="#git-commit时报Author-identity-unknown错误" class="headerlink" title="git commit时报Author identity unknown错误"></a>git commit时报Author identity unknown错误</h2><p> git config –global user.name “你的名字” </p><p> git config –global user.email “你的邮箱地址” </p><h2 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h2><h3 id="查看、添加、提交、删除、找回，重置修改文"><a href="#查看、添加、提交、删除、找回，重置修改文" class="headerlink" title="查看、添加、提交、删除、找回，重置修改文"></a>查看、添加、提交、删除、找回，重置修改文</h3><h4 id="查看文件diff"><a href="#查看文件diff" class="headerlink" title="查看文件diff"></a>查看文件diff</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">git help &lt;command&gt; # 显示command的help  </span><br><span class="line"></span><br><span class="line">git show # 显示某次提交的内容 git show $id</span><br><span class="line"></span><br><span class="line">git co -- &lt;file&gt; # 抛弃工作区修改</span><br><span class="line"></span><br><span class="line">git co . # 抛弃工作区修改</span><br><span class="line"></span><br><span class="line">git add &lt;file&gt; # 将工作文件修改提交到本地暂存区</span><br><span class="line"></span><br><span class="line">git add . # 将所有修改过的工作文件提交暂存区</span><br><span class="line"></span><br><span class="line">git rm &lt;file&gt; # 从版本库中删除文件</span><br><span class="line"></span><br><span class="line">git rm &lt;file&gt; --cached # 从版本库中删除文件，但不删除文件</span><br><span class="line"></span><br><span class="line">git reset &lt;file&gt; # 从暂存区恢复到工作文件</span><br><span class="line"></span><br><span class="line">git reset -- . # 从暂存区恢复到工作文件</span><br><span class="line"></span><br><span class="line">git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</span><br><span class="line"></span><br><span class="line">git ci &lt;file&gt; git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am &quot;some comments&quot;</span><br><span class="line"></span><br><span class="line">git ci --amend # 修改最后一次提交记录</span><br><span class="line"></span><br><span class="line">git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象</span><br><span class="line"></span><br><span class="line">git revert HEAD # 恢复最后一次提交的状态</span><br></pre></td></tr></table></figure><h4 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git log git log &lt;file&gt; # 查看该文件每次提交记录</span><br><span class="line"></span><br><span class="line">git log -p &lt;file&gt; # 查看每次详细修改内容的diff</span><br><span class="line"></span><br><span class="line">git log -p -2 # 查看最近两次详细修改内容的diff</span><br><span class="line"></span><br><span class="line">git log --stat #查看提交统计信息</span><br><span class="line"></span><br><span class="line">tig</span><br><span class="line"></span><br><span class="line">Mac上可以使用tig代替diff和log，brew install tig</span><br></pre></td></tr></table></figure><h3 id="Git-本地分支管理"><a href="#Git-本地分支管理" class="headerlink" title="Git 本地分支管理"></a>Git 本地分支管理</h3><h4 id="查看、切换、创建和删除分支"><a href="#查看、切换、创建和删除分支" class="headerlink" title="查看、切换、创建和删除分支"></a>查看、切换、创建和删除分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">git br -r # 查看远程分支</span><br><span class="line"></span><br><span class="line">git br &lt;new_branch&gt; # 创建新的分支</span><br><span class="line"></span><br><span class="line">git br -v # 查看各个分支最后提交信息</span><br><span class="line"></span><br><span class="line">git br --merged # 查看已经被合并到当前分支的分支</span><br><span class="line"></span><br><span class="line">git br --no-merged # 查看尚未被合并到当前分支的分支</span><br><span class="line"></span><br><span class="line">git co &lt;branch&gt; # 切换到某个分支</span><br><span class="line"></span><br><span class="line">git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去</span><br><span class="line"></span><br><span class="line">git co -b &lt;new_branch&gt; &lt;branch&gt; # 基于branch创建新的new_branch</span><br><span class="line"></span><br><span class="line">git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span><br><span class="line"></span><br><span class="line">git co $id -b &lt;new_branch&gt; # 把某次历史提交记录checkout出来，创建成一个分支</span><br><span class="line"></span><br><span class="line">git br -d &lt;branch&gt; # 删除某个分支</span><br><span class="line"></span><br><span class="line">git br -D &lt;branch&gt; # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="分支合并和reba"><a href="#分支合并和reba" class="headerlink" title="分支合并和reba"></a>分支合并和reba</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch&gt; # 将branch分支合并到当前分支</span><br><span class="line"></span><br><span class="line">git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交</span><br><span class="line"></span><br><span class="line">git rebase master &lt;branch&gt; # 将master rebase到branch，相当于：git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Git补丁管理-方便在多台机器上开发同步时用"><a href="#Git补丁管理-方便在多台机器上开发同步时用" class="headerlink" title="Git补丁管理(方便在多台机器上开发同步时用)"></a>Git补丁管理(方便在多台机器上开发同步时用)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch&gt; # 将branch分支合并到当前分支</span><br><span class="line"></span><br><span class="line">git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交</span><br><span class="line"></span><br><span class="line">git rebase master &lt;branch&gt; # 将master rebase到branch，相当于：git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Git暂存管"><a href="#Git暂存管" class="headerlink" title="Git暂存管"></a>Git暂存管</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git stash # 暂存</span><br><span class="line"></span><br><span class="line">git stash list # 列所有stash</span><br><span class="line"></span><br><span class="line">git stash apply # 恢复暂存的内容</span><br><span class="line"></span><br><span class="line">git stash drop # 删除暂存区</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Git远程分支管理"><a href="#Git远程分支管理" class="headerlink" title="Git远程分支管理"></a>Git远程分支管理</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git pull # 抓取远程仓库所有分支更新并合并到本地</span><br><span class="line"></span><br><span class="line">git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span><br><span class="line"></span><br><span class="line">git fetch origin # 抓取远程仓库更新</span><br><span class="line"></span><br><span class="line">git merge origin/master # 将远程主分支合并到本地当前分支</span><br><span class="line"></span><br><span class="line">git co --track origin/branch # 跟踪某个远程分支创建相应的本地分支</span><br><span class="line"></span><br><span class="line">git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt; # 基于远程分支创建本地分支，功能同上</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="git-push-push所有分支"><a href="#git-push-push所有分支" class="headerlink" title="git push # push所有分支"></a>git push # push所有分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git push origin master # 将本地主分支推到远程主分支</span><br><span class="line"></span><br><span class="line">git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</span><br><span class="line"></span><br><span class="line">git push origin &lt;local_branch&gt; # 创建远程分支， origin是远程仓库名</span><br><span class="line"></span><br><span class="line">git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; # 创建远程分支</span><br><span class="line"></span><br><span class="line">git push origin :&lt;remote_branch&gt; #先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Git远程仓库管"><a href="#Git远程仓库管" class="headerlink" title="Git远程仓库管"></a>Git远程仓库管</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git remote -v # 查看远程服务器地址和仓库名称</span><br><span class="line"></span><br><span class="line">git remote show origin # 查看远程服务器仓库状态</span><br><span class="line"></span><br><span class="line">git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址</span><br><span class="line"></span><br><span class="line">git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm &lt;repository&gt; # 删除远程仓库</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库</span><br><span class="line"></span><br><span class="line">scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上</span><br><span class="line"></span><br><span class="line">mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库</span><br><span class="line"></span><br><span class="line">git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址</span><br><span class="line"></span><br><span class="line">git push -u origin master # 客户端首次提交</span><br><span class="line"></span><br><span class="line">git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track</span><br><span class="line"></span><br><span class="line">git remote set-head origin master # 设置远程仓库的HEAD指向master分支</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="也可以命令设置跟踪远程库和本地库"><a href="#也可以命令设置跟踪远程库和本地库" class="headerlink" title="也可以命令设置跟踪远程库和本地库"></a>也可以命令设置跟踪远程库和本地库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream master origin/master</span><br><span class="line"></span><br><span class="line">git branch --set-upstream develop origin/develop</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOS编程</title>
      <link href="/2023/02/27/windows/dos%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/02/27/windows/dos%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>总结DOS常见命令，及用法。简单记录，没有深入学习，知识过了一遍脑子。</p><p>头好痒啊！！！！好像要涨知识了！！！</p><span id="more"></span><h3 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h3><p>简单来说，批处理程序就是 Windows 自带的脚本，可以在 cmd | powershell 中直接运行，若写成文件，后缀为 .bat </p><ol><li>cmd 与 powershel 不区分大小写</li><li>命令行的运算操作，类似于 PHP</li><li>DOS 是磁盘操作系统；命令提示符是 DOS 系统的界面中输入 DOS 命令的提示位置；cmd 是系统运行其自带 DOS 的命令；cmd.exe 是一个 16 位的 DOS 应用程序</li><li>PID 是 processid（进程号）；IM 是 imaginename（映像名称）</li><li>在 .bat 文件开头加上 <code>@echo off</code> 代表不输出描述</li><li>设置变量 <code>set a=10</code>，输出变量 <code>echo %a%</code>，设置变量表达式 <code>set /a b=%a%+1</code></li><li>可以通过软件将bat代码转为exe文件</li></ol><h3 id="简单演示"><a href="#简单演示" class="headerlink" title="简单演示"></a>简单演示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">:: 两个冒号表示 cmd 的注释</span><br><span class="line">rem 也表示 cmd 的注释</span><br><span class="line"># 一个井号表示 powershell 的注释</span><br><span class="line"></span><br><span class="line">@echo off关闭命令</span><br><span class="line"></span><br><span class="line">@echo off</span><br><span class="line">echo &quot;hello world&quot;</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">// set /a  + - * / %运算</span><br><span class="line">@echo off</span><br><span class="line">set /a var =1+2</span><br><span class="line">echo %var%</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h3 id="覆盖与追加"><a href="#覆盖与追加" class="headerlink" title="覆盖与追加"></a>覆盖与追加</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">覆盖</span><br><span class="line">echo &quot;hello world&quot; &gt; t.txt</span><br><span class="line"></span><br><span class="line">追加</span><br><span class="line">echo &quot;hello world&quot; &gt;&gt; t.txt</span><br><span class="line"></span><br><span class="line">查看内容</span><br><span class="line">type t.txt</span><br></pre></td></tr></table></figure><h3 id="多级命令"><a href="#多级命令" class="headerlink" title="多级命令"></a>多级命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">短路</span><br><span class="line">ipconfig || net user</span><br><span class="line">从第一个执行，直到执行正确停止，只执行第一个</span><br><span class="line"></span><br><span class="line">断路</span><br><span class="line">ipconfig &amp;&amp; net user</span><br><span class="line">从第一个执行，直到执行错误停止</span><br><span class="line"></span><br><span class="line">管道命令</span><br><span class="line">A | B  将A的输出，作为B的输入</span><br><span class="line">dir | find &quot;.txt&quot;     查找当前文件下所有.txt文件</span><br><span class="line">netstat -an | find &quot;ESTABLISHED&quot;  </span><br></pre></td></tr></table></figure><h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bat 文件内容:</span><br><span class="line">echo %1 %2</span><br><span class="line"></span><br><span class="line">poweshell 运行指令:</span><br><span class="line">.\test.bat Hello World!</span><br><span class="line">输出 Hello World!</span><br><span class="line"></span><br><span class="line">net user %1 %2 /add  添加账户 密码</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cmd 运行指令:</span><br><span class="line">年月日</span><br><span class="line">date</span><br><span class="line">输出 当前日期: 2021-09-27</span><br><span class="line">date /T</span><br><span class="line">输出 2021-09-27</span><br><span class="line"></span><br><span class="line">时分秒</span><br><span class="line">time</span><br><span class="line">输出 当前时间: 23:14:16.68</span><br><span class="line">time /T</span><br><span class="line">输出 23:14</span><br><span class="line"></span><br><span class="line">poweshell 运行指令:</span><br><span class="line">date</span><br><span class="line">输出 2021年9月27日 23:14:49</span><br></pre></td></tr></table></figure><h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start /?</span><br></pre></td></tr></table></figure><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">test.bat 文件内容:</span><br><span class="line">echo &quot;Hello &quot;</span><br><span class="line">call test2.bat</span><br><span class="line"></span><br><span class="line">test2.bat 文件内容:</span><br><span class="line">echo &quot;Wordl!&quot;</span><br><span class="line"></span><br><span class="line">poweshell 运行指令:</span><br><span class="line">.\test.bat</span><br><span class="line">输出 Hello World!</span><br><span class="line">不能进行参数传递</span><br></pre></td></tr></table></figure><h3 id="tasklist-taskill"><a href="#tasklist-taskill" class="headerlink" title="tasklist | taskill"></a>tasklist | taskill</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">tasklist | taskil获取当前状态运行进程的列表</span><br><span class="line">tasklist</span><br><span class="line"></span><br><span class="line">获取指定要连接的远程系统的 tasklist</span><br><span class="line">tasklist /S 192.168.0.1 /U admin /S password</span><br><span class="line"></span><br><span class="line">其他参数：/FI 用于筛选 /FO 输出指定格数</span><br><span class="line">tasklist /FI &quot;PID eq 3232&quot; /FO csv &gt; a.csv</span><br><span class="line"></span><br><span class="line">taskkill 是关闭进程</span><br><span class="line">taskkill /IM notepad.exe</span><br><span class="line"></span><br><span class="line">PID可以通过tasklist 查看</span><br><span class="line">taskkill /s ip /u 用户名 /p 密码 /FI &quot;PID eq 860&quot; /F</span><br></pre></td></tr></table></figure><h3 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">文件生成树</span><br><span class="line">tree</span><br><span class="line">输出</span><br><span class="line">C:.</span><br><span class="line">├───a</span><br><span class="line">├───b</span><br><span class="line">└───c</span><br><span class="line"></span><br><span class="line">换一种文件生成树</span><br><span class="line">tree /A</span><br><span class="line">输出</span><br><span class="line">C:.</span><br><span class="line">+---a</span><br><span class="line">+---b</span><br><span class="line">\---c</span><br><span class="line"></span><br><span class="line">详细文件生成树</span><br><span class="line">tree /F</span><br><span class="line">输出</span><br><span class="line">C:.</span><br><span class="line">├───a</span><br><span class="line">│       a.txt</span><br><span class="line">│</span><br><span class="line">├───b</span><br><span class="line">└───c</span><br></pre></td></tr></table></figure><h3 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">打开 GUI 执行远程主机关机的操作</span><br><span class="line">shutdown /i</span><br><span class="line"></span><br><span class="line">关闭本地主机</span><br><span class="line">shutdown /p</span><br></pre></td></tr></table></figure><h3 id="at"><a href="#at" class="headerlink" title="at"></a>at</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Copy某个时间点执行某个作业</span><br><span class="line">at 21:56 &quot;notepad.exe&quot;</span><br><span class="line"></span><br><span class="line">删除某个作业  2是任务id号</span><br><span class="line">at 2 /delete</span><br><span class="line"></span><br><span class="line">每天都在某个位置执行某个作业，22:00时间和后面任务的位置是可变</span><br><span class="line">at 22:00 /every:M,T,W,Th,F,S,Su C:\Users\14805\desktop\payload.exe</span><br></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Copycmd 运行指令:</span><br><span class="line">显示当前环境变量</span><br><span class="line">set</span><br><span class="line"></span><br><span class="line">输出环境变量值</span><br><span class="line">echo %OS%</span><br><span class="line">输出 Windows_NT</span><br></pre></td></tr></table></figure><h3 id="操作文件夹"><a href="#操作文件夹" class="headerlink" title="操作文件夹"></a>操作文件夹</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">dir  查看文件夹与文件</span><br><span class="line"></span><br><span class="line">创建文件夹 mkdir</span><br><span class="line">mkdir test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">重命名文件夹 ren</span><br><span class="line">ren test test1</span><br><span class="line"></span><br><span class="line">将 a 文件夹中的文件复制到 b 文件夹</span><br><span class="line">copy a b</span><br><span class="line"></span><br><span class="line">删除文件夹 rmdir</span><br><span class="line">rmdir test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">删除文件 del 后面跟绝对路径</span><br><span class="line">del *.txt</span><br><span class="line"></span><br><span class="line">重命名文件</span><br><span class="line">move test.txt test1.txt</span><br><span class="line"></span><br><span class="line">移动文件</span><br><span class="line">move C:\a\test.txt C:\b\test.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Copy1.</span><br><span class="line">if () else ()</span><br><span class="line"></span><br><span class="line">2.</span><br><span class="line">if (</span><br><span class="line">) else (</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">3. 循环文件夹</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">for</span> /d %%名称 <span class="keyword">in</span> (路径/*) <span class="keyword">do</span> 具体操作</span></span><br><span class="line"></span><br><span class="line">.bat文件内容：打印当前文件夹下的所有文件夹</span><br><span class="line">for /d %%a in (*) do echo %%a</span><br><span class="line"></span><br><span class="line">4.循环文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">for</span> /r <span class="string">&quot;目录文件&quot;</span> %%名称 <span class="keyword">in</span> (匹配规则，例如 *.py) <span class="keyword">do</span> 具体操作</span></span><br><span class="line"></span><br><span class="line">.bat文件内容：打印当前文件夹下的所有.py文件</span><br><span class="line">for /r &quot;C:\Users\14805\Desktop\abc&quot; %%a in (*.py) do echo %%a</span><br><span class="line"></span><br><span class="line">5.循环数字</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">for</span> /L %%a <span class="keyword">in</span> (start,step,end) <span class="keyword">do</span> 具体操作</span></span><br><span class="line"></span><br><span class="line">.bat文件内容：ping 168.0.0.1 至 168.0.0.20（传入参数 %1 等于 168.0.0） </span><br><span class="line">for /L %%a in (1,1,20) do ping %1.%%a</span><br><span class="line"></span><br><span class="line">6.循环文件中的内容</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">for</span> /F %%a <span class="keyword">in</span> (文件名) <span class="keyword">do</span> 具体操作</span></span><br><span class="line"></span><br><span class="line">.bat文件内容：打印test.bat中的内容</span><br><span class="line">for /F %%a in (test.bat) do echo %%a</span><br></pre></td></tr></table></figure><h3 id="用户操作命令"><a href="#用户操作命令" class="headerlink" title="用户操作命令"></a>用户操作命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">net user 查看所有用户</span><br><span class="line">net uset 具体用户    查看对应详细信息</span><br><span class="line"></span><br><span class="line">用户组</span><br><span class="line">net localgroup </span><br></pre></td></tr></table></figure><h3 id="net-user"><a href="#net-user" class="headerlink" title="net user"></a>net user</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">查看所有用户</span><br><span class="line">net user</span><br><span class="line"></span><br><span class="line">查看帮助</span><br><span class="line">net user /?</span><br><span class="line"></span><br><span class="line">查看帮助完整版</span><br><span class="line">net user /help</span><br></pre></td></tr></table></figure><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键#"></a>常用快捷键<a href="https://www.cnblogs.com/CourserLi/p/15344685.html#309393526">#</a></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Copy清屏</span><br><span class="line">cls</span><br><span class="line"></span><br><span class="line">显示当前目录</span><br><span class="line">dir (cmd | powershell)</span><br><span class="line">ls (powershell)</span><br><span class="line"></span><br><span class="line">打开当前文件夹</span><br><span class="line">start .</span><br><span class="line"></span><br><span class="line">查找文件</span><br><span class="line">dir *.txt (cmd | powershell)</span><br><span class="line"></span><br><span class="line">显示当前路径</span><br><span class="line">pwd (powershell)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ping-telnet"><a href="#ping-telnet" class="headerlink" title="ping  telnet"></a>ping  telnet</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">检测本地网卡是否异常</span><br><span class="line">ping 127.0.0.1</span><br><span class="line">测试该ip最大缓存</span><br><span class="line">ping -l 111111111111111111111111   ip</span><br><span class="line">一直ping直到主机不在接收为止</span><br><span class="line">ping -l 65500 -t 192.168.0.1</span><br><span class="line"></span><br><span class="line">连接对应主机的端口</span><br><span class="line">telnet ip 端口号 </span><br></pre></td></tr></table></figure><h3 id="网络路由信息"><a href="#网络路由信息" class="headerlink" title="网络路由信息"></a>网络路由信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">查看本机到对应ip经过多少路由</span><br><span class="line">tracert ip</span><br><span class="line"></span><br><span class="line">查看本机ip配置信息</span><br><span class="line">ipconfig</span><br><span class="line">释放 重新获取</span><br><span class="line">ipconfig /release </span><br><span class="line">ipconfig /renew</span><br><span class="line"></span><br><span class="line">nslookup   可以看到你的默认服务器 ip 地址；</span><br><span class="line">输入ping+空格+你想要获得的域名，例如ping www.baidu.com，我们可以看到使用ping发送了探测报文，14.215.177.38回复了我们，说明该服务器ip地址离当前主机最近(主机离服务器距离越远，传输时间越长，当有多个服务器时，一般会选择最近的那一个服务器);</span><br><span class="line">输入你想要查询的域名，例如www.baidu.com，我们可以看到当前百度有两个ip地址;</span><br><span class="line"></span><br><span class="line">显示 修改ip到mac地址的地址转换表 arp协议</span><br><span class="line">arp -a</span><br></pre></td></tr></table></figure><h3 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">rem 演示if-else结构,()代表代码块</span><br><span class="line"></span><br><span class="line">set v=hello</span><br><span class="line">if %v%==hello (echo ok) else (echo no)</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h3 id="判断文件是否存在exist"><a href="#判断文件是否存在exist" class="headerlink" title="判断文件是否存在exist"></a>判断文件是否存在exist</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">if exist 文件绝对路径 () else ()</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">判断是否存在并删除</span><br><span class="line">@echo off</span><br><span class="line">if exist 文件绝对路径(</span><br><span class="line">del 文件绝对路径</span><br><span class="line">) else (</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h3 id="for遍历"><a href="#for遍历" class="headerlink" title="for遍历"></a>for遍历</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/d 针对文件夹</span><br><span class="line">@echo off</span><br><span class="line">for /d %%a in (路径) do ()</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">/r针对文件</span><br><span class="line">for /r 路径 %%v in (匹配规则) do ()</span><br><span class="line"></span><br><span class="line">/l针对数字</span><br><span class="line">for /L %%v in(start,step,end) do ()</span><br><span class="line"></span><br><span class="line">bat文件内容</span><br><span class="line">@echo off</span><br><span class="line">for /L %%v in(1,1,20) do ping %1.%%v</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">cmd 对应bat文件跟%1参数192.168.0   自动ping192.168.0.1到20</span><br><span class="line"></span><br><span class="line">/f 遍历文件，对应文件每一行</span><br><span class="line">for /f %%v in (对应文件) do (操作)</span><br></pre></td></tr></table></figure><h3 id="goto实现死循环"><a href="#goto实现死循环" class="headerlink" title="goto实现死循环"></a>goto实现死循环</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cd 指定目录</span><br><span class="line"></span><br><span class="line">:loop</span><br><span class="line">md virus</span><br><span class="line">cd virus</span><br><span class="line">goto loop</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h3 id="计算机信息展示"><a href="#计算机信息展示" class="headerlink" title="计算机信息展示"></a>计算机信息展示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">echo. &gt; log.txt</span><br><span class="line">echo Lof File &gt;&gt; log.txt</span><br><span class="line">echo. &gt; log.txt</span><br><span class="line">echo User : %username% &gt;&gt; log.txt</span><br><span class="line">Date /t &gt;&gt; log.txt</span><br><span class="line">Time /t &gt;&gt; log.txt</span><br><span class="line">echo. &gt;&gt; log.txt</span><br><span class="line">echo Process Ran by %username% &gt;&gt; log.txt</span><br><span class="line">echo. &gt;&gt; log.txt</span><br><span class="line">tasklist &gt;&gt; log.txt</span><br><span class="line">echo. &gt;&gt; log.txt</span><br><span class="line">echo Network Activities &gt;&gt; log.txt</span><br><span class="line">netstat -s &gt;&gt; log.txt</span><br><span class="line">ipconfig /all &gt;&gt; log.txt</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Log File - Lo36r<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">u</span>&gt;</span> Log File<span class="tag">&lt;/<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span>&gt;</span>This Log file is created by <span class="tag">&lt;<span class="name">b</span>&gt;</span>Lo36r<span class="tag">&lt;/<span class="name">b</span>&gt;</span> for monitoring System Actiivities!<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;log.txt&quot;</span>&gt;</span>Click here to view the Log File<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="交互操作"><a href="#交互操作" class="headerlink" title="交互操作"></a>交互操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">echo 1.a</span><br><span class="line">echo 2.b</span><br><span class="line">echo 3.c</span><br><span class="line">echo 4.d</span><br><span class="line"></span><br><span class="line">:first</span><br><span class="line">echo Enter your option:</span><br><span class="line">rem set /p 指从键盘输入</span><br><span class="line">set /p opt=</span><br><span class="line">if %opt%==1 goto one</span><br><span class="line">if %opt%==2 goto two</span><br><span class="line">if %opt%==3 goto three</span><br><span class="line">if %opt%==4 goto four</span><br><span class="line">echo Invalid option</span><br><span class="line">goto first</span><br><span class="line"></span><br><span class="line">:one</span><br><span class="line">echo you choise one</span><br><span class="line">pause</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">:two</span><br><span class="line">echo you choise two</span><br><span class="line">pause</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">:three</span><br><span class="line">echo you choise three</span><br><span class="line">pause</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">:four</span><br><span class="line">echo you choise four</span><br><span class="line">pause</span><br><span class="line">exit</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DOS编程 </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机视觉面试</title>
      <link href="/2022/09/20/%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E9%9D%A2%E8%AF%95/"/>
      <url>/2022/09/20/%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>总结面试被拷打的内容！！！！</p><span id="more"></span><p>1.IOU、GIOU、DIOU、CIOU</p><p><img src="/y-jt/y-jt.github.io/2022/09/20/%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E9%9D%A2%E8%AF%95/Typora\图像\1663682184850.png" alt="1663682184850">。</p><p><img src="/y-jt/y-jt.github.io/2022/09/20/%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E9%9D%A2%E8%AF%95/Typora\图像\1663682269741.png" alt="1663682269741">，C为最小包围两个框的大框的面积</p><p><img src="/y-jt/y-jt.github.io/2022/09/20/%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E9%9D%A2%E8%AF%95/Typora\图像\1663683962728.png" alt="1663683962728">，最后分子是两框中心点欧式距离的平方，分母是最小包围框对角线长度的平方。</p><p><img src="/y-jt/y-jt.github.io/2022/09/20/%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E9%9D%A2%E8%AF%95/Typora\图像\1663684149621.png" alt="1663684149621">，<img src="/y-jt/y-jt.github.io/2022/09/20/%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E9%9D%A2%E8%AF%95/Typora\图像\1663684194203.png" alt="1663684194203">，<img src="/y-jt/y-jt.github.io/2022/09/20/%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E9%9D%A2%E8%AF%95/Typora\图像\1663684220911.png" alt="1663684220911">，v度量两框宽高比的一致性，a权重函数</p><p>2.NMS</p><p>NMS就是非极大值抑制，当神经网络输出时，一个类别包含多个box，NMS就是就box按照置信度降序排序后，先保存第一个box，然后计算第一个box与后续box之间iou得分满足阈值则保留，然后对除第一个外后续保留的box重复此操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">iou</span>(<span class="params">box,boxes,isMin=<span class="literal">False</span></span>):<span class="comment">#计算两个框的交并比</span></span><br><span class="line">    <span class="comment">#box 的面积</span></span><br><span class="line">    box_area=(box[<span class="number">2</span>]-box[<span class="number">0</span>])*(box[<span class="number">3</span>]-box[<span class="number">1</span>])<span class="comment">#box以多行4列存储，分别是左上角X Y 右下角 X Y</span></span><br><span class="line">    boxes_area=(boxes[:,<span class="number">2</span>]-boxes[:,<span class="number">0</span>])*(boxes[:,<span class="number">3</span>]-boxes[:,<span class="number">1</span>])<span class="comment">#列-列，在分别相乘求</span></span><br><span class="line">    <span class="comment">#分别取两个框左上角坐标X和Y中最大的值，右下角XY最小值</span></span><br><span class="line">    <span class="comment">#交集</span></span><br><span class="line">    xx1=torch.maximum(box[<span class="number">0</span>],boxes[:,<span class="number">0</span>])</span><br><span class="line">    yy1=torch.maximum(box[<span class="number">1</span>],boxes[:,<span class="number">1</span>])</span><br><span class="line">    xx2=torch.minimum(box[<span class="number">2</span>],boxes[:,<span class="number">2</span>])</span><br><span class="line">    yy2=torch.minimum(box[<span class="number">3</span>],boxes[:,<span class="number">3</span>])</span><br><span class="line">    </span><br><span class="line">    w,h=torch.maximum(torch.Tensor([<span class="number">0</span>]),xx2-xx1),torch.maximum(torch.Tensor([<span class="number">0</span>]),yy2-yy1)</span><br><span class="line">    ovr_area=w*h</span><br><span class="line">    <span class="keyword">if</span> isMin:</span><br><span class="line">        <span class="keyword">return</span> ovr_area/torch.<span class="built_in">min</span>(box_area,boxes_area)<span class="comment">#返回的iou是通过交集/最小面积</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> ovr_area/(box_area+boxes_area-ovr_area)<span class="comment">#交集/并集</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#nms</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nms</span>(<span class="params">boxes,thresh=<span class="number">0.3</span>,isMin=<span class="literal">False</span></span>):<span class="comment">#神经网络输出包含的box包含5个值，有一个置信度</span></span><br><span class="line">    new_boxes=boxes[boxes[:,<span class="number">0</span>].argsort(descending=<span class="literal">True</span>)]<span class="comment">#将置信度按降序排序</span></span><br><span class="line">    keep_boxes=[]</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(new_boxes)&gt;<span class="number">0</span>:</span><br><span class="line">        _box=new_boxes[<span class="number">0</span>]</span><br><span class="line">        keep_boxes.append(_box)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(new_boxes)&gt;<span class="number">1</span>:</span><br><span class="line">            _boxes=new_boxes[<span class="number">1</span>:]</span><br><span class="line">            new_boxes=_boxes[torch.where(iou(_box,_boxes,isMin)&lt;thresh)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> torch.stack(keep_boxes)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">        <span class="comment">#box=torch.tensor([0,0,4,4])</span></span><br><span class="line">        <span class="comment">#boxes=torch.tensor([[4,4,5,5],[1,1,5,5]])</span></span><br><span class="line">        <span class="comment">#print(iou(box,boxes))</span></span><br><span class="line"></span><br><span class="line">        boxes=torch.tensor([[<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">10</span>],[<span class="number">0.9</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">11</span>],[<span class="number">0.4</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">12</span>]])</span><br><span class="line">        <span class="built_in">print</span>(nms(boxes,<span class="number">0.1</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LC刷题</title>
      <link href="/2022/08/08/%E9%9D%A2%E8%AF%95/LC%E5%88%B7%E9%A2%98/"/>
      <url>/2022/08/08/%E9%9D%A2%E8%AF%95/LC%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>LeetCode刷题，遇到的知识点与解题。</p><p>牛客刷题，遇到的知识点与解题。</p><span id="more"></span><h2 id="题543-二叉树的直径"><a href="#题543-二叉树的直径" class="headerlink" title="题543.二叉树的直径"></a>题543.二叉树的直径</h2><p>二叉树直径长度&#x3D;树中任意两结点最短路径的最大值。</p><p>树的深度即是层数。</p><p>两结点之间的路径长度&#x3D;他们之间边的数目。</p><p>递归函数三要素：1.子问题与原问题做同样的事。2.需要一个让递归结束的出口。3.递归表达式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用到深度优先搜索</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> ans;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">depth</span><span class="params">(TreeNode* rt)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rt==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> L=<span class="built_in">depth</span>(rt-&gt;left);</span><br><span class="line">        <span class="type">int</span> R=<span class="built_in">depth</span>(rt-&gt;right);</span><br><span class="line">        ans = <span class="built_in">max</span>(ans,L+R+<span class="number">1</span>);#记录最大的路径长度</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(L,R)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">diameterOfBinaryTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        ans =<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">depth</span>(root);</span><br><span class="line">        <span class="keyword">return</span> ans<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：最长公共子串"><a href="#题：最长公共子串" class="headerlink" title="题：最长公共子串"></a>题：最长公共子串</h2><p> 动态规划算法的基本思想是：将待求解的问题分解成若干个相互联系的子问题，先求解子问题，然后从这些子问题的解得到原问题的解；对于重复出现的子问题，只在第一次遇到的时候对它进行求解，并把答案保存起来，让以后再次遇到时直接引用答案，不必重新求解。</p><p><img src="/y-jt/y-jt.github.io/2022/08/08/%E9%9D%A2%E8%AF%95/LC%E5%88%B7%E9%A2%98/Typora\图像\1659983809704.png" alt="1659983809704"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//blog.csdn.net/BShanj/article/details/113817328</span></span><br><span class="line"><span class="comment">//二维容器  </span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">table</span>(size1, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(size2, <span class="number">0</span>));<span class="comment">//行:size1,列:size2用0填充</span></span><br><span class="line"><span class="comment">//三维 容器</span></span><br><span class="line"><span class="comment">//长宽高：2*3*5 </span></span><br><span class="line">vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; <span class="built_in">cube</span>(<span class="number">5</span>, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(<span class="number">3</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>, <span class="number">0</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态规划</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">LCS</span><span class="params">(string str1, string str2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//dp[i][j]表示到str1第i个个到str2第j个为止的公共子串长度</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">dp</span>(str1.<span class="built_in">length</span>() + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(str2.<span class="built_in">length</span>() + <span class="number">1</span>, <span class="number">0</span>)); </span><br><span class="line">        <span class="type">int</span> max = <span class="number">0</span>;<span class="comment">//记录最大长度</span></span><br><span class="line">        <span class="type">int</span> pos = <span class="number">0</span>;<span class="comment">//记录最大长度子串的最后一个元素下标</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= str1.<span class="built_in">length</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= str2.<span class="built_in">length</span>(); j++)&#123;</span><br><span class="line">                <span class="comment">//如果该两位相同</span></span><br><span class="line">                <span class="keyword">if</span>(str1[i - <span class="number">1</span>] == str2[j - <span class="number">1</span>])&#123; </span><br><span class="line">                    <span class="comment">//则增加长度 dp[0][0] = 0</span></span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>; </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123; </span><br><span class="line">                    <span class="comment">//该位置为0</span></span><br><span class="line">                    dp[i][j] = <span class="number">0</span>; </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//更新最大长度</span></span><br><span class="line">                <span class="keyword">if</span>(dp[i][j] &gt; max)&#123; </span><br><span class="line">                    max = dp[i][j];</span><br><span class="line">                    pos = i - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str1.<span class="built_in">substr</span>(pos - max + <span class="number">1</span>, max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  双指针  先用str1中第一个元素开始长度为1的子串  去str2中查找  找到了子串元素个数+1，还是str1中的第一个元素开始  继续查找··· </span></span><br><span class="line"><span class="comment">           没找到用str1中第二个元素开始的长度为前一次匹配长度-1，为0时长度为1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">string <span class="title">LCS</span><span class="params">(string str1, string str2)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> first = <span class="number">0</span>, second = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">string res;</span><br><span class="line"><span class="keyword">while</span> (second &lt; str1.<span class="built_in">size</span>()) &#123;</span><br><span class="line">string subStr = str1.<span class="built_in">substr</span>(first, second - first + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//string::npos  表示不存在的位置，在此处就是表示str2没有与substr相同的子串。</span></span><br><span class="line"><span class="keyword">if</span> (str2.<span class="built_in">find</span>(subStr) != string::npos) &#123;</span><br><span class="line"><span class="keyword">if</span> (subStr.<span class="built_in">size</span>() &gt; maxLen) &#123;</span><br><span class="line">maxLen = subStr.<span class="built_in">size</span>();</span><br><span class="line">res = subStr;</span><br><span class="line">&#125;</span><br><span class="line">second++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (second == first) &#123;</span><br><span class="line">second ++;</span><br><span class="line">first ++;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (first &lt; second) &#123;</span><br><span class="line">first ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题：数组中重复的数字"><a href="#题：数组中重复的数字" class="headerlink" title="题：数组中重复的数字"></a>题：数组中重复的数字</h2><p> 哈希表是一种根据关键码（key）直接访问值（value）的一种数据结构。而这种直接访问意味着只要知道key就能在O(1)时间内得到value，因此哈希表常用来统计频率、快速检验某个元素是否出现过等。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param numbers int整型vector </span></span><br><span class="line"><span class="comment">     * @return int整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">duplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; numbers)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 哈希表</span></span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="comment">//遍历数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numbers.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="comment">//如果没有出现过就加入哈希表</span></span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">find</span>(numbers[i]) == mp.<span class="built_in">end</span>())</span><br><span class="line">                mp[numbers[i]]++;</span><br><span class="line">            <span class="comment">//否则就是重复数字</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> numbers[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有重复</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：二维数组中查找是否存在数字"><a href="#题：二维数组中查找是否存在数字" class="headerlink" title="题：二维数组中查找是否存在数字"></a>题：二维数组中查找是否存在数字</h2><p>二维数组从左到右 从上到下  依次增大</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> target, vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(array.<span class="built_in">size</span>()==<span class="number">0</span> || array[<span class="number">0</span>].<span class="built_in">size</span>()==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = array.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span> &amp;&amp; j&lt;=array[<span class="number">0</span>].<span class="built_in">size</span>()<span class="number">-1</span>;)&#123;</span><br><span class="line">            <span class="comment">//从数组的最左下角开始查找，大了向上移动，小了向右移动</span></span><br><span class="line">            <span class="keyword">if</span>(array[i][j] &gt; target) i--; </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(array[i][j]&lt;target) j++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：替换字符串中的空格"><a href="#题：替换字符串中的空格" class="headerlink" title="题：替换字符串中的空格"></a>题：替换字符串中的空格</h2><p>将字符串中的空格替换成%20</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">replaceSpace</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//查找字符串中的空格   将空格位置的一个元素替换成%20</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">&#x27; &#x27;</span>)s.<span class="built_in">replace</span>(i, <span class="number">1</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">replaceSpace</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//查找字符串中的空格  将空格替换成%   并在后面插入20</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span>(s[i]==<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               s[i]=<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">               s.<span class="built_in">insert</span>(i+<span class="number">1</span>, <span class="string">&quot;20&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：从尾到头打印单链表"><a href="#题：从尾到头打印单链表" class="headerlink" title="题：从尾到头打印单链表"></a>题：从尾到头打印单链表</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span>) <span class="keyword">return</span> &#123;&#125;;<span class="comment">//判断特殊情况</span></span><br><span class="line">        ListNode* p=head;</span><br><span class="line">        <span class="comment">//统计链表元素的个数</span></span><br><span class="line">        <span class="keyword">while</span> (p)&#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从头到尾方向填入数组</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(len)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            arr[i] = head-&gt;val;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：重建二叉树"><a href="#题：重建二叉树" class="headerlink" title="题：重建二叉树"></a>题：重建二叉树</h2><p>根据二叉树的前序遍历序列和中序遍历序列，重建该二叉树，并返回根节点</p><p>两个遍历都没有重复的元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前序遍历第一个元素即是根节点，中序遍历根节点左边即是根节点的左子树，右边是右子树</span></span><br><span class="line"><span class="comment">//将前序和中序遍历结果   不断分为左右子树   填进新二叉树</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">reConstructBinaryTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt; pre,vector&lt;<span class="type">int</span>&gt; vin)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> vinlen = vin.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(vinlen == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; pre_left, pre_right, vin_left, vin_right;</span><br><span class="line">        <span class="comment">//创建根节点</span></span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(pre[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">//找到根节点再中序遍历中的位置</span></span><br><span class="line">        <span class="type">int</span> gen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; vinlen; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vin[i] == pre[<span class="number">0</span>])&#123;</span><br><span class="line">                gen = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到在左边的结点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; gen; i++)&#123;</span><br><span class="line">            vin_left.<span class="built_in">push_back</span>(vin[i]);</span><br><span class="line">            pre_left.<span class="built_in">push_back</span>(pre[i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到在右边的结点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = gen + <span class="number">1</span>; i &lt; vinlen; i++)&#123;</span><br><span class="line">            vin_right.<span class="built_in">push_back</span>(vin[i]);</span><br><span class="line">            pre_right.<span class="built_in">push_back</span>(pre[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//递归,利用返回值来插入，妙的离谱</span></span><br><span class="line">        root-&gt;left = <span class="built_in">reConstructBinaryTree</span>(pre_left, vin_left);</span><br><span class="line">        root-&gt;right = <span class="built_in">reConstructBinaryTree</span>(pre_right, vin_right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：反转链表"><a href="#题：反转链表" class="headerlink" title="题：反转链表"></a>题：反转链表</h2><p>没有头结点的单链表，将它方向</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList</span><span class="params">(ListNode* pHead)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pHead==<span class="literal">NULL</span> || pHead-&gt;next==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> pHead;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* ans = <span class="built_in">ReverseList</span>(pHead-&gt;next);</span><br><span class="line">        pHead-&gt;next-&gt;next=pHead;</span><br><span class="line">        pHead-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：找到二叉树指定结点在中序结果的下一结点位置"><a href="#题：找到二叉树指定结点在中序结果的下一结点位置" class="headerlink" title="题：找到二叉树指定结点在中序结果的下一结点位置"></a>题：找到二叉树指定结点在中序结果的下一结点位置</h2><p>二叉树不仅有左右儿子指针，还拥有返回父节点的指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中序遍历结果，下一元素位置一定在当前元素第一个右儿子（如果右儿子存在）的最左边的元素</span></span><br><span class="line"><span class="comment">//当前结点在其父节点左边，则是当前元素的第一个父节点</span></span><br><span class="line"><span class="comment">//当前结点在其父节点右边，则是最上面的父节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeLinkNode* <span class="title">GetNext</span><span class="params">(TreeLinkNode* pNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pNode == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        TreeLinkNode* pret = pNode;</span><br><span class="line">        <span class="keyword">if</span> (pNode-&gt;right)&#123;</span><br><span class="line">            pret = pNode-&gt;right;</span><br><span class="line">            <span class="keyword">while</span>(pret-&gt;left)&#123;</span><br><span class="line">                pret = pret-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> pret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(pNode-&gt;next)&#123;</span><br><span class="line">            pret = pNode-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(pret-&gt;left == pNode)</span><br><span class="line">                <span class="keyword">return</span> pret;</span><br><span class="line">            pNode = pNode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：用两个栈实现队列操作"><a href="#题：用两个栈实现队列操作" class="headerlink" title="题：用两个栈实现队列操作"></a>题：用两个栈实现队列操作</h2><p>栈：先进后出；队列：先进先出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先将所有元素写进stack1，再将全部元素取出放入stack2，并将stack2的第一个元素返回并删除</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> node)</span> </span>&#123;</span><br><span class="line">        stack1.<span class="built_in">push</span>(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stack2.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                <span class="type">int</span> tem = stack1.<span class="built_in">top</span>();</span><br><span class="line">                stack1.<span class="built_in">pop</span>();</span><br><span class="line">                stack2.<span class="built_in">push</span>(tem);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = stack2.<span class="built_in">top</span>();</span><br><span class="line">        stack2.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stack1;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stack2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：-斐波那契数列"><a href="#题：-斐波那契数列" class="headerlink" title="题： 斐波那契数列"></a>题： 斐波那契数列</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//暴力递归</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span> || n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">Fibonacci</span>(n<span class="number">-1</span>)+<span class="built_in">Fibonacci</span>(n<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//使用两个变量记录当值和前一个值</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span> || n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> dp1=<span class="number">1</span>,dp2=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="comment">//通过位运算判断奇偶性,奇数的二进制码最后一位为1，与i%2!=0相同</span></span><br><span class="line">            <span class="keyword">if</span>((i&amp;<span class="number">1</span>)==<span class="number">1</span>)  dp1+=dp2;</span><br><span class="line">            <span class="keyword">else</span>  dp2+=dp1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((n &amp; <span class="number">1</span>)==<span class="number">1</span>) <span class="keyword">return</span> dp1;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> dp2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：旋转数组中的最小数字"><a href="#题：旋转数组中的最小数字" class="headerlink" title="题：旋转数组中的最小数字"></a>题：旋转数组中的最小数字</h2><p>有一个长度为 n 的非降序数组，比如[1,2,3,4,5]，将它进行旋转，即把一个数组最开始的若干个元素搬到数组的末尾，变成一个旋转数组，比如变成了[3,4,5,1,2]，或者[4,5,1,2,3]这样的。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用二分法，由于是通过升序数组旋转得到，若第一个元素大于最后一个元素，则最小数字就是第一个元素</span></span><br><span class="line"><span class="comment">//通过中间数字与末尾数字比较，中间数字大，则将答案锁定在中间以后的元素中</span></span><br><span class="line"><span class="comment">//中间数字下，则把答案定位在第一个元素到中间元素之间</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minNumberInRotateArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt; rotateArray)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rotateArray.<span class="built_in">size</span>()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>,right=rotateArray.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(rotateArray[left]&lt;rotateArray[right])&#123;</span><br><span class="line">                <span class="keyword">return</span> rotateArray[left];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> mid = left + (right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(rotateArray[mid]&lt;rotateArray[right])&#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(rotateArray[mid]&gt;rotateArray[right])&#123;</span><br><span class="line">                left = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rotateArray[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：矩阵中的路径"><a href="#题：矩阵中的路径" class="headerlink" title="题：矩阵中的路径"></a>题：矩阵中的路径</h2><p> 用来判断在一个n乘m的矩阵中是否存在一条包含某长度为len的字符串所有字符的路径 。输入：[[a,b,c,e],[s,f,c,s],[a,d,e,e]],”abcced”  返回值为true</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param matrix char字符型vector&lt;vector&lt;&gt;&gt; </span></span><br><span class="line"><span class="comment">     * @param word string字符串 </span></span><br><span class="line"><span class="comment">     * @return bool布尔型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">hasPath</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt; &gt;&amp; matrix, string word)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span> (word == <span class="string">&quot;&quot;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> m = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = m &gt; <span class="number">0</span> ? matrix[<span class="number">0</span>].<span class="built_in">size</span>() : <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">memo</span>(m, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">false</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i ) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j ) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">hasPath</span>(matrix, memo, word, <span class="number">0</span>, i, j)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasPath</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; matrix, vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt;&amp; memo, string word, <span class="type">int</span> index, <span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (word[index] != matrix[i][j]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (index + <span class="number">1</span> == word.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        memo[i][j] = <span class="literal">true</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; direction = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">bool</span> res = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 四个方向</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">            <span class="type">int</span> x = i + direction[k];</span><br><span class="line">            <span class="type">int</span> y = j + direction[k + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= matrix.<span class="built_in">size</span>()) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (y &lt; <span class="number">0</span> || y &gt;= matrix[<span class="number">0</span>].<span class="built_in">size</span>()) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (!memo[x][y]) &#123;</span><br><span class="line">                res |= <span class="built_in">hasPath</span>(matrix, memo, word, index + <span class="number">1</span>, x, y);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (res) <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        memo[i][j] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：机器人的运动范围"><a href="#题：机器人的运动范围" class="headerlink" title="题：机器人的运动范围"></a>题：机器人的运动范围</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//记录遍历的四个方向，上下左右</span></span><br><span class="line">    <span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="comment">//记录答案</span></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//计算一个数字的每个数之和</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//连除法算出每一位</span></span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            sum += (n % <span class="number">10</span>);</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//深度优先搜索dfs</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> rows, <span class="type">int</span> cols, <span class="type">int</span> threshold, vector&lt;vector&lt;<span class="type">bool</span>&gt; &gt;&amp; vis)</span></span>&#123;</span><br><span class="line">        <span class="comment">//越界或者已经访问过</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= rows || j &lt; <span class="number">0</span> || j &gt;= cols || !vis[i][j])</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//行列和数字相加大于threshold，不可取</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">cal</span>(i) + <span class="built_in">cal</span>(j) &gt; threshold)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        res += <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//标记经过的位置</span></span><br><span class="line">        vis[i][j] = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//上下左右四个方向搜索</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">            <span class="built_in">dfs</span>(i + dir[k][<span class="number">0</span>], j + dir[k][<span class="number">1</span>], rows, cols, threshold, vis);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">movingCount</span><span class="params">(<span class="type">int</span> threshold, <span class="type">int</span> rows, <span class="type">int</span> cols)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断特殊情况</span></span><br><span class="line">        <span class="keyword">if</span>(threshold &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//标记某个格子没有被访问过</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt; &gt; <span class="built_in">vis</span>(rows, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(cols, <span class="literal">true</span>));</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>, rows, cols, threshold, vis);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：最小数组最大值"><a href="#题：最小数组最大值" class="headerlink" title="题：最小数组最大值"></a>题：最小数组最大值</h2><p> 小红拿到了一个数组 a, 每次操作小红可以选择数组中的任意一个数减去 x, 小红一共能进行k次， 小红想在 <img src="/y-jt/y-jt.github.io/2022/08/08/%E9%9D%A2%E8%AF%95/LC%E5%88%B7%E9%A2%98/Typora\图像\equation-1660758548083.svg" alt="k"> 次操作之后，数组的最大值尽可能小。请你返回这个最大值 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    /**</span><br><span class="line">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="line">     *</span><br><span class="line">     *</span><br><span class="line">     * @param a int整型vector</span><br><span class="line">     * @param k int整型</span><br><span class="line">     * @param x int整型</span><br><span class="line">     * @return int整型</span><br><span class="line">     */</span><br><span class="line">    int minMax(vector&lt;int&gt;&amp; a, int k, int x) &#123;</span><br><span class="line">        priority_queue&lt;int&gt; q;</span><br><span class="line">        for(auto i:a)&#123;</span><br><span class="line">            q.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        while(k--)&#123;</span><br><span class="line">            int todo = q.top();</span><br><span class="line">            q.pop();</span><br><span class="line">            todo = todo - x;</span><br><span class="line">            q.push(todo);</span><br><span class="line">        &#125;</span><br><span class="line">        return q.top();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：返回字符串中最长同一字符子字符串"><a href="#题：返回字符串中最长同一字符子字符串" class="headerlink" title="题：返回字符串中最长同一字符子字符串"></a>题：返回字符串中最长同一字符子字符串</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">strmax</span><span class="params">(string S)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> size = S.<span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> max = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (S[i - <span class="number">1</span>] == S[i]) &#123;</span><br><span class="line">a++;</span><br><span class="line"><span class="keyword">if</span> (a &gt; max) &#123;</span><br><span class="line">max = a;</span><br><span class="line">pos = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; a = <span class="number">1</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> S.<span class="built_in">substr</span>(pos - max + <span class="number">1</span>, max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题：剪绳子"><a href="#题：剪绳子" class="headerlink" title="题：剪绳子"></a>题：剪绳子</h2><p> 例如，当绳子的长度是 8 时，我们把它剪成长度分别为 2、3、3 的三段，此时得到的最大乘积是 18 。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">cutRope</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">3</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> length = n % <span class="number">3</span> == <span class="number">0</span> ? n / <span class="number">3</span> : n / <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> length1 = n % <span class="number">3</span> == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">3</span> - n%<span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> result=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;length1;i++) &#123;</span><br><span class="line">            result=result*<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;length-length1;i++)&#123;</span><br><span class="line">            result=result*<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：给定一个数判断其二进制数中1的个数"><a href="#题：给定一个数判断其二进制数中1的个数" class="headerlink" title="题：给定一个数判断其二进制数中1的个数"></a>题：给定一个数判断其二进制数中1的个数</h2><p> 输入一个整数 n ，输出该数32位二进制表示中1的个数。其中负数用补码表示。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="function"><span class="type">int</span>  <span class="title">NumberOf1</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">         <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">         <span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">             ++ans;</span><br><span class="line">             n=n &amp; (n<span class="number">-1</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> ans;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：数值的整数次方"><a href="#题：数值的整数次方" class="headerlink" title="题：数值的整数次方"></a>题：数值的整数次方</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">Power</span><span class="params">(<span class="type">double</span> base, <span class="type">int</span> exponent)</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> ans=<span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">if</span>(base==<span class="number">0.0</span>) <span class="keyword">return</span> base;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(exponent==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;exponent;i++)&#123;</span><br><span class="line">                ans*=base;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&gt;exponent;i--)&#123;</span><br><span class="line">                ans/=base;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题-打印从1到n位最大数的整数"><a href="#题-打印从1到n位最大数的整数" class="headerlink" title="题:打印从1到n位最大数的整数"></a>题:打印从1到n位最大数的整数</h2><p>输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">printNumbers</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="type">int</span> maxnum = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            maxnum*=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        maxnum-=<span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(maxnum)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;maxnum;i++)&#123;</span><br><span class="line">            ans[i]=i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：删除单链表的节点"><a href="#题：删除单链表的节点" class="headerlink" title="题：删除单链表的节点"></a>题：删除单链表的节点</h2><p>给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。返回删除后的链表的头节点。</p><p>1.此题对比原题有改动</p><p>2.题目保证链表中节点的值互不相同</p><p>3.该题只会输出返回的链表和结果做对比，所以若使用 C 或 C++ 语言，你不需要 free 或 delete 被删除的节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteNode</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(head-&gt;val==val) <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">        ListNode* myHead=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        myHead-&gt;next=head;</span><br><span class="line">        ListNode* pre=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        pre = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pre-&gt;val==val)&#123;</span><br><span class="line">                head-&gt;next=head-&gt;next-&gt;next;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head=head-&gt;next;</span><br><span class="line">            pre=pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> myHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：正则表达式匹配"><a href="#题：正则表达式匹配" class="headerlink" title="题：正则表达式匹配"></a>题：正则表达式匹配</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">match</span><span class="params">(string str, string pattern)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n1 = str.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> n2 = pattern.<span class="built_in">length</span>();</span><br><span class="line">        <span class="comment">// dp[i][j]表示str[0:i]与pattern[0:j]是否匹配</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">dp</span>(n1+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n2+<span class="number">1</span>, <span class="literal">false</span>));</span><br><span class="line">        <span class="comment">// 边界初始化</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>; <span class="comment">// 空串匹配</span></span><br><span class="line">        <span class="comment">// 初始化第一行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">2</span>; i&lt;=n2; i++)&#123;</span><br><span class="line">            <span class="comment">// 遇到*</span></span><br><span class="line">            <span class="keyword">if</span> (pattern[i<span class="number">-1</span>] == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i<span class="number">-2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n1; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=n2; j++)&#123;</span><br><span class="line">                <span class="comment">// 当遇到的字符不为*，判断是否匹配</span></span><br><span class="line">                <span class="keyword">if</span>(pattern[j<span class="number">-1</span>] != <span class="string">&#x27;*&#x27;</span> &amp;&amp; (pattern[j<span class="number">-1</span>] == str[i<span class="number">-1</span>] || pattern[j<span class="number">-1</span>] == <span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j&gt;=<span class="number">2</span> &amp;&amp; pattern[j<span class="number">-1</span>] == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                    <span class="comment">// 若前一位字符为.或者字符匹配的</span></span><br><span class="line">                    <span class="keyword">if</span>(pattern[j<span class="number">-2</span>] == <span class="string">&#x27;.&#x27;</span> || pattern[j<span class="number">-2</span>] == str[i<span class="number">-1</span>])</span><br><span class="line">                        dp[i][j] = dp[i][j<span class="number">-2</span>] || dp[i<span class="number">-1</span>][j];</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        dp[i][j] = dp[i][j<span class="number">-2</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n1][n2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">match</span><span class="params">(string str, string pattern)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">partMatch</span>(str,pattern, <span class="number">0</span>,str.<span class="built_in">length</span>(), <span class="number">0</span>, pattern.<span class="built_in">length</span>());   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">partMatch</span><span class="params">(string str, string pattern,<span class="type">int</span> str_index,<span class="type">int</span> str_size,<span class="type">int</span> pattern_index,<span class="type">int</span> pattern_size)</span></span>&#123;</span><br><span class="line">        <span class="comment">//return situation</span></span><br><span class="line">        <span class="keyword">if</span>(str_index==str_size)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pattern_index==pattern_size) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(pattern_index==pattern_size<span class="number">-2</span>&amp;&amp;pattern[pattern_index+<span class="number">1</span>]==<span class="string">&#x27;*&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pattern_index==pattern_size) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//char+char/. no *</span></span><br><span class="line">        <span class="keyword">if</span>(str[str_index]==pattern[pattern_index]||pattern[pattern_index]==<span class="string">&#x27;.&#x27;</span>)&#123;<span class="comment">//第一位相同  或者  模式为 ‘.’</span></span><br><span class="line">            <span class="keyword">if</span>(pattern_index&lt;pattern_size<span class="number">-1</span>&amp;&amp;pattern[pattern_index+<span class="number">1</span>]==<span class="string">&#x27;*&#x27;</span>)&#123;<span class="comment">//模式不止1位，同时第二位为‘*’</span></span><br><span class="line">                <span class="comment">//find the last same *</span></span><br><span class="line">                <span class="type">int</span> offset=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(pattern_index+<span class="number">1</span>+offset&lt;pattern_size<span class="number">-1</span>&amp;&amp;pattern[pattern_index+<span class="number">1</span>+offset]==<span class="string">&#x27;*&#x27;</span>&amp;&amp;pattern[pattern_index+offset]==pattern[pattern_index])&#123;</span><br><span class="line">                    offset+=<span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                offset-=<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">partMatch</span>(str,pattern,str_index+<span class="number">1</span>,str.<span class="built_in">length</span>(), pattern_index+offset, pattern.<span class="built_in">length</span>())||<span class="built_in">partMatch</span>(str,pattern,str_index+<span class="number">1</span>,str.<span class="built_in">length</span>(), pattern_index+offset+<span class="number">2</span>, pattern.<span class="built_in">length</span>())||<span class="built_in">partMatch</span>(str,pattern,str_index,str.<span class="built_in">length</span>(), pattern_index+offset+<span class="number">2</span>, pattern.<span class="built_in">length</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">partMatch</span>(str,pattern,str_index+<span class="number">1</span>,str.<span class="built_in">length</span>(), pattern_index+<span class="number">1</span>, pattern.<span class="built_in">length</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(pattern_index&lt;pattern_size<span class="number">-2</span>&amp;&amp;pattern[pattern_index+<span class="number">1</span>]==<span class="string">&#x27;*&#x27;</span>) <span class="keyword">return</span> <span class="built_in">partMatch</span>(str,pattern,str_index,str.<span class="built_in">length</span>(), pattern_index+<span class="number">2</span>, pattern.<span class="built_in">length</span>());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题：最长重复子串（red）百度笔试题"><a href="#题：最长重复子串（red）百度笔试题" class="headerlink" title="题：最长重复子串（red）百度笔试题"></a>题：最长重复子串（red）百度笔试题</h2><p>n表示矩阵的行 m表示矩阵的列</p><p>接下来n行 输入一个长为m的”red”字符串</p><p>“red”字符串是指所有字符均为”r”或”e”或”d”</p><p>你可以在矩阵中上下左右移动</p><p>但是r不能移动到d e不能移动到r d不能移动到e</p><p>输出从左上角走到右下角最少需要多长时间</p><p>如无法到达输出-1</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主成分分析 PCA</title>
      <link href="/2022/06/13/%E7%AE%97%E6%B3%95/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90-PCA/"/>
      <url>/2022/06/13/%E7%AE%97%E6%B3%95/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90-PCA/</url>
      
        <content type="html"><![CDATA[<p>主成分分析是一个分析多维分布并且从中提取出带有最多信息的维度自己的方法。</p><span id="more"></span><p>学习链接：</p><p> <a href="https://www.bilibili.com/video/BV1E5411E71z?spm_id_from=333.337.search-card.all.click&vd_source=aa67ec1c08f743d3564f0d6bd14952f0">用最直观的方式告诉你：什么是主成分分析PCA_哔哩哔哩_bilibili</a> </p><p>1.将原始数据去中心化，将新坐标系的原点放在数据中心。</p><p>2.找坐标系，找到数据方差最大的方向。</p><p><img src="/y-jt/y-jt.github.io/2022/06/13/%E7%AE%97%E6%B3%95/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90-PCA/1655103554994.png" alt="1655103554994"></p><p><img src="/y-jt/y-jt.github.io/2022/06/13/%E7%AE%97%E6%B3%95/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90-PCA/1655104316263.png" alt="1655104316263"></p><p><img src="/y-jt/y-jt.github.io/2022/06/13/%E7%AE%97%E6%B3%95/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90-PCA/1655104961278.png" alt="1655104961278"></p><p><img src="/y-jt/y-jt.github.io/2022/06/13/%E7%AE%97%E6%B3%95/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90-PCA/1655105602068.png" alt="1655105602068"></p><p><img src="/y-jt/y-jt.github.io/2022/06/13/%E7%AE%97%E6%B3%95/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90-PCA/1655105679409.png" alt="1655105679409"></p><p><img src="/y-jt/y-jt.github.io/2022/06/13/%E7%AE%97%E6%B3%95/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90-PCA/1655105835751.png" alt="1655105835751"></p><p>使用SVD分解能产生PCA的R矩阵。</p>]]></content>
      
      
      <categories>
          
          <category> opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -opencv </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
